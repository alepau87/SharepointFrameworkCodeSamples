{"version":3,"sources":["KarmaTask.ts"],"names":[],"mappings":";;;;;;AAAA,gCAAyB,4BAA4B,CAAC,CAAA;AAGtD,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAM7B;IAA+B,6BAA0B;IAAzD;QAA+B,8BAA0B;QAChD,SAAI,GAAW,OAAO,CAAC;QACvB,eAAU,GAAqB;YACpC,eAAe,EAAE,mBAAmB;SACrC,CAAC;QAEK,cAAS,GAAW;YACzB,gBAAgB,EAAE,OAAO,CAAC,OAAO,CAAC,qCAAqC,CAAC;YACxE,8BAA8B,EAAE,OAAO,CAAC,OAAO,CAAC,8BAA8B,CAAC;YAC/E,OAAO,EAAE;gBACP,OAAO,CAAC,eAAe,CAAC;gBACxB,OAAO,CAAC,aAAa,CAAC;gBACtB,OAAO,CAAC,gBAAgB,CAAC;gBACzB,OAAO,CAAC,4BAA4B,CAAC;gBACrC,OAAO,CAAC,0BAA0B,CAAC;gBACnC,OAAO,CAAC,kBAAkB,CAAC;aAC5B;SACF,CAAC;IA8CJ,CAAC;IA5CQ,+BAAW,GAAlB,UAAmB,IAAe,EAAE,gBAAkD;QAC5E,qDAAe,CAAuC;QAE9D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACtC,IAAM,eAAe,GAAY,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAE5E,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,UAAU,CACb,iCAA+B,eAAe,uBAAoB;oBAClE,yDAAyD,CAAC,CAAC;YAC/D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,oBAAoB,CAAC,CAAC,CAAC;gBAC7D,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,aAAa,CAAC,EAAE,cAAc,CAAC,CAAC;YAMxE,CAAC;YAED,gBAAgB,EAAE,CAAC;QACrB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAM,MAAM,GAAiB,KAAK,CAAC,MAAM,CAAC;YAC1C,IAAM,SAAS,GAAY,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACpE,IAAM,UAAU,GAAW,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;YAC7D,IAAM,WAAW,GAAW,CAAC,UAAU,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;YAEpF,IAAI,MAAM,CAAC;gBACT,MAAM,EAAE;oBACN,KAAK,EAAE;wBACL,IAAI,EAAE,WAAW;qBAClB;iBACF;gBACD,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC;gBAC7C,SAAS,EAAE,SAAS;aACrB,EAAE,UAAC,QAAQ;gBACV,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACb,gBAAgB,CAAC,gCAAgC,CAAC,CAAC;gBACrD,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,gBAAgB,EAAE,CAAC;gBACrB,CAAC;YACH,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;QACb,CAAC;IACH,CAAC;IACH,gBAAC;AAAD,CA/DA,AA+DC,CA/D8B,0BAAQ,GA+DtC;AA/DY,iBAAS,YA+DrB,CAAA","file":"KarmaTask.js","sourcesContent":["import { GulpTask } from '@microsoft/gulp-core-build';\n\nimport * as gulp from 'gulp';\nimport * as karma from 'karma';\nimport * as path from 'path';\n\nexport interface IKarmaTaskConfig {\n  karmaConfigPath: string;\n}\n\nexport class KarmaTask extends GulpTask<IKarmaTaskConfig> {\n  public name: string = 'karma';\n  public taskConfig: IKarmaTaskConfig = {\n    karmaConfigPath: './karma.config.js'\n  };\n\n  public resources: Object = {\n    bindPolyfillPath: require.resolve('phantomjs-polyfill/bind-polyfill.js'),\n    istanbulInstrumenterLoaderPath: require.resolve('istanbul-instrumenter-loader'),\n    plugins: [\n      require('karma-webpack'),\n      require('karma-mocha'),\n      require('karma-coverage'),\n      require('karma-mocha-clean-reporter'),\n      require('karma-phantomjs-launcher'),\n      require('karma-sinon-chai')\n    ]\n  };\n\n  public executeTask(gulp: gulp.Gulp, completeCallback: (error?: Error | string) => void): void {\n    const { karmaConfigPath }: IKarmaTaskConfig = this.taskConfig;\n\n    if (!this.fileExists(karmaConfigPath)) {\n      const shouldInitKarma: boolean = (process.argv.indexOf('--initkarma') > -1);\n\n      if (!shouldInitKarma) {\n        this.logWarning(\n          `The karma config location '${ karmaConfigPath }' doesn't exist. ` +\n          `Run again using --initkarma to create a default config.`);\n      } else {\n        this.copyFile(path.resolve(__dirname, '../karma.config.js'));\n        this.copyFile(path.resolve(__dirname, '../tests.js'), 'src/tests.js');\n\n        // install dev dependencies?\n        // phantomjs-polyfill?\n        //\n        // install typings for mocha/chai/sinon?\n      }\n\n      completeCallback();\n    } else {\n      const server: karma.Server = karma.Server;\n      const singleRun: boolean = (process.argv.indexOf('--debug') === -1);\n      const matchIndex: number = (process.argv.indexOf('--match'));\n      const matchString: string = (matchIndex === -1) ? '' : process.argv[matchIndex + 1];\n\n      new server({\n        client: {\n          mocha: {\n            grep: matchString\n          }\n        },\n        configFile: this.resolvePath(karmaConfigPath),\n        singleRun: singleRun\n      }, (exitCode) => {\n        if (exitCode) {\n          completeCallback('Error(s) occured during karma.');\n        } else {\n          completeCallback();\n        }\n      }).start();\n    }\n  }\n}\n"],"sourceRoot":"/src"}