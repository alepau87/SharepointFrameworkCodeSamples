{"version":3,"sources":["CopyTask.ts"],"names":[],"mappings":";;;;;;AAAA,yBAAyB,YAAY,CAAC,CAAA;AAUtC;IAA8B,4BAAqB;IAAnD;QAA8B,8BAAqB;QAC1C,eAAU,GAAgB;YAC/B,MAAM,EAAE,EAAE;YACV,aAAa,EAAE,IAAI;SACpB,CAAC;IAkCJ,CAAC;IAhCQ,8BAAW,GAAlB,UACE,IAAe,EACf,gBAA2C;QAG3C,4BAA4B;QAC5B,IAAM,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;QACxC,IAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;QAClC,IAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;QAChC,IAAA,oBAAiD,EAAzC,kBAAM,EAAE,gCAAa,CAAqB;QAClD,2BAA2B;QAE3B,IAAM,UAAU,GAA6B,EAAE,CAAC;QAEhD;YACE,EAAE,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACpC,IAAM,OAAO,GAAa,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAE3C,OAAO,CAAC,OAAO,CAAC,UAAA,WAAW,IAAI,OAAA,UAAU,CAAC,IAAI,CAC5C,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC;qBAClB,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,OAAO,EAAE,CAAC,CAAC;qBACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAC7B,EAJ8B,CAI9B,CAAC,CAAC;YACL,CAAC;;QATH,GAAG,CAAC,CAAC,IAAM,QAAQ,IAAI,MAAM,CAAC;;SAU7B;QAED,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5B,gBAAgB,EAAE,CAAC;QACrB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC;IACH,eAAC;AAAD,CAtCA,AAsCC,CAtC6B,mBAAQ,GAsCrC;AAtCY,gBAAQ,WAsCpB,CAAA","file":"CopyTask.js","sourcesContent":["import { GulpTask } from './GulpTask';\nimport gulp = require('gulp');\n\nexport interface ICopyConfig {\n  copyTo: {\n    [destPath: string]: string[];\n  };\n  shouldFlatten?: boolean;\n}\n\nexport class CopyTask extends GulpTask<ICopyConfig> {\n  public taskConfig: ICopyConfig = {\n    copyTo: {},\n    shouldFlatten: true\n  };\n\n  public executeTask(\n    gulp: gulp.Gulp,\n    completeCallback: (result?: Object) => void\n  ): Promise<Object> | NodeJS.ReadWriteStream | void {\n\n    /* tslint:disable:typedef */\n    const flatten = require('gulp-flatten');\n    const gulpif = require('gulp-if');\n    const merge = require('merge2');\n    const { copyTo, shouldFlatten } = this.taskConfig;\n    /* tslint:enable:typedef */\n\n    const allStreams: NodeJS.ReadWriteStream[] = [];\n\n    for (const copyDest in copyTo) {\n      if (copyTo.hasOwnProperty(copyDest)) {\n        const sources: string[] = copyTo[copyDest];\n\n        sources.forEach(sourceMatch => allStreams.push(\n          gulp.src(sourceMatch)\n            .pipe(gulpif(shouldFlatten, flatten()))\n            .pipe(gulp.dest(copyDest))\n        ));\n      }\n    }\n\n    if (allStreams.length === 0) {\n      completeCallback();\n    } else {\n      return merge(allStreams);\n    }\n  }\n}\n"],"sourceRoot":"/src"}