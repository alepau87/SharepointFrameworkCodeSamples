import * as yargs from 'yargs';
import * as gulp from 'gulp';
import { IExecutable, CopyTask } from '@microsoft/gulp-core-build';
export * from '@microsoft/gulp-core-build';
export * from '@microsoft/gulp-core-build-typescript';
export * from '@microsoft/gulp-core-build-sass';
export * from '@microsoft/gulp-core-build-serve';
export * from '@microsoft/gulp-core-build-webpack';
export * from '@microsoft/gulp-core-build-karma';
export * from '@microsoft/sp-build-core-tasks';
export declare const preCopy: CopyTask;
export declare const postCopy: CopyTask;
export interface IMsCoreBuildArgs {
    production: boolean;
    ship: boolean;
    tasks: boolean;
    locale: string;
    verbose: boolean;
}
export declare let args: IMsCoreBuildArgs;
export declare function setBuildProperties(properties: {
    [key: string]: any;
}): void;
/**
 * Add additional build tasks to run after the typescript tasks.
 */
export declare function addBuildTasks(tasks: IExecutable | IExecutable[]): void;
export interface IConfigDefinition {
    configFile: string;
    schemaFile: string;
    readmeUrl?: string;
    callback: (config: any) => void;
}
export declare class SpWebBuild {
    protected customConfigs: Array<IConfigDefinition>;
    private _schemaValidator;
    initialize(gulp: gulp.Gulp): void;
    protected getYargs(): yargs.Argv;
    /**
     * Define default task groups.
     */
    protected getTasks(): Map<string, IExecutable>;
    protected getTestTask(): IExecutable;
    protected getCoreBuildTask(): IExecutable;
    protected getBuildTask(): IExecutable;
    protected getBundleTask(): IExecutable;
    protected setupSharedConfig(buildArgs: IMsCoreBuildArgs): void;
    /**
     * This function cleans up the shared config by populating task config properties that depend on other tasks'
     *  user-defined properties.
     */
    protected finalizeSharedConfig(buildArgs: IMsCoreBuildArgs): void;
    private _loadCustomConfig(buildArgs);
    private _readConfigFile(buildArgs, filename, schemafile, helpUrl);
}
export declare const initialize: (gulp: gulp.Gulp) => void;
