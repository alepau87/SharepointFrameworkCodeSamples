{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["// Imports\r\nimport * as fs from 'fs';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport stripJsonComments = require('strip-json-comments');\r\nimport Validator = require('z-schema');\r\nimport * as yargs from 'yargs';\r\nimport * as gulp from 'gulp';\r\n\r\nimport { initializeTslintTask } from '@microsoft/sp-tslint-rules';\r\n\r\nimport {\r\n  IExecutable,\r\n  task,\r\n  serial,\r\n  parallel,\r\n  watch,\r\n  CopyTask,\r\n  setConfig\r\n} from '@microsoft/gulp-core-build';\r\nimport * as gulpCoreBuild from '@microsoft/gulp-core-build';\r\nimport { typescript, tslint, removeTripleSlash } from '@microsoft/gulp-core-build-typescript';\r\nimport sass from '@microsoft/gulp-core-build-sass';\r\nimport { serve, reload } from '@microsoft/gulp-core-build-serve';\r\nimport webpack from '@microsoft/gulp-core-build-webpack';\r\nimport karma from '@microsoft/gulp-core-build-karma';\r\nimport * as spBuildCoreTasks from '@microsoft/sp-build-core-tasks';\r\n\r\n// Exports\r\nexport * from '@microsoft/gulp-core-build';\r\nexport * from '@microsoft/gulp-core-build-typescript';\r\nexport * from '@microsoft/gulp-core-build-sass';\r\nexport * from '@microsoft/gulp-core-build-serve';\r\nexport * from '@microsoft/gulp-core-build-webpack';\r\nexport * from '@microsoft/gulp-core-build-karma';\r\nexport * from '@microsoft/sp-build-core-tasks';\r\n\r\nexport const preCopy: CopyTask = new CopyTask();\r\nexport const postCopy: CopyTask = new CopyTask();\r\npreCopy.name = 'pre-copy';\r\npostCopy.name = 'post-copy';\r\n\r\nconst enableCasperTests: boolean = true;\r\n\r\nconst schemaKey: string = '$schema';\r\n\r\nconst testTaskName: string = 'test';\r\nconst buildTaskName: string = 'build';\r\nconst bundleTaskName: string = 'bundle';\r\nconst deployAzureStorageTaskName: string = 'deploy-azure-storage';\r\nconst packageSolutionTaskName: string = 'package-solution';\r\nconst serveTaskName: string = 'serve';\r\nconst defaultTaskName: string = 'default';\r\n\r\nconst debugBuildMode: string = 'debug';\r\nconst shipBuildMode: string = 'ship';\r\n\r\nexport interface IMsCoreBuildArgs {\r\n  production: boolean;\r\n  ship: boolean;\r\n  tasks: boolean;\r\n  locale: string;\r\n  verbose: boolean;\r\n}\r\n\r\nexport let args: IMsCoreBuildArgs;\r\n\r\nexport function setBuildProperties(properties: { [key: string]: any }): void {\r\n  setConfig({ properties: properties });\r\n}\r\n\r\nconst additionalBuildTasks: IExecutable[] = [];\r\n\r\n/**\r\n * Add additional build tasks to run after the typescript tasks.\r\n */\r\nexport function addBuildTasks(tasks: IExecutable | IExecutable[]): void {\r\n  if ((tasks as IExecutable[]).length) {\r\n    additionalBuildTasks.push.call(this, tasks);\r\n  } else {\r\n    additionalBuildTasks.push(tasks as IExecutable);\r\n  }\r\n}\r\n\r\nexport interface IConfigDefinition {\r\n  configFile: string;\r\n  schemaFile: string;\r\n  readmeUrl?: string;\r\n  callback: (config: any) => void;\r\n}\r\n\r\nfunction getSchemaFilePath(filename: string): string {\r\n  return path.join(__dirname, 'schemas', filename);\r\n}\r\n\r\nexport class SpWebBuild {\r\n  protected customConfigs: Array<IConfigDefinition> = [\r\n    {\r\n      callback: setBuildProperties,\r\n      configFile: 'config.json',\r\n      schemaFile: getSchemaFilePath('config.schema.json')\r\n    },\r\n    {\r\n      callback: serve.setConfig.bind(serve),\r\n      configFile: 'serve.json',\r\n      readmeUrl: 'https://github.com/Microsoft/gulp-core-build-serve#servetask',\r\n      schemaFile: undefined\r\n    },\r\n    {\r\n      callback: spBuildCoreTasks.deployAzureStorage.setConfig.bind(spBuildCoreTasks.deployAzureStorage),\r\n      configFile: 'deploy-azure-storage.json',\r\n      readmeUrl: 'https://github.com/OfficeDev/SharePointUXFramework/wiki/' +\r\n        'Notes-on-Azure-Deployment#configuration',\r\n      schemaFile: undefined\r\n    },\r\n    {\r\n      callback: spBuildCoreTasks.packageSolution.setConfig.bind(spBuildCoreTasks.packageSolution),\r\n      configFile: 'package-solution.json',\r\n      readmeUrl:\r\n        'https://github.com/OfficeDev/SharePointUXFramework/wiki/Notes-on-Solution-Packaging#packaging',\r\n      schemaFile: undefined\r\n    },\r\n    {\r\n      callback: preCopy.setConfig.bind(preCopy),\r\n      configFile: 'pre-copy.json',\r\n      readmeUrl: 'https://github.com/Microsoft/gulp-core-build/blob/master/src/CopyTask.ts',\r\n      schemaFile: getSchemaFilePath('copy.schema.json')\r\n    },\r\n    {\r\n      callback: postCopy.setConfig.bind(postCopy),\r\n      configFile: 'post-copy.json',\r\n      readmeUrl: 'https://github.com/Microsoft/gulp-core-build/blob/master/src/CopyTask.ts',\r\n      schemaFile: getSchemaFilePath('copy.schema.json')\r\n    },\r\n    {\r\n      callback: typescript.setConfig.bind(typescript),\r\n      configFile: 'typescript.json',\r\n      readmeUrl: 'https://github.com/Microsoft/gulp-core-build-typescript/blob/master/src/TypeScriptTask.ts',\r\n      schemaFile: undefined\r\n    },\r\n    {\r\n      callback: tslint.setConfig.bind(tslint),\r\n      configFile: 'tslint.json',\r\n      readmeUrl: 'https://github.com/Microsoft/gulp-core-build-typescript/blob/master/src/TSLintTask.ts',\r\n      schemaFile: undefined\r\n    },\r\n    {\r\n      callback: sass.setConfig.bind(sass),\r\n      configFile: 'sass.json',\r\n      readmeUrl: 'https://github.com/Microsoft/gulp-core-build-sass/blob/master/src/SassTask.ts',\r\n      schemaFile: undefined\r\n    },\r\n    {\r\n      callback: reload.setConfig.bind(reload),\r\n      configFile: 'reload.json',\r\n      readmeUrl: 'https://github.com/Microsoft/gulp-core-build-serve/blob/master/src/ReloadTask.ts',\r\n      schemaFile: undefined\r\n    },\r\n    {\r\n      callback: webpack.setConfig.bind(webpack),\r\n      configFile: 'webpack.json',\r\n      readmeUrl: 'https://github.com/Microsoft/gulp-core-build-webpack/blob/master/src/WebpackTask.ts',\r\n      schemaFile: undefined\r\n    },\r\n    {\r\n      callback: karma.setConfig.bind(karma),\r\n      configFile: 'karma.json',\r\n      readmeUrl: 'https://github.com/Microsoft/gulp-core-build-karma/blob/master/src/KarmaTask.ts',\r\n      schemaFile: undefined\r\n    },\r\n    {\r\n      callback: spBuildCoreTasks.configureWebpack.setConfig.bind(spBuildCoreTasks.configureWebpack),\r\n      configFile: 'configure-webpack.json',\r\n      readmeUrl: 'https://www.npmjs.com/package/@microsoft/sp-build-core-tasks',\r\n      schemaFile: undefined\r\n    },\r\n    {\r\n      callback: spBuildCoreTasks.copyAssets.setConfig.bind(spBuildCoreTasks.copyAssets),\r\n      configFile: 'prepare-deploy.json',\r\n      readmeUrl: 'https://www.npmjs.com/package/@microsoft/sp-build-core-tasks',\r\n      schemaFile: undefined\r\n    },\r\n    {\r\n      callback: spBuildCoreTasks.writeManifests.setConfig.bind(spBuildCoreTasks.writeManifests),\r\n      configFile: 'write-manifests.json',\r\n      readmeUrl: 'https://www.npmjs.com/package/@microsoft/sp-build-core-tasks',\r\n      schemaFile: undefined\r\n    },\r\n    {\r\n      callback: spBuildCoreTasks.copyStaticAssets.setConfig.bind(spBuildCoreTasks.copyStaticAssets),\r\n      configFile: 'copy-static-assets.json',\r\n      readmeUrl: 'https://www.npmjs.com/package/@microsoft/sp-build-core-tasks',\r\n      schemaFile: getSchemaFilePath('copy-static-assets.schema.json')\r\n    }\r\n  ];\r\n\r\n  private _schemaValidator: ZSchema.Validator = new Validator({\r\n    breakOnFirstError: true,\r\n    noExtraKeywords: true,\r\n    noTypeless: true\r\n  });\r\n\r\n  public initialize(gulp: gulp.Gulp): void {\r\n    const yargsArgs: yargs.Argv = this.getYargs();\r\n    const command: string = yargsArgs.argv._[0];\r\n\r\n    args = yargsArgs.argv;\r\n\r\n    // TODO: VSO#178074: this code should be removed once we determine the interface for argument parsing with GCB\r\n    switch (command) {\r\n      case testTaskName:\r\n        yargsArgs.reset()\r\n          .option('debug', {\r\n            describe: 'run tests in debug mode'\r\n          })\r\n          .option('match', {\r\n            describe: 'regular expression. Only run tests that match',\r\n            string: true\r\n          });\r\n        break;\r\n\r\n      case serveTaskName:\r\n        yargsArgs.reset()\r\n          .option('port', {\r\n            description: 'the port to serve on should be the next argument (e.g. \"--port 80\")'\r\n          })\r\n          .option('nobrowser', {\r\n            description: 'don\\'t open a browser after initial bundle'\r\n          });\r\n        break;\r\n\r\n      default:\r\n        yargsArgs.reset(); // These commands have no special options.\r\n        break;\r\n    }\r\n\r\n    yargsArgs.usage([\r\n        'CONFIG FILES'\r\n      ].concat(\r\n        this.customConfigs.map((config: IConfigDefinition) => {\r\n          return `   ${config.configFile}${os.EOL}${config.readmeUrl ? config.readmeUrl : ''}${os.EOL}`;\r\n        }\r\n      ))\r\n      .join(os.EOL));\r\n\r\n    // Note this overrides the getters for ship and production on args\r\n    args.ship = args.production = (args.production || args.ship);\r\n\r\n    gulpCoreBuild.setConfig({\r\n      production: args.production\r\n    });\r\n\r\n    const tasks: Map<string, IExecutable> = this.getTasks();\r\n    tasks.forEach((executable: IExecutable, name: string): void => {\r\n      task(name, executable);\r\n    });\r\n\r\n    // If they are just looking for the task list, save time by not reading config files\r\n    if (!args.tasks) {\r\n      // Configure tasks for a normal build\r\n      console.log('Build target: ' + (args.ship ? shipBuildMode.toUpperCase() : debugBuildMode.toUpperCase()));\r\n\r\n      this.setupSharedConfig(args);\r\n      this._loadCustomConfig(args);\r\n      this.finalizeSharedConfig(args);\r\n    }\r\n\r\n    gulpCoreBuild.initialize(gulp);\r\n  }\r\n\r\n  protected getYargs(): yargs.Argv {\r\n    const yargsArgs: yargs.Argv = yargs.usage()\r\n      .option('production', {\r\n        alias: 'p',\r\n        describe: 'build in ship mode with full localization and minimization',\r\n        boolean: true\r\n      })\r\n      .option('ship', {\r\n        alias: 'p',\r\n        describe: 'build in ship mode with full localization and minimization',\r\n        boolean: true\r\n      })\r\n      .option('locale', {\r\n        alias: 'l',\r\n        describe: 'override the default culture (e.g. \"fr-fr\")',\r\n        string: true\r\n      })\r\n      .option('verbose', {\r\n        describe: 'run the build with verbose logging'\r\n      })\r\n      // TODO: VSO#178074: this code should be removed once we determine the interface for argument parsing with GCB\r\n      .option('tasks', {\r\n        alias: ['T', 'tasks-simple'],\r\n        describe: 'shows the list of tasks which can be run'\r\n      })\r\n      .help('h')\r\n      .global(['production', 'locale', 'verbose', 'h'])\r\n      .command(buildTaskName, 'build the project')\r\n      .command(bundleTaskName, 'build, localize, and bundle the project')\r\n      .command(deployAzureStorageTaskName, 'upload the assets to a development CDN')\r\n      .command(packageSolutionTaskName, 'package the project into a SPAPP')\r\n      .command(testTaskName, 'build, localize, and bundle the project and run tests, and verify the coverage')\r\n      .command(serveTaskName, 'build and bundle the project and run the development server')\r\n      .command(defaultTaskName, 'equivalent to bundle');\r\n\r\n    return yargsArgs;\r\n  }\r\n\r\n  /**\r\n   * Define default task groups.\r\n   */\r\n  protected getTasks(): Map<string, IExecutable> {\r\n    const result: Map<string, IExecutable> = new Map<string, IExecutable>();\r\n\r\n    result.set(buildTaskName, this.getBuildTask());\r\n\r\n    result.set(bundleTaskName, this.getBundleTask());\r\n\r\n    result.set(testTaskName, this.getTestTask());\r\n\r\n    result.set(deployAzureStorageTaskName, spBuildCoreTasks.deployAzureStorage as any);\r\n    result.set(packageSolutionTaskName, spBuildCoreTasks.packageSolution as any);\r\n\r\n    // @todo VSO #167343 - remove this once bug from running 'gulp bundle test' in @microsoft/gulp-core-build is fixed\r\n    result.set(testTaskName, this.getTestTask());\r\n\r\n    result.set(serveTaskName,\r\n               serial(result.get(bundleTaskName),\r\n                      serve as any,\r\n                      watch([ 'src/**/*.{ts,tsx,scss,resx,js,json,html}',\r\n                              '!src/**/*.{scss.ts,resx.ts}'],\r\n                            serial(result.get(bundleTaskName), reload as any))));\r\n\r\n    result.set(defaultTaskName, result.get(bundleTaskName));\r\n\r\n    return result;\r\n  }\r\n\r\n  protected getTestTask(): IExecutable {\r\n    return serial(this.getBundleTask(),\r\n                  (enableCasperTests\r\n                    ? parallel(spBuildCoreTasks.casperJSRunner as any, karma as any)\r\n                    : karma) as IExecutable);\r\n  }\r\n\r\n  protected getCoreBuildTask(): IExecutable {\r\n    return parallel(tslint,\r\n                    serial(sass as any,\r\n                            serial(typescript, removeTripleSlash),\r\n                            serial(...additionalBuildTasks)),\r\n                      spBuildCoreTasks.copyStaticAssets as any);\r\n  }\r\n\r\n  protected getBuildTask(): IExecutable {\r\n    return serial(preCopy,\r\n                  this.getCoreBuildTask(),\r\n                  postCopy);\r\n  }\r\n\r\n  protected getBundleTask(): IExecutable {\r\n    return serial(this.getBuildTask(),\r\n                  spBuildCoreTasks.configureWebpack as any,\r\n                  webpack as any,\r\n                  spBuildCoreTasks.prepareDeploy  as any,\r\n                  spBuildCoreTasks.writeManifests as any);\r\n  }\r\n\r\n  protected setupSharedConfig(buildArgs: IMsCoreBuildArgs): void {\r\n    initializeTslintTask(tslint as any);\r\n\r\n    sass.setConfig({\r\n      dropCssFiles: true  // Drops .css files in the lib directory for webpack\r\n    });\r\n\r\n    karma.setConfig({\r\n      karmaConfigPath: path.resolve(path.join(__dirname, '..', 'karma.config.js'))\r\n    });\r\n\r\n    spBuildCoreTasks.configureWebpack.setConfig({\r\n      webpack: (webpack as any)\r\n    });\r\n\r\n    spBuildCoreTasks.writeManifests.setConfig({\r\n      debugLocale: buildArgs.locale\r\n    });\r\n\r\n    if (buildArgs.production) {\r\n      spBuildCoreTasks.copyAssets.setConfig({\r\n        extsToIgnore: ['.map', '.stats.json', '.stats.html']\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This function cleans up the shared config by populating task config properties that depend on other tasks'\r\n   *  user-defined properties.\r\n   */\r\n  protected finalizeSharedConfig(buildArgs: IMsCoreBuildArgs): void {\r\n    spBuildCoreTasks.writeManifests.setConfig({\r\n      deployCdnPath: spBuildCoreTasks.copyAssets.taskConfig.deployCdnPath,\r\n      debugBasePath:\r\n        `${serve.taskConfig.https ? 'https' : 'http'}://${os.hostname() || 'localhost'}:${serve.taskConfig.port}/`\r\n    });\r\n\r\n    if (buildArgs.production) {\r\n      spBuildCoreTasks.packageSolution.setConfig({\r\n        paths: {\r\n          manifestDir: spBuildCoreTasks.copyAssets.taskConfig.deployCdnPath\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private _loadCustomConfig(buildArgs: IMsCoreBuildArgs): void {\r\n    // Read config files from project folders for various projects\r\n    // @todo VSO #178074 - move this into each task, respectively\r\n\r\n    // Load config file for each plugin\r\n    for (const taskConfigInfo of this.customConfigs) {\r\n      const configFilename: string = path.join(process.cwd(), 'config', taskConfigInfo.configFile);\r\n      const schemaFilename: string = taskConfigInfo.schemaFile;\r\n      const rawConfig: {} = this._readConfigFile(buildArgs, configFilename, schemaFilename, taskConfigInfo.readmeUrl);\r\n      if (rawConfig) {\r\n        taskConfigInfo.callback(rawConfig);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _readConfigFile(buildArgs: IMsCoreBuildArgs, filename: string, schemafile: string, helpUrl: string): Object {\r\n    if (!fs.existsSync(filename)) {\r\n      return undefined;\r\n    } else {\r\n      if (buildArgs.verbose) {\r\n        console.log(`Found config file: ${path.basename(filename)}`);\r\n      }\r\n      const contents: Buffer = fs.readFileSync(filename);\r\n      const stripped: string = stripJsonComments(contents.toString());\r\n      const rawConfig: Object = JSON.parse(stripped);\r\n\r\n      delete rawConfig[schemaKey];\r\n\r\n      if (schemafile) {\r\n        const schema: {} = require(schemafile);\r\n        if (!this._schemaValidator.validate(rawConfig, schema)) {\r\n          const error: ZSchema.SchemaError = this._schemaValidator.getLastError();\r\n          const errorMessage: string =\r\n            `Error parsing file '${path.basename(filename)}', section [${error.path}]:`\r\n            + os.EOL + `(${error.code}) ${error.message} ` + os.EOL + os.EOL +\r\n            (helpUrl ? 'For more usage, please read:' + os.EOL + helpUrl : '');\r\n\r\n          console.log(os.EOL + 'ERROR: ' + errorMessage + os.EOL + os.EOL);\r\n          throw new Error(errorMessage);\r\n        }\r\n      }\r\n\r\n      return rawConfig;\r\n    }\r\n  }\r\n}\r\n\r\n// Replace gcb.initialize to call our init stuff first.\r\nexport const initialize: (gulp: gulp.Gulp) => void = (gulp: gulp.Gulp): void => {\r\n  const build: SpWebBuild = new SpWebBuild();\r\n  build.initialize(gulp);\r\n};\r\n"],"sourceRoot":"/src"}