var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
define(["require", "exports", 'react', '../../../index', '../../components/index', '../../utilities/pageroute', '../../components/App/AppState', './examples/ProgressIndicator.Basic.Example'], function (require, exports, React, index_1, index_2, pageroute_1, AppState_1, ProgressIndicator_Basic_Example_1) {
    "use strict";
    var ProgressIndicatorBasicExampleCode = require('./examples/ProgressIndicator.Basic.Example.tsx');
    var ProgressIndicatorPage = (function (_super) {
        __extends(ProgressIndicatorPage, _super);
        function ProgressIndicatorPage() {
            _super.call(this);
            this._url = pageroute_1.getPageRouteFromState(AppState_1.AppState, 'Basic components', 'ProgressIndicator');
        }
        ProgressIndicatorPage.prototype.render = function () {
            return (React.createElement(index_2.ComponentPage, {title: 'ProgressIndicator', componentName: 'ProgressIndicatorExample', exampleCards: [
                React.createElement(index_2.ExampleCard, {title: 'ProgressIndicator', code: ProgressIndicatorBasicExampleCode}, React.createElement(ProgressIndicator_Basic_Example_1.ProgressIndicatorBasicExample, null))
            ], propertiesTables: [
                React.createElement(index_2.PropertiesTableSet, {componentName: 'ProgressIndicator'})
            ], overview: React.createElement("div", null, React.createElement(index_1.Link, {target: '_blank', href: 'http://dev.office.com/fabric/components/ProgressIndicator'}, "ProgressIndicators"), React.createElement("span", null, " allow the user to see the status of activities. Unlike the Spinner, ProgressIndicator should accurately display the progress of the activity while the Spinner is used when the time is indeterminate.")), route: this._url, isHeaderVisible: this.props.isHeaderVisible}));
        };
        return ProgressIndicatorPage;
    }(React.Component));
    exports.ProgressIndicatorPage = ProgressIndicatorPage;
});
