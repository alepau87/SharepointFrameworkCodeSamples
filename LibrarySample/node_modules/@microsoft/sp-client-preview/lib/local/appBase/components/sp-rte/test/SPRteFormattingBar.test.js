"use strict";
/**
 * SPERteFormattingBar.ts tests
 */
var chai_1 = require('chai');
var enzyme_1 = require('enzyme');
var React = require('react');
var SpRteFormattingBar_1 = require('../formattingbar/SpRteFormattingBar');
var MockToolbarButtonProps_1 = require('../../canvas/mocks/MockToolbarButtonProps');
var ToolbarButton_1 = require('../../canvas/canvas/ToolbarButton');
var office_ui_fabric_react_1 = require('office-ui-fabric-react');
describe('FormattingBar tests', function () {
    var formattingBarElement;
    var mockProps;
    var onKeyDown;
    var formattingBarPosition = { left: 0, top: 0, right: undefined, position: 'fixed' };
    var mockButtonsProps;
    var mockButtons = [];
    beforeEach(function () {
        onKeyDown = sinon.spy();
        mockButtonsProps = MockToolbarButtonProps_1.default.getToolbarButtons(2);
        mockButtons.push(React.createElement(ToolbarButton_1.default, mockButtonsProps[0]));
        mockButtons.push(React.createElement(ToolbarButton_1.default, mockButtonsProps[1]));
        mockProps = {
            buttons: mockButtons,
            position: formattingBarPosition,
            onKeyDown: onKeyDown
        };
        formattingBarElement = enzyme_1.mount(React.createElement(SpRteFormattingBar_1.default, mockProps));
    });
    afterEach(function () {
        formattingBarElement.unmount();
    });
    it('calls componentDidMount after mounting', function (done) {
        var spy = sinon.spy(SpRteFormattingBar_1.default.prototype, 'componentDidMount');
        formattingBarElement = enzyme_1.mount(React.createElement(SpRteFormattingBar_1.default, mockProps));
        chai_1.assert(spy.calledOnce);
        done();
    });
    it('should render the toolbarButtons as expected', function (done) {
        chai_1.expect(formattingBarElement.find(ToolbarButton_1.default).length).to.be.eq(2);
        done();
    });
    it('should render the focus zone as expected', function (done) {
        chai_1.expect(formattingBarElement.find(office_ui_fabric_react_1.FocusZone).length).to.be.eq(1);
        done();
    });
    it('should render the toolbar as expected', function (done) {
        chai_1.expect(formattingBarElement.find("[data-automation-id='toolbar']").length).to.be.eq(1);
        done();
    });
    it('should set the formatting bar position as expected', function (done) {
        chai_1.expect(formattingBarElement.find("[data-automation-id='toolbar']").html()).
            to.contain('style="left:0;top:0;position:fixed;"');
        done();
    });
});

//# sourceMappingURL=SPRteFormattingBar.test.js.map
