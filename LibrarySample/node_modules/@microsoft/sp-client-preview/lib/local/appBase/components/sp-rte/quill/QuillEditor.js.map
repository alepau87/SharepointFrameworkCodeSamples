{"version":3,"sources":["local/appBase/components/sp-rte/quill/QuillEditor.ts"],"names":[],"mappings":"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","file":"local/appBase/components/sp-rte/quill/QuillEditor.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n */\r\n\r\nimport { IBounds } from '../rte/IBounds';\r\nimport { IRange } from '../rte/IRange';\r\nimport { IRichTextFormat } from '../rte/IRichTextFormat';\r\nimport { IRichTextEditor } from '../rte/IRichTextEditor';\r\nimport { IRichTextEditorLoader } from '../rte/IRichTextEditorLoader';\r\nimport QuillInstance = require('QuillInstance');\r\nimport QuillLoader from './QuillLoader';\r\nimport SPRteConfiguration from '../rte/SPRteConfiguration';\r\n\r\nimport './QuillEditor.scss';\r\nimport Strings from '../../sp-canvas/loc/CanvasStrings.resx';\r\n\r\n/**\r\n * Implmentation of IRichTextEditor for Quill 1.0.0-beta.9\r\n */\r\nexport default class QuillEditor implements IRichTextEditor {\r\n  public static moduleLoader: IRichTextEditorLoader = new QuillLoader();\r\n\r\n  private _config: SPRteConfiguration;\r\n  private _editorElement: HTMLDivElement;\r\n  private _quill: QuillInstance;\r\n  private _quillModule: QuillStatic;\r\n  private _quillEditorElement: HTMLElement;\r\n  private _handleSelectionChange: (range: IRange) => void;\r\n  private _handleTextChange: () => void;\r\n\r\n  /**\r\n   * @return Promise of the instance that resolves once the editor is loaded on the element\r\n   *\r\n   * Static wrapper for constructing an instance\r\n   */\r\n  public static createNewEditor(\r\n      config: SPRteConfiguration,\r\n      currentHTML: string,\r\n      editorElement: HTMLDivElement,\r\n      selectionChangeCallback: (range: IRange) => void,\r\n      textChangeCallback: () => void\r\n    ): Promise<QuillEditor> {\r\n    return new Promise<QuillEditor>(\r\n      (resolve?: (result: QuillEditor) => void) => {\r\n        QuillEditor.moduleLoader.loadModule().then(() => {\r\n          const editor: QuillEditor = new QuillEditor(\r\n            config,\r\n            currentHTML,\r\n            editorElement,\r\n            selectionChangeCallback,\r\n            textChangeCallback\r\n          );\r\n          resolve(editor);\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Use createNewEditor instead of constructor to ensure using the editor after it's loaded\r\n   * Note: TypeScript doesn't allow private constructors\r\n   */\r\n  public constructor(\r\n    config: SPRteConfiguration,\r\n    currentHTML: string,\r\n    editorElement: HTMLDivElement,\r\n    selectionChangeCallback: (range: IRange) => void,\r\n    textChangeCallback: () => void\r\n  ) {\r\n    this._config = config;\r\n    this._editorElement = editorElement;\r\n    this._handleSelectionChange = selectionChangeCallback;\r\n    this._handleTextChange = textChangeCallback;\r\n\r\n    this._handleSelectionChangeConvert = this._handleSelectionChangeConvert.bind(this);\r\n    this._findWrappingElementByTagName = this._findWrappingElementByTagName.bind(this);\r\n    this.focus = this.focus.bind(this);\r\n    this.format = this.format.bind(this);\r\n    this.getSelection = this.getSelection.bind(this);\r\n\r\n    this._initialize(currentHTML);\r\n  }\r\n\r\n  public destroy(): string {\r\n    if (this._quill) {\r\n      const previousHTML: string = this.getHTML();\r\n      this._quill = undefined;\r\n      return previousHTML;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  public focus(): void {\r\n    // Use setActive() instead of focus() if available, because focus() scrolls to view in IE\r\n    if (this._editorElement && this._editorElement.setActive) {\r\n      this._quillEditorElement.setActive();\r\n    } else {\r\n      this._quill.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param start - Start position of selection\r\n   * @param end - End position of selection\r\n   * @param formats - Map of key:value pairs for formats to apply\r\n   * @param applyAllFormatsToLine - Forces all formats to be applied to the whole line(s). If not provided,\r\n   * formats are divided into two buckets (line vs non-line) based on their isLine field\r\n   *\r\n   * A unified method for applying Quill formats to any selection\r\n   */\r\n  public format(start: number, end: number, formats: Object, applyAllFormatsToLine?: boolean): void {\r\n    const lineFormats: Object = applyAllFormatsToLine ? formats : {};\r\n    const nonLineFormats: Object = {};\r\n\r\n    if (!applyAllFormatsToLine) {\r\n      // Divide formats into two buckets: Line and Non-Line\r\n      /* tslint:disable */\r\n      for (const formateditorKey in formats) {\r\n      /* tslint:enable */\r\n        const format: IRichTextFormat = this._config.supportedFormatsArray\r\n            .filter((format) => { return format.editorKey === formateditorKey; })[0];\r\n        if (format && format.isLine) {\r\n          lineFormats[format.editorKey] = formats[format.editorKey];\r\n        } else {\r\n          nonLineFormats[format.editorKey] = formats[format.editorKey];\r\n        }\r\n      }\r\n    }\r\n\r\n    this._quill.formatLine(start, end - start, lineFormats);\r\n\r\n    if (!applyAllFormatsToLine) {\r\n      /* tslint:disable */\r\n      if (nonLineFormats.hasOwnProperty('link') &&\r\n        this.isFormatAppliedToRange(start, end, this._config.formats.get('link'))) {\r\n        // There is already a link on the selection, remove or edit it\r\n        if (start === end) {\r\n          const linkElement: HTMLElement = this._findWrappingElementByTagName(start, 'A');\r\n          if (linkElement) {\r\n            if (nonLineFormats['link'] as boolean) {\r\n              linkElement.setAttribute('href', nonLineFormats['link']);\r\n              linkElement.setAttribute('target', '_blank');\r\n            } else {\r\n              const container: HTMLElement = linkElement.parentElement;\r\n              if (container) {\r\n                const textNode: Text = document.createTextNode(linkElement.textContent);\r\n                container.insertBefore(textNode, linkElement);\r\n                container.removeChild(linkElement);\r\n              }\r\n            }\r\n            nonLineFormats['link'] = undefined;\r\n          }\r\n        } else if (nonLineFormats['link'] as boolean) {\r\n          // Edit link on non-collapsed selection\r\n          let linkElement: HTMLElement;\r\n          const linkAtEnd: HTMLElement = this._findWrappingElementByTagName(end, 'A');\r\n          // If the selection size is larger than 1, make sure the whole selection is on the same link\r\n          if (end - start > 1) {\r\n            const linkAtStart: HTMLElement = this._findWrappingElementByTagName(start + 1, 'A');\r\n            linkElement = linkAtStart && linkAtEnd && linkAtStart.isEqualNode(linkAtEnd) ? linkAtEnd : undefined;\r\n          } else {\r\n            linkElement = linkAtEnd;\r\n          }\r\n\r\n          if (linkElement) {\r\n            linkElement.setAttribute('href', nonLineFormats['link']);\r\n            linkElement.setAttribute('target', '_blank');\r\n            nonLineFormats['link'] = undefined;\r\n          }\r\n        }\r\n      }\r\n      /* tslint:enable */\r\n\r\n      // Apply Non-Line formats\r\n      if (start === end) {\r\n        /* tslint:disable */\r\n        for (let format in nonLineFormats) {\r\n          this._quill.format(format, nonLineFormats[format]);\r\n        }\r\n        /* tslint:enable */\r\n      } else {\r\n        this._quill.formatText(start, end - start, nonLineFormats);\r\n      }\r\n    }\r\n  }\r\n\r\n  public getBounds(position: number): IBounds {\r\n    return this._quill.getBounds(position);\r\n  }\r\n\r\n  public getFormatValue(start: number, end: number, format: IRichTextFormat): boolean | string {\r\n    if (format.key === 'link') {\r\n      let linkElement: HTMLElement;\r\n      const linkAtEnd: HTMLElement = this._findWrappingElementByTagName(end, 'A');\r\n      // If the selection size is larger than 1, make sure the whole selection is on the same link\r\n      if (end - start > 1) {\r\n        const linkAtStart: HTMLElement = this._findWrappingElementByTagName(start + 1, 'A');\r\n        linkElement = linkAtStart && linkAtEnd && linkAtStart.isEqualNode(linkAtEnd) ? linkAtEnd : undefined;\r\n      } else {\r\n        linkElement = linkAtEnd;\r\n      }\r\n      return linkElement ? linkAtEnd.getAttribute('href') : undefined;\r\n    } else {\r\n      const activeFormats: Object = this._quill.getFormat(start, end);\r\n      return activeFormats[format.editorKey];\r\n    }\r\n  }\r\n\r\n  public getSelection(): IRange {\r\n    const range: QuillRange = this._quill.getSelection();\r\n    return range ? {\r\n      start: range.index,\r\n      end: range.index + range.length\r\n    } : undefined;\r\n  }\r\n\r\n  public getText(range?: IRange): string {\r\n    return range ?\r\n      this._quill.getText(range.start, range.end - range.start) :\r\n      this._quill.getText();\r\n  }\r\n\r\n  public getHTML(): string {\r\n    return this._quillEditorElement ? this._quillEditorElement.innerHTML : '';\r\n  }\r\n\r\n  public getEditorType(): string {\r\n    return 'Quill';\r\n  }\r\n\r\n  /**\r\n   * @param format - Name of the format to apply from QUILL_FORMATS or SPRTE_FORMATS\r\n   * @param start - Start value of range\r\n   * @param end - End value of range\r\n   *\r\n   * @return A dictionary of string=>boolean indicating if the format is applied to the given range\r\n   */\r\n  public isFormatAppliedToRange(start: number, end: number, format: IRichTextFormat): boolean {\r\n    const activeFormats: Object = this._quill.getFormat(start, end - start);\r\n\r\n    return format.editorValue !== undefined ?\r\n      activeFormats[format.editorKey] === format.editorValue :\r\n      activeFormats.hasOwnProperty(format.editorKey);\r\n  }\r\n\r\n  public setSelection(range: IRange): void {\r\n    this._quill.setSelection(range.start, range.end - range.start);\r\n  }\r\n\r\n  private _findWrappingElementByTagName(position: number, tagName: string): HTMLElement {\r\n    if (this._quillModule && tagName === 'A') {\r\n      /* tslint:disable */\r\n      const _linkFormat: any = this._quillModule.import('formats/link');\r\n      const link: any = this._quill.scroll.descendants(_linkFormat, Math.max(0, position - 1))[0];\r\n      /* tslint:enable */\r\n      return link ? link.domNode as HTMLElement : undefined;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  private _handleSelectionChangeConvert(range: QuillRange): void {\r\n    const newRange: IRange = range ? {\r\n      start: range.index,\r\n      end: range.index + range.length\r\n    } : undefined;\r\n\r\n    this._handleSelectionChange(newRange);\r\n  }\r\n\r\n  /**\r\n   * Initialize Quill with whitelist of formats, prevent default css,\r\n   * add custom formats, and registering event handlers.\r\n   */\r\n  private _initialize(currentHTML: string): void {\r\n    QuillEditor.moduleLoader.loadModule().then((quillModule) => {\r\n      const quillFormatKeys: string[] = this._config.supportedFormatsArray\r\n        .filter((format) => { return format.isEditorNative; })\r\n        .map((format) => { return format.editorKey; })\r\n        .filter((formatKey, index, self) => { return self.indexOf(formatKey) === index; });  // Distinct keys\r\n\r\n      this._quillModule = quillModule;\r\n      const quill: QuillInstance = new quillModule(this._editorElement, {\r\n        formats: quillFormatKeys,\r\n        readOnly: false,\r\n        styles: false,\r\n        placeholder: Strings.TextWebPartPlaceholder\r\n      });\r\n\r\n      // Convert div to p, .quote-true to blockquote, b to strong, em to i\r\n      const container: HTMLElement = document.createElement('DIV');\r\n      container.innerHTML = currentHTML;\r\n      const divs: NodeList = container.querySelectorAll('div');\r\n      for (let i: number = 0; i < divs.length; i++) {\r\n        const div: HTMLElement = divs[i] as HTMLElement;\r\n        const newElement: HTMLElement = div.classList.contains('quote-true') ?\r\n          document.createElement('BLOCKQUOTE') :\r\n          document.createElement('P');\r\n        div.classList.remove('quote-true');\r\n        for (let j: number = 0; j < div.classList.length; j++) {\r\n          newElement.classList.add(div.classList[j]);\r\n        }\r\n        if (div.hasAttribute('style')) {\r\n          newElement.setAttribute('style', div.getAttribute('style'));\r\n        }\r\n        newElement.innerHTML = div.innerHTML;\r\n        div.parentElement.insertBefore(newElement, div);\r\n        div.parentElement.removeChild(div);\r\n      }\r\n\r\n      /* tslint:disable */\r\n      const newTags: Object = {'b': 'strong', 'i': 'em'};\r\n      for (const tag in newTags) {\r\n        const elements: NodeList = container.querySelectorAll(tag);\r\n        for (let i: number = 0; i < elements.length; i++) {\r\n          const element: HTMLElement = elements[i] as HTMLElement;\r\n          const newElement: HTMLElement = document.createElement(newTags[tag]);\r\n          newElement.innerHTML = element.innerHTML;\r\n          element.parentElement.insertBefore(newElement, element);\r\n          element.parentElement.removeChild(element);\r\n        }\r\n      }\r\n      /* tslint:enable */\r\n\r\n      currentHTML = container.innerHTML;\r\n\r\n      this._quillEditorElement = this._editorElement.querySelector('.ql-editor') as HTMLElement;\r\n      this._quillEditorElement.innerHTML = currentHTML;\r\n\r\n      quill.on('text-change', this._handleTextChange);\r\n      quill.on('selection-change', this._handleSelectionChangeConvert);\r\n\r\n      this._quill = quill;\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}