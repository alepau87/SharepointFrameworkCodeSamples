{"version":3,"sources":["local/appBase/components/canvas/tests/ToolbarSubmenu.test.ts"],"names":[],"mappings":"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","file":"local/appBase/components/canvas/tests/ToolbarSubmenu.test.js","sourcesContent":["/**\r\n * ToolbarSubmenu.ts tests\r\n */\r\nimport { expect } from 'chai';\r\nimport { mount, ReactWrapper } from 'enzyme';\r\nimport * as React from 'react';\r\nimport ToolbarSubmenu, { IToolbarSubmenuProps, IToolbarSubmenuState  }  from '../canvas/ToolbarSubmenu';\r\nimport ToolbarButton, { IToolbarButtonProps } from '../canvas/ToolbarButton';\r\nimport MockToolbarButtonProps from '../mocks/MockToolbarButtonProps';\r\nimport { FocusZone } from 'office-ui-fabric-react';\r\n\r\ndescribe('ToolbarSubmenu tests', () => {\r\n  let toolbarSubmenuElement: ReactWrapper<IToolbarSubmenuProps, IToolbarSubmenuState>;\r\n  let mockProps: IToolbarSubmenuProps;\r\n  let onClose: Sinon.SinonSpy;\r\n  let onOpen: Sinon.SinonSpy;\r\n  let mockButtons: IToolbarButtonProps[];\r\n\r\n  beforeEach(() => {\r\n    onClose = sinon.spy();\r\n    onOpen = sinon.spy();\r\n    mockButtons = MockToolbarButtonProps.getToolbarButtons(2);\r\n    mockProps = {\r\n      isOpen: true,\r\n      onClose: onClose,\r\n      onOpen: onOpen,\r\n      buttons: mockButtons,\r\n      title: 'Toolbar submenu',\r\n      isWide: false\r\n    };\r\n    toolbarSubmenuElement = mount<IToolbarSubmenuProps, IToolbarSubmenuState>\r\n      (React.createElement(ToolbarSubmenu, mockProps));\r\n  });\r\n\r\n  afterEach(() => {\r\n    toolbarSubmenuElement.unmount();\r\n  });\r\n\r\n  it('should render the toolbarButtons as expected', (done: MochaDone) => {\r\n    expect(toolbarSubmenuElement.find(ToolbarButton).length).to.be.eq(3);\r\n    done();\r\n  });\r\n\r\n  it('should render the focus zone as expected', (done: MochaDone) => {\r\n    expect(toolbarSubmenuElement.find(FocusZone).length).to.be.eq(1);\r\n    done();\r\n  });\r\n\r\n  it('should open the submenu when display button is clicked', (done: MochaDone) => {\r\n    expect(toolbarSubmenuElement.find(`[data-automation-id='displayButton']`).length).to.be.eq(1);\r\n    toolbarSubmenuElement.find(`[data-automation-id='displayButton']`).simulate('click');\r\n    expect(onOpen.calledOnce).to.be.true;\r\n    done();\r\n  });\r\n\r\n  it('should close the sub menu when button is clicked', (done: MochaDone) => {\r\n    expect(toolbarSubmenuElement.find(`[data-automation-id='0-id']`).length).to.be.eq(1);\r\n    toolbarSubmenuElement.find(`[data-automation-id='0-id']`).simulate('click');\r\n    expect(onClose.calledOnce).to.be.true;\r\n    done();\r\n  });\r\n\r\n  it('should close the submenu on left and right arrow key down', (done: MochaDone) => {\r\n    expect(toolbarSubmenuElement.find(`[data-automation-id='subMenuContainer']`).length).to.be.eq(1);\r\n    toolbarSubmenuElement.setState({ isOpen: true });\r\n    toolbarSubmenuElement.find(`[data-automation-id='subMenuContainer']`).simulate('keyDown', { key: 'ArrowLeft' });\r\n    expect(onClose.calledOnce).to.be.true;\r\n    toolbarSubmenuElement.find(`[data-automation-id='subMenuContainer']`).simulate('keyDown', { key: 'ArrowRight' });\r\n    expect(onClose.calledOnce).to.be.true;\r\n    done();\r\n  });\r\n\r\n  it('should open the submenu when down arrow is pressed on display button', (done: MochaDone) => {\r\n    expect(toolbarSubmenuElement.find(`[data-automation-id='displayButton']`).length).to.be.eq(1);\r\n    toolbarSubmenuElement.find(`[data-automation-id='displayButton']`).simulate('keyDown', { key: 'ArrowDown' });\r\n    expect(onOpen.calledOnce).to.be.true;\r\n    done();\r\n  });\r\n});"],"sourceRoot":"/src"}