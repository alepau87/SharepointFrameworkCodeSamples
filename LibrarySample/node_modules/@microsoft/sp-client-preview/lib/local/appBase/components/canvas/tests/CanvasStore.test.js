"use strict";
/**
 * CanvasStore.ts tests
 */
var chai_1 = require('chai');
var sp_client_base_1 = require('@microsoft/sp-client-base');
var CanvasStore_1 = require('../canvas/CanvasStore');
var CanvasControlType_1 = require('../canvas/CanvasControlType');
describe('Canvas Store tests', function () {
    var rootScope = sp_client_base_1.ServiceScope.startNewRoot();
    rootScope.provide(sp_client_base_1.httpClientServiceKey, new sp_client_base_1.HttpClient(rootScope));
    rootScope.provide(sp_client_base_1.pageContextServiceKey, new sp_client_base_1.PageContext(rootScope));
    rootScope.finish();
    var canvasStore;
    var render;
    beforeEach(function () {
        render = sinon.spy();
        canvasStore =
            new CanvasStore_1.default(rootScope, render, sp_client_base_1.DisplayMode.Edit);
    });
    it('should change the display mode as expected', function (done) {
        canvasStore.setDisplayMode(sp_client_base_1.DisplayMode.Read);
        chai_1.assert.isTrue(render.called);
        chai_1.expect(canvasStore.canvasDisplayMode).to.equal(sp_client_base_1.DisplayMode.Read, 'Display mode is read');
        canvasStore.setDisplayMode(sp_client_base_1.DisplayMode.Edit);
        chai_1.assert.isTrue(render.called);
        chai_1.expect(canvasStore.canvasDisplayMode).to.equal(sp_client_base_1.DisplayMode.Edit, 'Display mode is edit');
        done();
    });
    it('should add the control as expected', function (done) {
        var controlProps = {
            controlType: CanvasControlType_1.default.RTE,
            displayMode: sp_client_base_1.DisplayMode.Edit,
            id: 'RTEControl'
        };
        canvasStore.addControl(CanvasControlType_1.default.RTE, controlProps, 0);
        chai_1.assert.isTrue(render.called);
        var controls = canvasStore.controls;
        chai_1.expect(controls[0].childControlProps.id).to.be.eq('RTEControl');
        controlProps = {
            controlType: CanvasControlType_1.default.WebPartZone,
            displayMode: sp_client_base_1.DisplayMode.Edit,
            id: 'WebPartZoneControl'
        };
        canvasStore.addControl(CanvasControlType_1.default.WebPartZone, controlProps, 1);
        chai_1.assert.isTrue(render.called);
        controls = canvasStore.controls;
        chai_1.expect(controls[1].childControlProps.id).to.be.eq('WebPartZoneControl');
        done();
    });
    it('should delete the control as expected', function (done) {
        var controlProps = {
            controlType: CanvasControlType_1.default.RTE,
            displayMode: sp_client_base_1.DisplayMode.Edit,
            id: 'RTEControl'
        };
        canvasStore.addControl(CanvasControlType_1.default.RTE, controlProps, 0);
        chai_1.assert.isTrue(render.called);
        chai_1.expect(canvasStore.controls.length).to.be.eq(1);
        canvasStore.deleteControl(0);
        chai_1.assert.isTrue(render.called);
        chai_1.expect(canvasStore.controls.length).to.be.eq(0);
        done();
    });
    it('should serialize the content as expected', function (done) {
        var serializedContent = canvasStore.serialize();
        chai_1.expect(serializedContent).to.be.not.null;
        var expectedContent = '<div></div>';
        chai_1.assert.strictEqual(serializedContent, expectedContent, 'Serialized the content as expected');
        done();
    });
    it('should deserialize the content as expected', function (done) {
        var serializedContent = canvasStore.serialize();
        chai_1.expect(canvasStore.deserialize(serializedContent)).to.be.not.null;
        done();
    });
    it('should serialize and deserialize the content in JSON as expected', function (done) {
        var serializedContentinJSON = canvasStore.serializeToJSON();
        chai_1.expect(serializedContentinJSON).to.be.not.null;
        chai_1.assert.strictEqual(serializedContentinJSON, '[]', 'Serialized the content in JSON as expected');
        chai_1.expect(canvasStore.deserializeFromJSON(serializedContentinJSON)).to.be.not.null;
        done();
    });
    it('should open the toolbox as expected', function (done) {
        canvasStore.openToolbox(0, 0);
        chai_1.assert.isTrue(render.called);
        var toolboxProps = canvasStore.toolboxProps;
        chai_1.expect(toolboxProps.isOpen).to.be.true;
        chai_1.expect(toolboxProps.rowIndex).to.be.eq(0);
        chai_1.expect(toolboxProps.verticalPosition).to.be.eq(0);
        done();
    });
    it('should close the toolbox as expected', function (done) {
        canvasStore.closeToolbox();
        chai_1.assert.isTrue(render.called);
        var toolboxProps = canvasStore.toolboxProps;
        chai_1.expect(toolboxProps.isOpen).to.be.false;
        done();
    });
});

//# sourceMappingURL=CanvasStore.test.js.map
