/**
 * @copyright Microsoft Corporation. All rights reserved.
 */
"use strict";
var QuillLoader_1 = require('./QuillLoader');
require('./QuillEditor.scss');
var CanvasStrings_resx_1 = require('../../sp-canvas/loc/CanvasStrings.resx');
/**
 * Implmentation of IRichTextEditor for Quill 1.0.0-beta.9
 */
var QuillEditor = (function () {
    /**
     * Use createNewEditor instead of constructor to ensure using the editor after it's loaded
     * Note: TypeScript doesn't allow private constructors
     */
    function QuillEditor(config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback) {
        this._config = config;
        this._editorElement = editorElement;
        this._handleSelectionChange = selectionChangeCallback;
        this._handleTextChange = textChangeCallback;
        this._handleSelectionChangeConvert = this._handleSelectionChangeConvert.bind(this);
        this._findWrappingElementByTagName = this._findWrappingElementByTagName.bind(this);
        this.focus = this.focus.bind(this);
        this.format = this.format.bind(this);
        this.getSelection = this.getSelection.bind(this);
        this._initialize(currentHTML);
    }
    /**
     * @return Promise of the instance that resolves once the editor is loaded on the element
     *
     * Static wrapper for constructing an instance
     */
    QuillEditor.createNewEditor = function (config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback) {
        return new Promise(function (resolve) {
            QuillEditor.moduleLoader.loadModule().then(function () {
                var editor = new QuillEditor(config, currentHTML, editorElement, selectionChangeCallback, textChangeCallback);
                resolve(editor);
            });
        });
    };
    QuillEditor.prototype.destroy = function () {
        if (this._quill) {
            var previousHTML = this.getHTML();
            this._quill = undefined;
            return previousHTML;
        }
        return undefined;
    };
    QuillEditor.prototype.focus = function () {
        // Use setActive() instead of focus() if available, because focus() scrolls to view in IE
        if (this._editorElement && this._editorElement.setActive) {
            this._quillEditorElement.setActive();
        }
        else {
            this._quill.focus();
        }
    };
    /**
     * @param start - Start position of selection
     * @param end - End position of selection
     * @param formats - Map of key:value pairs for formats to apply
     * @param applyAllFormatsToLine - Forces all formats to be applied to the whole line(s). If not provided,
     * formats are divided into two buckets (line vs non-line) based on their isLine field
     *
     * A unified method for applying Quill formats to any selection
     */
    QuillEditor.prototype.format = function (start, end, formats, applyAllFormatsToLine) {
        var lineFormats = applyAllFormatsToLine ? formats : {};
        var nonLineFormats = {};
        if (!applyAllFormatsToLine) {
            // Divide formats into two buckets: Line and Non-Line
            /* tslint:disable */
            var _loop_1 = function(formateditorKey) {
                /* tslint:enable */
                var format = this_1._config.supportedFormatsArray
                    .filter(function (format) { return format.editorKey === formateditorKey; })[0];
                if (format && format.isLine) {
                    lineFormats[format.editorKey] = formats[format.editorKey];
                }
                else {
                    nonLineFormats[format.editorKey] = formats[format.editorKey];
                }
            };
            var this_1 = this;
            for (var formateditorKey in formats) {
                _loop_1(formateditorKey);
            }
        }
        this._quill.formatLine(start, end - start, lineFormats);
        if (!applyAllFormatsToLine) {
            /* tslint:disable */
            if (nonLineFormats.hasOwnProperty('link') &&
                this.isFormatAppliedToRange(start, end, this._config.formats.get('link'))) {
                // There is already a link on the selection, remove or edit it
                if (start === end) {
                    var linkElement = this._findWrappingElementByTagName(start, 'A');
                    if (linkElement) {
                        if (nonLineFormats['link']) {
                            linkElement.setAttribute('href', nonLineFormats['link']);
                            linkElement.setAttribute('target', '_blank');
                        }
                        else {
                            var container = linkElement.parentElement;
                            if (container) {
                                var textNode = document.createTextNode(linkElement.textContent);
                                container.insertBefore(textNode, linkElement);
                                container.removeChild(linkElement);
                            }
                        }
                        nonLineFormats['link'] = undefined;
                    }
                }
                else if (nonLineFormats['link']) {
                    // Edit link on non-collapsed selection
                    var linkElement = void 0;
                    var linkAtEnd = this._findWrappingElementByTagName(end, 'A');
                    // If the selection size is larger than 1, make sure the whole selection is on the same link
                    if (end - start > 1) {
                        var linkAtStart = this._findWrappingElementByTagName(start + 1, 'A');
                        linkElement = linkAtStart && linkAtEnd && linkAtStart.isEqualNode(linkAtEnd) ? linkAtEnd : undefined;
                    }
                    else {
                        linkElement = linkAtEnd;
                    }
                    if (linkElement) {
                        linkElement.setAttribute('href', nonLineFormats['link']);
                        linkElement.setAttribute('target', '_blank');
                        nonLineFormats['link'] = undefined;
                    }
                }
            }
            /* tslint:enable */
            // Apply Non-Line formats
            if (start === end) {
                /* tslint:disable */
                for (var format in nonLineFormats) {
                    this._quill.format(format, nonLineFormats[format]);
                }
            }
            else {
                this._quill.formatText(start, end - start, nonLineFormats);
            }
        }
    };
    QuillEditor.prototype.getBounds = function (position) {
        return this._quill.getBounds(position);
    };
    QuillEditor.prototype.getFormatValue = function (start, end, format) {
        if (format.key === 'link') {
            var linkElement = void 0;
            var linkAtEnd = this._findWrappingElementByTagName(end, 'A');
            // If the selection size is larger than 1, make sure the whole selection is on the same link
            if (end - start > 1) {
                var linkAtStart = this._findWrappingElementByTagName(start + 1, 'A');
                linkElement = linkAtStart && linkAtEnd && linkAtStart.isEqualNode(linkAtEnd) ? linkAtEnd : undefined;
            }
            else {
                linkElement = linkAtEnd;
            }
            return linkElement ? linkAtEnd.getAttribute('href') : undefined;
        }
        else {
            var activeFormats = this._quill.getFormat(start, end);
            return activeFormats[format.editorKey];
        }
    };
    QuillEditor.prototype.getSelection = function () {
        var range = this._quill.getSelection();
        return range ? {
            start: range.index,
            end: range.index + range.length
        } : undefined;
    };
    QuillEditor.prototype.getText = function (range) {
        return range ?
            this._quill.getText(range.start, range.end - range.start) :
            this._quill.getText();
    };
    QuillEditor.prototype.getHTML = function () {
        return this._quillEditorElement ? this._quillEditorElement.innerHTML : '';
    };
    QuillEditor.prototype.getEditorType = function () {
        return 'Quill';
    };
    /**
     * @param format - Name of the format to apply from QUILL_FORMATS or SPRTE_FORMATS
     * @param start - Start value of range
     * @param end - End value of range
     *
     * @return A dictionary of string=>boolean indicating if the format is applied to the given range
     */
    QuillEditor.prototype.isFormatAppliedToRange = function (start, end, format) {
        var activeFormats = this._quill.getFormat(start, end - start);
        return format.editorValue !== undefined ?
            activeFormats[format.editorKey] === format.editorValue :
            activeFormats.hasOwnProperty(format.editorKey);
    };
    QuillEditor.prototype.setSelection = function (range) {
        this._quill.setSelection(range.start, range.end - range.start);
    };
    QuillEditor.prototype._findWrappingElementByTagName = function (position, tagName) {
        if (this._quillModule && tagName === 'A') {
            /* tslint:disable */
            var _linkFormat = this._quillModule.import('formats/link');
            var link = this._quill.scroll.descendants(_linkFormat, Math.max(0, position - 1))[0];
            /* tslint:enable */
            return link ? link.domNode : undefined;
        }
        return undefined;
    };
    QuillEditor.prototype._handleSelectionChangeConvert = function (range) {
        var newRange = range ? {
            start: range.index,
            end: range.index + range.length
        } : undefined;
        this._handleSelectionChange(newRange);
    };
    /**
     * Initialize Quill with whitelist of formats, prevent default css,
     * add custom formats, and registering event handlers.
     */
    QuillEditor.prototype._initialize = function (currentHTML) {
        var _this = this;
        QuillEditor.moduleLoader.loadModule().then(function (quillModule) {
            var quillFormatKeys = _this._config.supportedFormatsArray
                .filter(function (format) { return format.isEditorNative; })
                .map(function (format) { return format.editorKey; })
                .filter(function (formatKey, index, self) { return self.indexOf(formatKey) === index; }); // Distinct keys
            _this._quillModule = quillModule;
            var quill = new quillModule(_this._editorElement, {
                formats: quillFormatKeys,
                readOnly: false,
                styles: false,
                placeholder: CanvasStrings_resx_1.default.TextWebPartPlaceholder
            });
            // Convert div to p, .quote-true to blockquote, b to strong, em to i
            var container = document.createElement('DIV');
            container.innerHTML = currentHTML;
            var divs = container.querySelectorAll('div');
            for (var i = 0; i < divs.length; i++) {
                var div = divs[i];
                var newElement = div.classList.contains('quote-true') ?
                    document.createElement('BLOCKQUOTE') :
                    document.createElement('P');
                div.classList.remove('quote-true');
                for (var j = 0; j < div.classList.length; j++) {
                    newElement.classList.add(div.classList[j]);
                }
                if (div.hasAttribute('style')) {
                    newElement.setAttribute('style', div.getAttribute('style'));
                }
                newElement.innerHTML = div.innerHTML;
                div.parentElement.insertBefore(newElement, div);
                div.parentElement.removeChild(div);
            }
            /* tslint:disable */
            var newTags = { 'b': 'strong', 'i': 'em' };
            for (var tag in newTags) {
                var elements = container.querySelectorAll(tag);
                for (var i = 0; i < elements.length; i++) {
                    var element = elements[i];
                    var newElement = document.createElement(newTags[tag]);
                    newElement.innerHTML = element.innerHTML;
                    element.parentElement.insertBefore(newElement, element);
                    element.parentElement.removeChild(element);
                }
            }
            /* tslint:enable */
            currentHTML = container.innerHTML;
            _this._quillEditorElement = _this._editorElement.querySelector('.ql-editor');
            _this._quillEditorElement.innerHTML = currentHTML;
            quill.on('text-change', _this._handleTextChange);
            quill.on('selection-change', _this._handleSelectionChangeConvert);
            _this._quill = quill;
        });
    };
    QuillEditor.moduleLoader = new QuillLoader_1.default();
    return QuillEditor;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = QuillEditor;

//# sourceMappingURL=QuillEditor.js.map
