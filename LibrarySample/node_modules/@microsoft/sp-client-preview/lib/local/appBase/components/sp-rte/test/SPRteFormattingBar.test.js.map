{"version":3,"sources":["local/appBase/components/sp-rte/test/SPRteFormattingBar.test.tsx"],"names":[],"mappings":";AAAA;;GAEG;AACH,qBAA+B,MAAM,CAAC,CAAA;AACtC,uBAAoC,QAAQ,CAAC,CAAA;AAC7C,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,mCAGuC,qCAAqC,CAAC,CAAA;AAC7E,uCAAmC,2CAA2C,CAAC,CAAA;AAC/E,8BAAoD,mCAAmC,CAAC,CAAA;AACxF,uCAA0B,wBAAwB,CAAC,CAAA;AAEnD,QAAQ,CAAC,qBAAqB,EAAE;IAC9B,IAAI,oBAAsF,CAAC;IAC3F,IAAI,SAAmC,CAAC;IACxC,IAAI,SAAyB,CAAC;IAC9B,IAAM,qBAAqB,GACvB,EAAE,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC;IAC7D,IAAI,gBAAuC,CAAC;IAC5C,IAAM,WAAW,GAA8C,EAAE,CAAC;IAElE,UAAU,CAAC;QACT,SAAS,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;QACxB,gBAAgB,GAAG,gCAAsB,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAC/D,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,uBAAa,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1E,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,uBAAa,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1E,SAAS,GAAG;YACV,OAAO,EAAE,WAAW;YACpB,QAAQ,EAAE,qBAAqB;YAC/B,SAAS,EAAE,SAAS;SACrB,CAAC;QAEF,oBAAoB,GAAG,cAAK,CACzB,KAAK,CAAC,aAAa,CAAC,4BAAkB,EAAE,SAAS,CAAC,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC;QACR,oBAAoB,CAAC,OAAO,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,UAAC,IAAe;QAC3D,IAAM,GAAG,GAAmB,KAAK,CAAC,GAAG,CAAC,4BAAkB,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;QACzF,oBAAoB,GAAG,cAAK,CACzB,KAAK,CAAC,aAAa,CAAC,4BAAkB,EAAE,SAAS,CAAC,CAAC,CAAC;QACvD,aAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACvB,IAAI,EAAE,CAAC;IACT,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,UAAC,IAAe;QACjE,aAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,uBAAa,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACpE,IAAI,EAAE,CAAC;IACT,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,UAAC,IAAe;QAC7D,aAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,kCAAS,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAChE,IAAI,EAAE,CAAC;IACT,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,UAAC,IAAe;QAC1D,aAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACvF,IAAI,EAAE,CAAC;IACT,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,UAAC,IAAe;QACvE,aAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC,IAAI,EAAE,CAAC;YACxE,EAAE,CAAC,OAAO,CAAC,sCAAsC,CAAC,CAAC;QACrD,IAAI,EAAE,CAAC;IACT,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"local/appBase/components/sp-rte/test/SPRteFormattingBar.test.js","sourcesContent":["/**\r\n * SPERteFormattingBar.ts tests\r\n */\r\nimport { expect, assert } from 'chai';\r\nimport { mount, ReactWrapper } from 'enzyme';\r\nimport * as React from 'react';\r\nimport SPRteFormattingBar,\r\n{ ISPRteFormattingBarProps,\r\n  ISPRteFormattingBarState,\r\n  ISPRteFormattingBarPosition }   from '../formattingbar/SpRteFormattingBar';\r\nimport MockToolbarButtonProps from '../../canvas/mocks/MockToolbarButtonProps';\r\nimport ToolbarButton, { IToolbarButtonProps }  from '../../canvas/canvas/ToolbarButton';\r\nimport { FocusZone } from 'office-ui-fabric-react';\r\n\r\ndescribe('FormattingBar tests', () => {\r\n  let formattingBarElement: ReactWrapper<ISPRteFormattingBarProps, ISPRteFormattingBarState>;\r\n  let mockProps: ISPRteFormattingBarProps;\r\n  let onKeyDown: Sinon.SinonSpy;\r\n  const formattingBarPosition: ISPRteFormattingBarPosition\r\n    = { left: 0, top: 0, right: undefined, position: 'fixed' };\r\n  let mockButtonsProps: IToolbarButtonProps[];\r\n  const mockButtons: React.ReactElement<IToolbarButtonProps>[] = [];\r\n\r\n  beforeEach(() => {\r\n    onKeyDown = sinon.spy();\r\n    mockButtonsProps = MockToolbarButtonProps.getToolbarButtons(2);\r\n    mockButtons.push(React.createElement(ToolbarButton, mockButtonsProps[0]));\r\n    mockButtons.push(React.createElement(ToolbarButton, mockButtonsProps[1]));\r\n    mockProps = {\r\n      buttons: mockButtons,\r\n      position: formattingBarPosition,\r\n      onKeyDown: onKeyDown\r\n    };\r\n\r\n    formattingBarElement = mount<ISPRteFormattingBarProps, ISPRteFormattingBarState>\r\n      (React.createElement(SPRteFormattingBar, mockProps));\r\n  });\r\n\r\n  afterEach(() => {\r\n    formattingBarElement.unmount();\r\n  });\r\n\r\n  it('calls componentDidMount after mounting', (done: MochaDone) => {\r\n    const spy: Sinon.SinonSpy = sinon.spy(SPRteFormattingBar.prototype, 'componentDidMount');\r\n    formattingBarElement = mount<ISPRteFormattingBarProps, ISPRteFormattingBarState>\r\n      (React.createElement(SPRteFormattingBar, mockProps));\r\n    assert(spy.calledOnce);\r\n    done();\r\n  });\r\n\r\n  it('should render the toolbarButtons as expected', (done: MochaDone) => {\r\n    expect(formattingBarElement.find(ToolbarButton).length).to.be.eq(2);\r\n    done();\r\n  });\r\n\r\n  it('should render the focus zone as expected', (done: MochaDone) => {\r\n    expect(formattingBarElement.find(FocusZone).length).to.be.eq(1);\r\n    done();\r\n  });\r\n\r\n  it('should render the toolbar as expected', (done: MochaDone) => {\r\n    expect(formattingBarElement.find(`[data-automation-id='toolbar']`).length).to.be.eq(1);\r\n    done();\r\n  });\r\n\r\n  it('should set the formatting bar position as expected', (done: MochaDone) => {\r\n    expect(formattingBarElement.find(`[data-automation-id='toolbar']`).html()).\r\n      to.contain('style=\"left:0;top:0;position:fixed;\"');\r\n    done();\r\n  });\r\n});"],"sourceRoot":"/src"}