/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 */
'use strict';
var odsp_utilities_bundle_1 = require('@ms/odsp-utilities-bundle');
var ReactDOM = require('react-dom');
var React = require('react');
var sp_client_base_1 = require('@microsoft/sp-client-base');
var PlaceholderSpinner_1 = require('../placeHolder/PlaceholderSpinner');
var Strings_resx_1 = require('./loc/Strings.resx');
var cswp_base_module_scss_1 = require('./styles/cswp-base.module.scss');
/**
 * This class provides the default implementation for displaying loading indicator and error messages
 * for webparts. The webpart host can decide to provide custom implemenation of how webparts display
 * loading indicators and error messages.
 */
var ClientSideWebPartStatusRenderer = (function () {
    function ClientSideWebPartStatusRenderer() {
        this._errorId = 'cswp-error';
    }
    /**
     * Display a loading spinner.
     * @param domElement - the webpart container div.
     * @param loadingMessage - the message to be displayed when the loading spinner id displayed.
     */
    ClientSideWebPartStatusRenderer.prototype.displayLoadingIndicator = function (domElement, loadingMessage) {
        sp_client_base_1.Validate.isNotNullOrUndefined(domElement, 'domElement');
        var el = React.createElement(PlaceholderSpinner_1.default, { label: odsp_utilities_bundle_1.StringHelper.format(Strings_resx_1.default.LoadingStatus, loadingMessage) });
        ReactDOM.render(el, domElement);
    };
    /**
     * Clear the loading indicator.
     * @param domElement - the webpart container div.
     */
    ClientSideWebPartStatusRenderer.prototype.clearLoadingIndicator = function (domElement) {
        sp_client_base_1.Validate.isNotNullOrUndefined(domElement, 'domElement');
        ReactDOM.unmountComponentAtNode(domElement);
    };
    /**
     * Render the provided error message in the webpart container div.
     * @param domElement - the webpart container div.
     * @param error - the error message.
     */
    ClientSideWebPartStatusRenderer.prototype.renderError = function (domElement, error) {
        sp_client_base_1.Validate.isNotNullOrUndefined(domElement, 'domElement');
        sp_client_base_1.Validate.isNotNullOrUndefined(error, 'error');
        var divErr = domElement.querySelector("div[data-sp-id='" + this._errorId + "']");
        if (divErr) {
            divErr.style.display = 'block';
        }
        else {
            if (!this._errorHtml) {
                this._errorHtml =
                    ("<div class='" + cswp_base_module_scss_1.default.errorBox + "' role='alert' aria-live='assertive'>") +
                        ("<span class='" + cswp_base_module_scss_1.default.errorBoxText + "'></span>") +
                        "</div>";
            }
            divErr = document.createElement('div');
            divErr.setAttribute('data-sp-id', this._errorId);
            divErr.innerHTML = this._errorHtml;
            domElement.appendChild(divErr);
        }
        var text = divErr.getElementsByTagName('span')[0];
        text.textContent = (DEBUG && error.stack)
            ? error.stack
            : error.message || error;
    };
    /**
     * Clear the webpart error message.
     * @param domElement - the webpart container div.
     */
    ClientSideWebPartStatusRenderer.prototype.clearError = function (domElement) {
        sp_client_base_1.Validate.isNotNullOrUndefined(domElement, 'domElement');
        var divErr = domElement.querySelector("div[data-sp-id='" + this._errorId + "']");
        if (divErr) {
            divErr.style.display = 'none';
        }
    };
    return ClientSideWebPartStatusRenderer;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ClientSideWebPartStatusRenderer;

//# sourceMappingURL=ClientSideWebPartStatusRenderer.js.map
