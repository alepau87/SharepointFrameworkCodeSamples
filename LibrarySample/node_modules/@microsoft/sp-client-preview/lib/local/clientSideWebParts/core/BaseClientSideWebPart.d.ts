import { DisplayMode } from '@microsoft/sp-client-base';
import { IClientSideWebPartManifestInstance } from '@microsoft/sp-module-interfaces';
import { IPropertyPaneSettings } from '../propertyPane/propertyPane/IPropertyPane';
import IWebPartContext from './IWebPartContext';
import IWebPartEvent from './IWebPartEvent';
import { default as IWebPartData, IHtmlProperties } from './IWebPartData';
/**
 * This abstract class implements the the base functionality for a client side web part. Every client side web part
 * needs to inherit from this class. Along with the base functionality, this class provides some APIs that can be
 * used by the web part. These APIs fall in two catagories.
 *
 * The first category of APIs provide data and functionality. Example, the web part context (i.e. this.context). This
 * API should be used to access contextual data relevant to this web part instance.
 *
 * The second category of APIs provide a base implementation for the web part lifecycle and can be overridden for an
 * updated implementation. The render() API is the only API that is mandatory to be implemented/overridden by a web
 * part. All other life cycle APIs have a base implementation and can be overridden based on the needs of the web part.
 * Please refer to the documentation of the individual APIs to make the right decision.
 */
export default class BaseClientSideWebPart<TProperties> {
    private _displayMode;
    private _context;
    private _properties;
    private _logEntry;
    private _initialized;
    private _renderedOnce;
    private _renderedFromDefaultProperties;
    private _propertiesBackup;
    private _previousState;
    private _logSource;
    private _title;
    private _description;
    private _propertyPaneRenderedByWebPart;
    private _webPartCalledConfigureStart;
    /**
     * This property is a pointer to the web part context.
     * @see IWebPartContex for more details.
     *
     * @readonly
     */
    /**
     * Error on attempt to set readonly properties. The following properties will go away when TypeScript supports
     * readonly.
     * @internal
     */
    protected context: IWebPartContext;
    /**
     * This property is a pointer to the root DOM element of the web part. This is a DIV element and contains the whole
     * DOM subtree of the web part.
     *
     * @readonly
     */
    /**
     * @internal
     */
    protected domElement: HTMLElement;
    /**
     * This property is the current display mode of the web part.
     *
     * @readonly
     */
    /**
     * @internal
     */
    protected displayMode: DisplayMode;
    /**
     * This property is the pointer to the custom property bag of the web part.
     *
     * @readonly
     */
    /**
     * @internal
     */
    protected properties: TProperties;
    /**
     * This property indicates whether the web part has been rendered once or not. After the first time rendering,
     * the value of this property is always true. Till a full re-render of the web part happens.
     *
     * @readonly
     */
    /**
     * @internal
     */
    protected renderedOnce: boolean;
    /**
     * This property indicates whether the web part was rendered from the default properties, as opposed to using
     * serialized state from the last time that the web part was saved.
     *
     * @readonly
     */
    /**
     * @internal
     */
    protected renderedFromDefaultProperties: boolean;
    /**
     * This property indicates whether a web part can open a popup on initial render. In some environments the host
     * re-renders the web parts frequently, and therefor, opening popups during render will cause popups to open
     * repeatedly and hence poor user experience. As an example, the classic SharePoint pages perform postbacks
     * and hence page re-render on all button clicks. If a web part needs to open a popup on render, it should use
     * this API before opening the popup. If this API returns false, the web part should not open popup on initial
     * render. Some web parts that open popups during render are the document embed web part
     * that pops up the file picker on initial render, embedded video web part that pops up the PropertyPane on initial
     * render.
     *
     * @readonly
     */
    protected canOpenPopupOnRender: boolean;
    /**
     * This property is the pointer to the web part configuration settings. If the web part wants to use the PropertyPane
     * for configuration, this API needs to be overridden and the web part needs to return the set of properties it wants
     * to display in the PropertyPane.
     *
     * @see IPropertyPane and other PropertyPane integration wiki documentation for more details.
     *
     * @readonly
     */
    protected propertyPaneSettings: IPropertyPaneSettings;
    /**
     * This property is used to change the web part's PropertyPane interaction from Reactive to NonReactive. The default
     * behaviour is Reactive. Where,
     * Reactive implies that changes made in the PropertyPane are transmitted to the web part instantly and the user can
     * see instant updates. This helps the page creator get instant feedback and decide if they should keep the new
     * configuration changes or not.
     * NonReactive implies that the configuraiton changes are transmitted to the web part only after 'Apply' PropertyPane
     * button is clicked.
     *
     * @readonly
     */
    protected disableReactivePropertyChanges: boolean;
    /**
     * This property points to the preview image for the web part. The base implementation returns undefined. Web parts
     * that want to provide a valid preview image url need to override this API. The preview image url can be used to
     * create a preview of the web part or of the page on which the web part is present.
     *
     * @readonly
     */
    /**
     * @internal
     */
    protected previewImageUrl: string;
    /**
     * This property points to the accessible title of web part made available to screen readers. The base implementation
     * returns that default title in the manifest. Web parts that want to provide more descriptive title containing
     * contextual information need to override this API.
     *
     * @readonly
     */
    /**
     * @internal
     */
    protected accessibleTitle: string;
    /**
     * Title of the WebPart
     *
     * @readonly
     */
    /**
     * @internal
     */
    protected title: string;
    /**
     * Description of the WebPart
     *
     * @readonly
     */
    /**
     * @internal
     */
    protected description: string;
    /**
     * Indicates whether the PropertyPane was rendered by the web part or not.
     * PropertyPane can be rendered in two ways:
     *  - Host calling the 'configureStart' api (in this case the propertyPaneRenderedByWebPart returns false.) or
     *  - Web part calling the 'configureStart' api (in this case the propertyPaneRenderedByWebPart returns true.).
     */
    /**
     * @internal
     */
    protected propertyPaneRenderedByWebPart: boolean;
    /**
     * @internal
     */
    protected manifest: IClientSideWebPartManifestInstance<TProperties>;
    /**
     * @internal
     */
    protected instanceId: string;
    /**
     * Constructor for the BaseClientSideWebPart class.
     * If a sub class overrides the constructor, it needs to call super(context) as the first line of its constructor.
     *
     * @param context - web part context.
     *
     * e.g.
     *   constructor(conext: IWebPartContext) {
     *     super(context);
     *     .
     *     . class specific constructor code ..
     *   }
     */
    constructor(ctx: IWebPartContext);
    /**
     * This API is called once during the lifetime of the web part during the intial render and just before the onInit
     * API call. The purpose of this API is to help a web part developer deserialize the web part data and manage the
     * versioning of their data as the web part code evolves. The web part data may have been persisted with an older
     * or newer version of the web part code. This API gives the web part developer an opportunity to re-structure their
     * data to the appropriate data schema. The persisted data contains the version number information. That information
     * can be used to make decisions on how to re-structure the data.
     *
     * @param data - web part persisted data.
     * @returns - web part property bag.
     *
     */
    protected deserialize(data: IWebPartData): TProperties;
    /**
     * This API should be overridden to perform long running operations e.g. data fetching from a remote service before
     * the initial rendering of the web part. The loading indicator is displayed during the lifetime of this method.
     * This API is called only once during the lifecycle of a web part.
     */
    protected onInit<T>(): Promise<T>;
    /**
     * This API is called to render the web part. There is no base implementation of this API and the web part is
     * required to override this API.
     */
    render(): void;
    /**
     * This API is called when the display mode of a web part is changed. The default implementation of this API calls
     * the web part render method to re-render the web part with the new display mode. If a web part developer does not
     * want a full re-render to happen on display mode change, they can override this API and perform specific updates
     * to the web part DOM to switch its display mode.
     *
     * @param oldDisplayMode - The old display mode.
     *
     */
    protected onDisplayModeChanged(oldDisplayMode: DisplayMode): void;
    /**
     * This API is called before a web part is serialized. The default implementation is a no-op. A web part developer
     * is expected to override this API when the web part's state is not fully reflected in the property bag i.e.
     * this.properties. In the overridden method, the web part developer is expected to update the state of the web
     * part property bag. This way the web part serialization process will use the upto date state of the web part.
     *
     * @returns - reference to searchable properties and properties that need link fixup. Please read
     * the documentation of IHtmlProperties interface for more details.
     */
    protected onBeforeSerialize(): IHtmlProperties;
    /**
     * This API is used to receive custom event notifications from the host page or another web part. ReservedEventNames
     * defines some reserved events. Each web part may process web part specific events.
     *
     * @param eventName - Event name, such as "configure:start".
     * @param eventObject - object containing event source, destination and property information.
     *
     * @internal
     */
    protected onEvent<T>(eventName: string, eventObject: IWebPartEvent<T>): void;
    /**
     * This API is called at the end of the web part lifecycle. It should be overridden to dispose any
     * resources that the web part is holding onto.
     */
    protected dispose(): void;
    /**
     * This API should be used to invoke the PropertyPane to help configure the web part.
     *
     * @param boolean - If specified and true - refresh a PropertyPane that's already been open, but not open
     * if it is not already open.
     */
    protected configureStart(refreshOnly?: boolean): void;
    /**
     * This API is invoked on property changes in the PropertyPane when the PropertyPane is being used in Reactive mode.
     * The base implementation of this API updates the web part property bag and re-render the web part. This API also
     * invokes the web part host's setDirty API.
     *
     * @param propertyPath - JSON path of the property in the property bag.
     * @param newValue - New value of the property.
     */
    protected onPropertyChange(propertyPath: string, newValue: any): void;
    /**
     * This API is invoked when the configuration starts on the PropertyPane. It's invoked in the following cases:
     *  - When the PropertyPane is opened.
     *  - When the user switches web parts then the new web part gets this event.
     *
     * @beta
     */
    protected onPropertyPaneConfigurationStart(): void;
    /**
     * This API is invoked when the configuration is completed on the PropertyPane. It's invoked in the following cases:
     *  - When the CONFIGURATION_COMPLETE_TIMEOUT((currently the value is 5 secs) elapses after the last change.
     *  - When user clicks 'x'(close) button before the CONFIGURATION_COMPLETE_TIMEOUT elapses.
     *  - When user clciks 'Apply' button before the CONFIGURATION_COMPLETE_TIMEOUT elapses.
     *  - When the user switches web parts then the current web part gets this event.
     *
     * @beta
     */
    protected onPropertyPaneConfigurationComplete(): void;
    /**
     * This API is invoked after the changes made on the PropertyPane are applied when the PropertyPane is used in
     * Non-Reactive mode. This API is not invoked when the PropertyPane is used in Reactive mode.
     *
     * @beta
     */
    protected onAfterPropertyPaneChangesApplied(): void;
    /**
     * This API is invoked when the PropertyPane is rendered.
     *
     * From framework standpoint, we do not want to allow this event handler to be passed in, and trigger it.
     * This api should be deprecated and then removed as part of refactoring.
     */
    protected onPropertyPaneRendered(): void;
    /**
     * This API should be used to render an error message in the web part display area. Also logs the error message
     * using the trace logger.
     *
     * @param error - An error object containing the error message to render.
     */
    protected renderError(error: Error): void;
    /**
     * This API should be used to clear the error message from the web part display area.
     */
    protected clearError(): void;
    /**
     * Internal base implemenation of the web part data deserialization.
     *
     * @param data - web part data
     */
    private _internalDeserialize(data);
    /**
     * Internal API for the first time render of the web part. The purpose of this API is to enforce intialization steps
     * before the actual render is called. This API is called only once during the web part loading lifecycle.
     *
     * @return {Promise<void>} The promise indicates the render loop is finished (success or fail).
     */
    private _internalFirstTimeRender(mode?, qosMonitor?, data?);
    /**
     * Internal API to switch the web part's display mode. This API updates the display mode and then re-renders the web
     * part in the new mode.
     */
    private _internalSetDisplayMode(newDisplayMode);
    /**
     * Internal API to get property pane settings.
     *
     * @return Property pane data
     */
    private _internalGetPropertyPaneSettings();
    /**
     * Internal API which is invoked when a property changes on the property pane.
     * This API is invoked only for the reactive property pane.
     *
     * @param propertyPath - JSON path of the property in the property bag.
     * @param newValue - New value of the property.
     */
    private _internalOnPropertyChange(propertyPath, newValue);
    /**
     * Internal API which is invoked when one of the predefined configuraiton events
     * (defined in WebPartConfigurationEvent enum.) is triggered.
     *
     * @see WebPartConfigurationEvent for more details on the event definitions.
     */
    private _internalOnConfigurationEvent(configurationEvent);
    /**
     * Internal API to set the dirty bit on the web part host if the web part properties have changed.
     */
    private _internalSetDirtyBit();
    /**
     * Internal API to serialize the web part properties.
     */
    private _internalSerialize();
    /**
     * Internal API to dispose resources that the web part might be holding on to.
     */
    private _internalDispose();
    /**
     * Update the web part property if it is in the property bag.
     *
     * @param propertyPath - property path as expected by lodash update (https://lodash.com/docs#update).
     *   (e.g. 'o.a.b', 'o[0].a.b[1].c'). These paths are similar to those in the JSONPath spec described by
     *   Stefan Goessner at (http://goessner.net/articles/JsonPath/). Currently we plan to use lodash.get, has
     *   and update APIs which support paths. Some day we may migrate to using actual JSONPath.js. But that
     *   should not be an issue because the path formatting conventions are same in lodash and JSONPath.
     */
    private _updateProperty(propertyPath, newValue);
    private _processInputParams(context);
    /**
     * Merge the provided properties with manifest properties and return the merged property bag.
     */
    private _getMergedProperties(p?);
    /**
     * A generic NOP async handler.
     */
    private _genericAsyncHandler<T>();
    /**
     * Generate an HTML string for searchable, link and imageLink properties from the web part data.
     * The serialized page data needs to be stored in a way (pseudo HTML) that the server can index searchable
     * properties and fix links when links change. The SharePoint server is a semantic HTML parser and processes
     * HTML and not JSON blobs.
     *
     * This function returns multiple HTML tags, one for each searchable and link property. The format of the
     * tags are as follows:
     *
     * Searchable properties: "<div data-sp-prop-name='prop1'>value1</div>"
     * Link properties: "<link data-sp-prop-name='prop2' href='http://www.contoso.com/page1.aspx'>"
     * Image properties: "<img data-sp-prop-name='prop2' href='http://www.contoso.com/image.png'>"
     *
     * @param htmlProps - reference to html properties key/value dictionaries.
     * @return - pseudo HTML string equivalent of the HTML properties.
     */
    private _getHtmlProps(htmlProps);
    private _getHtmlPropsString(htmlProps);
    /**
     * Generate the HTML string from the property names provided in the manifest.
     */
    private _getHtmlPropsStringFromManifest();
    /**
     * Get the HTML props string.
     */
    private _getHtmlPropString(propName, propType, propValue);
    /**
     * Throw an error indicating that this property is readonly and cannot be set.
     */
    private _throwReadOnlyError();
    /**
     * Wraps render to ensure any type of rendering has access to the latest context
     * to provide the most accurate accessible info to screen readers.
     */
    private _renderWithAccessibileTitle();
    /**
     * Gets default accessible title in the format "{Web part name} web part", such as "Image web part".
     * Note: pulled into own method because TypeScript doesn't allow derived classes to call super protected properties.
     */
    private _getDefaultAccessibleTitle();
}
