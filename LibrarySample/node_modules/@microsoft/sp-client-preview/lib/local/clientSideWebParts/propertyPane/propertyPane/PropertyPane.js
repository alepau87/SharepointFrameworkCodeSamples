/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file Root component of the inbuilt webpart property configuration user experience.
 *
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var ReactDOM = require('react-dom');
var sp_client_base_1 = require('@microsoft/sp-client-base');
var PropertyPaneDefinitions_1 = require('./PropertyPaneDefinitions');
var PropertyPanePage_1 = require('../propertyPanePage/PropertyPanePage');
var PropertyPaneTitleBar_1 = require('../propertyPaneTitleBar/PropertyPaneTitleBar');
var PropertyPaneFooter_1 = require('../propertyPaneFooter/PropertyPaneFooter');
var Strings_resx_1 = require('../loc/Strings.resx');
var PropertyPane_module_scss_1 = require('./PropertyPane.module.scss');
var PropertyPanePage_module_scss_1 = require('../propertyPanePage/PropertyPanePage.module.scss');
// VSO: Bug 227235 Remove this dependency on Canvas11y
var office_ui_fabric_react_1 = require('office-ui-fabric-react');
var CanvasA11y_1 = require('../../../appBase/components/sp-canvas/a11y/CanvasA11y');
/**
 * Page direction.
 */
(function (PageDirection) {
    PageDirection[PageDirection["back"] = -1] = "back";
    PageDirection[PageDirection["next"] = 1] = "next";
})(exports.PageDirection || (exports.PageDirection = {}));
var PageDirection = exports.PageDirection;
/**
 * A constant value to delay the clearing of save confirmation message.
 */
var CLEAR_DELAY = 100;
/**
 * A constant value to set when there is no web part to configure.
 */
var NO_WEBPART_ID = 'No_Web_Part_ID';
/**
 * Propertypane component.
 */
var PropertyPane = (function (_super) {
    __extends(PropertyPane, _super);
    /**
     * Constructor to instantiate the propertypane component.
     */
    function PropertyPane(props) {
        _super.call(this, props);
        this.state = {
            isSaveButtonEnabled: false,
            saveConfirmationMessage: '',
            currentPage: 1
        };
        this._currentlyConfiguredWebPartId = props.data.webPartId;
        // method bindings.
        this._onChange = this._onChange.bind(this);
        this._onPropertyPaneKeyDown = this._onPropertyPaneKeyDown.bind(this);
        this._flipPage = this._flipPage.bind(this);
        this._handleSaveClick = this._handleSaveClick.bind(this);
        this._handleCloseClick = this._handleCloseClick.bind(this);
        this._propertyPaneShouldLooseFocus = this._propertyPaneShouldLooseFocus.bind(this);
        this._setContainerDiv = this._setContainerDiv.bind(this);
        this._invalidEntries = {};
    }
    /**
     * React component lifecycle event.
     * @param props - new props for the component.
     */
    PropertyPane.prototype.componentWillReceiveProps = function (props) {
        if (this._currentlyConfiguredWebPartId !== props.data.webPartId || props.data.shouldResetState) {
            var webPartId = props.data.webPartId ? props.data.webPartId : NO_WEBPART_ID;
            this._resetState(webPartId);
        }
        else {
            this.setState({
                saveConfirmationMessage: ''
            });
        }
    };
    PropertyPane.prototype.componentDidMount = function () {
        // @todo: for some god forsaken reason the z-index in the class does not apply. Hence this hack
        // Some react thing that I don't have time to dig into right now. Perhaps later.
        var domNode = ReactDOM.findDOMNode(this);
        domNode.style.zIndex = '999';
        if (this.props.data.onRendered) {
            this.props.data.onRendered();
        }
        // This is the hack to workaround a react bug that doesn't set the focus in componentDidMount properly
        // VSO:Bug 215692 Remove the hack and implement focus methods in fabric react
        this._setTimeOutForFocus();
    };
    PropertyPane.prototype.componentDidUpdate = function (props) {
        if (this._isPropertyPaneReplaced) {
            this._updateTabIndexes(0, true);
            this._setTimeOutForFocus();
            this._isPropertyPaneReplaced = false;
        }
        /**
         * From framework standpoint, we do not want to allow this event handler to be passed in, and trigger it.
         *
         * This api should be deprecated and then removed as part of refactoring.
         */
        if (this.props.data.onRendered) {
            this.props.data.onRendered();
        }
    };
    /**
     * React component lifecycle method.
     * Added this method to avoid, unnecessary renders.
     */
    PropertyPane.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        return !sp_client_base_1.Compare.shallowCompare(this.props, nextProps) || !sp_client_base_1.Compare.shallowCompare(this.state, nextState);
    };
    PropertyPane.prototype.render = function () {
        var _this = this;
        this._properties = this.props.data.properties;
        var classForPropertyPanePageContentBottom = this._getClassForPropertyPanePageContentBottom();
        return (React.createElement(office_ui_fabric_react_1.Fabric, null, React.createElement("div", {role: 'alert', "aria-live": 'polite', className: PropertyPane_module_scss_1.default.propertyPaneScreenReaderOnly}, React.createElement("span", null, this.state.saveConfirmationMessage)), React.createElement(office_ui_fabric_react_1.FocusTrapZone, {isClickableOutsideFocusTrap: 'true', firstFocusableSelector: this._cssClassForActionableElement, forceFocusInsideTrap: false}, React.createElement("div", {className: office_ui_fabric_react_1.css('ms-font-m', PropertyPane_module_scss_1.default.propertyPane), role: 'dialog', "aria-labelledby": 'propertyPaneTitleId', "aria-describedby": this._descriptionId, ref: function (c) { return _this._propertyPane = c; }, onKeyDown: this._onPropertyPaneKeyDown, key: this.props.data.webPartId}, React.createElement(PropertyPaneTitleBar_1.default, {title: this.props.data.title, onClose: this._handleCloseClick}), React.createElement("div", {className: office_ui_fabric_react_1.css(classForPropertyPanePageContentBottom, PropertyPanePage_module_scss_1.default.propertyPanePageContent)}, this._shouldRenderEmptyPage ? this._renderNoConfigurationState() : this._renderPage()), React.createElement(PropertyPaneFooter_1.default, {isReactive: this.props.data.isReactive, isSaveButtonEnabled: this.state.isSaveButtonEnabled, numberOfPages: (this.props.data.settings &&
            this.props.data.settings.pages &&
            this.props.data.settings.pages.length) ? this.props.data.settings.pages.length : undefined, currentPage: this.state.currentPage, onSaveClick: this._handleSaveClick, onFlipPage: this._flipPage})))));
    };
    /**
     * Renders the description for no configuration scenario.
     */
    PropertyPane.prototype._renderNoConfigurationState = function () {
        return (React.createElement("div", {role: 'alert', "aria-live": 'polite', className: PropertyPane_module_scss_1.default.propertyPaneDescription}, Strings_resx_1.default.PropertyPaneEmptyStateDescription));
    };
    /**
     * Renders page on the property pane.
     */
    PropertyPane.prototype._renderPage = function () {
        var _this = this;
        var pages = this.props.data.settings.pages;
        var page = pages[this.state.currentPage - 1];
        if (page.header && page.header.description) {
            this._descriptionId = 'propertyPaneDescriptionId';
        }
        return (React.createElement(PropertyPanePage_1.default, {pageDescription: page.header ? page.header.description : undefined, displayGroupsAsAccordion: page.displayGroupsAsAccordion, onChange: this._onChange.bind(this), propertyGroups: page.groups, properties: this._properties, setEntryState: function (targetProperty, isValidEntry) {
            _this._setEntryState(targetProperty, isValidEntry);
        }, setContainerDiv: this._setContainerDiv}));
    };
    PropertyPane.prototype._setContainerDiv = function (containerDiv) {
        this._propertyPaneContent = containerDiv;
    };
    Object.defineProperty(PropertyPane.prototype, "_shouldRenderEmptyPage", {
        /**
         * Returns if the empty page should be rendered in property pane.
         */
        get: function () {
            return (!this.props.data.settings ||
                !this.props.data.settings.pages ||
                this.props.data.settings.pages.length === 0 ||
                !this.props.data.settings.pages[this.state.currentPage - 1].groups ||
                this.props.data.settings.pages[this.state.currentPage - 1].groups.length === 0);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Flips the page based on the direction.
     * @param direction - direction of the page flip. Positive value is forward direction, negative is backwards.
     */
    PropertyPane.prototype._flipPage = function (direction) {
        var page = this.state.currentPage + direction;
        this.setState({
            currentPage: page
        });
        // trigger rendering the page
        this.props.data.render();
        this._setTimeOutForFocus();
    };
    PropertyPane.prototype._setEntryState = function (targetProperty, isValidEntry) {
        // maintain the list of invalid entries
        if (isValidEntry) {
            if (this._invalidEntries.hasOwnProperty(targetProperty)) {
                delete this._invalidEntries[targetProperty];
            }
        }
        else {
            this._invalidEntries[targetProperty] = true;
        }
    };
    PropertyPane.prototype._enableSaveButton = function (enabled) {
        this.setState({
            isSaveButtonEnabled: enabled
        });
    };
    PropertyPane.prototype._onChange = function (targetProperty, value) {
        this._properties[targetProperty] = value;
        // enable the save button in Reactive mode if there are no invalid entries
        if (!this.props.data.isReactive) {
            this._enableSaveButton(Object.keys(this._invalidEntries).length === 0);
        }
        if (!this._invalidEntries.hasOwnProperty(targetProperty)) {
            this._raiseEvent(targetProperty, value);
        }
    };
    PropertyPane.prototype._handleSaveClick = function () {
        var _this = this;
        this.setState({
            saveConfirmationMessage: Strings_resx_1.default.SaveConfirmation
        });
        this._enableSaveButton(false);
        setTimeout(function () {
            _this.setState({
                saveConfirmationMessage: ''
            });
        }, CLEAR_DELAY);
        this.props.data.onConfigurationEvent(PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneApplyClicked);
    };
    PropertyPane.prototype._handleCloseClick = function () {
        this._resetState(NO_WEBPART_ID);
        this._updateTabIndexes(-1, false);
        this.props.data.onConfigurationEvent(PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneClosed);
    };
    /* tslint:disable-next-line:no-any */
    PropertyPane.prototype._raiseEvent = function (targetProperty, value) {
        this.props.data.onPropertyChange(targetProperty, value);
    };
    PropertyPane.prototype._onPropertyPaneKeyDown = function (ev) {
        if (CanvasA11y_1.isKey(office_ui_fabric_react_1.KeyCodes.escape, ev)) {
            ev.preventDefault();
            this._handleCloseClick();
        }
        else if (CanvasA11y_1.isKey(CanvasA11y_1.KeyCodes.P, ev, true)) {
            ev.preventDefault();
            this._propertyPaneShouldLooseFocus();
        }
    };
    /**
     * Handles the case when the user presses 'Alt + P'(it's the key combination to toggle the PropertyPane focus)
     * while the Propertypane is in focus.
     *
     * @private
     */
    PropertyPane.prototype._propertyPaneShouldLooseFocus = function () {
        this._resetState(NO_WEBPART_ID);
        this._updateTabIndexes(-1, false);
        this.props.data.onConfigurationEvent(PropertyPaneDefinitions_1.WebPartConfigurationEvent.PropertyPaneLostFocus);
    };
    PropertyPane.prototype._setTimeOutForFocus = function () {
        var _this = this;
        setTimeout(function () {
            var propertyPane = _this._shouldRenderEmptyPage ?
                _this._propertyPane : _this._propertyPaneContent;
            _this._focusOnFirstActionableElement(propertyPane);
        }, 0);
    };
    PropertyPane.prototype._focusOnFirstActionableElement = function (propertyPane) {
        if (propertyPane) {
            var firstElement = CanvasA11y_1.getFirstFocusableChild(propertyPane);
            if (firstElement) {
                firstElement.focus();
            }
        }
    };
    /**
     * Method to update the tab indexes of all the elements in the root to the given value.
     * @param tabIndex
     */
    PropertyPane.prototype._updateTabIndexes = function (tabIndex, ignoreTabIndexes) {
        var rootElement = this._propertyPane;
        var elements = CanvasA11y_1.getFocusableChildren(rootElement, ignoreTabIndexes);
        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
            var el = elements_1[_i];
            el.tabIndex = tabIndex;
        }
    };
    /**
     * Resetting the PropertyPane state.
     * @param webPartId - web part id to be configured with.
     */
    PropertyPane.prototype._resetState = function (webPartId) {
        this._isPropertyPaneReplaced = true;
        this._currentlyConfiguredWebPartId = webPartId;
        this.setState({
            isSaveButtonEnabled: false,
            saveConfirmationMessage: '',
            currentPage: 1
        });
    };
    PropertyPane.prototype._getClassForPropertyPanePageContentBottom = function () {
        if (this.props.data.settings &&
            this.props.data.settings.pages &&
            this.props.data.settings.pages.length &&
            this.props.data.settings.pages.length > 1) {
            if (this.props.data.isReactive) {
                return PropertyPane_module_scss_1.default.oneRowFooter;
            }
            else {
                return PropertyPane_module_scss_1.default.twoRowFooter;
            }
        }
        return undefined;
    };
    return PropertyPane;
}(React.Component));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = PropertyPane;

//# sourceMappingURL=PropertyPane.js.map
