{"version":3,"sources":["local/clientSideWebParts/propertyPane/propertyPaneController/PropertyPaneController.ts"],"names":[],"mappings":"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","file":"local/clientSideWebParts/propertyPane/propertyPaneController/PropertyPaneController.js","sourcesContent":["/**\r\n * @Copyright (c) Microsoft Corporation.  All rights reserved.\r\n *\r\n * @file  This file contains code to help control the web part PropertyPane\r\n */\r\n'use strict';\r\n\r\nimport ReactDOM = require('react-dom');\r\nimport React = require('react');\r\nimport { Validate } from '@microsoft/sp-client-base';\r\n\r\nimport {\r\n  PropertyPaneState,\r\n  WebPartConfigurationEvent,\r\n  IWebPartConfigurationEventCallback } from '../propertyPane/PropertyPaneDefinitions';\r\nimport { IClientSideWebPartInternal }from '../../core/IClientSideWebPartInternal';\r\nimport { IPropertyPaneData } from '../propertyPane/IPropertyPane';\r\nimport PropertyPane from '../propertyPane/PropertyPane';\r\nimport styles from './PropertyPaneController.module.scss';\r\n\r\n/**\r\n * This is to ensure we get the Strings as part of our bundle. As the webpack's require.ensure is not\r\n * recognizing the external module, referenced in the Strings. Hence, loading this module in the\r\n * base module which will internally load the external module, and make it available before the\r\n * require.ensure is called. Potential bug in webpack(VSO# 205556).\r\n */\r\nrequire('../loc/Strings.resx');\r\n\r\n/**\r\n * @todo: (SPPPLAT VSO#186293) After adding require.ensure for creating the PropertyPane async bundle,\r\n * this line is required because the PropertyPane depends on office-ui-react-fabric. This is a known\r\n * problem and will be investigated as a part of the bug mentioned above.\r\n */\r\nrequire('office-ui-fabric-react');\r\n\r\n/**\r\n * Type definition of the web part getter delegate.\r\n */\r\nexport interface IWebPartGetter { (id: string): IClientSideWebPartInternal; }\r\n\r\n/*\r\n * This class helps control the web part configuration PropertyPane. The web part framework comes with an inbuilt\r\n * PropertyPane. The web part developer should be able to use this PropertyPane with ease. Alternatively, the web part\r\n * developer can also create their own configuration pane if they do not like the functionality provided by the inbuilt\r\n * PropertyPane.\r\n */\r\nexport default class PropertyPaneController {\r\n\r\n  /**\r\n   * PropertyPane animation timeout (in milliseconds).\r\n   */\r\n  private static ANIMATION_TIMEOUT: number = 400;\r\n\r\n  /**\r\n   * PropertyPane configuration complete timeout for Reactive webparts (in milliseconds).\r\n   */\r\n  private static CONFIGURATION_COMPLETE_TIMEOUT: number = 5000;\r\n\r\n  /**\r\n   * PropertyPane container id.\r\n   */\r\n  private static PROPERTY_PANE_CONTAINER_ID: string = 'spPropertyPaneContainer';\r\n\r\n  /**\r\n   * PropertyPane data of the web part currently being configured.\r\n   */\r\n  private _currentPropertyPaneData: IPropertyPaneData;\r\n\r\n  /**\r\n   * Indicating whether the PropertyPane is open or not.\r\n   */\r\n  private _isOpen: boolean;\r\n\r\n  /**\r\n   * Id of the web part being configured.\r\n   */\r\n  private _currentlyConfiguredWebPartId: string;\r\n\r\n  /**\r\n   * Page content DOM element, which is the sibling of the PropertyPane container element. If available, this element\r\n   * will be animated in and out as the PropertyPane opens and closes.\r\n   */\r\n  private _pageContentElement: HTMLElement;\r\n\r\n  /**\r\n   * PropertyPane container DOM element on the host page.\r\n   */\r\n  private _propertyPaneContainer: HTMLElement;\r\n\r\n  /**\r\n   * The root DOM element (div) of the PropertyPane component.\r\n   */\r\n  private _propertyPaneElement: HTMLDivElement;\r\n\r\n  /**\r\n   * Method to get a web part instance.\r\n   */\r\n  private _webPartGetter: IWebPartGetter;\r\n\r\n  /**\r\n   * Configuration completion timeout\r\n   */\r\n  private _configurationCompletionTimeout: number;\r\n\r\n  /**\r\n   * PropertyPane lifecycle event callback (e.g. OpenComplete, CloseComplete, etc...).\r\n   */\r\n  private _configurationEventCallback: IWebPartConfigurationEventCallback;\r\n\r\n  /**\r\n   * @todo: This should be removed once the task (SPPPLAT VSO#222337) is completed.\r\n   */\r\n  private _workbenchCommandBarElement: HTMLDivElement;\r\n\r\n  /**\r\n   * Instantiates the PropertyPaneController object.\r\n   *\r\n   * @param webPartGetter - delegate to get the web part.\r\n   * @param callback - callback to be called when a configuration event happens.\r\n   */\r\n  constructor(webPartGetter: IWebPartGetter, callback?: IWebPartConfigurationEventCallback) {\r\n    Validate.isNotNullOrUndefined(webPartGetter, 'webPartGetter');\r\n\r\n    this._webPartGetter = webPartGetter;\r\n    this._configurationEventCallback = callback;\r\n\r\n    // method bindings\r\n    this._onPropertyChange = this._onPropertyChange.bind(this);\r\n    this._onConfigurationEvent = this._onConfigurationEvent.bind(this);\r\n    this._fireConfigurationEvent = this._fireConfigurationEvent.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Start configuring a web part. If the web part implements the configureStart API, this implies that the\r\n   * web part wants to own its configuration experience.  If the web part does not implenent that API,\r\n   * the inbuilt PropertyPane is used and there are the following conditions:\r\n   *\r\n   *   - propertyPaneState is Open and then open the PropertyPane.\r\n   *   - propertyPaneState is Close and then close the PropertyPane.\r\n   *   - propertyPaneState is Toggle and the PropertyPane is closed: in this case we open the PropertyPane and\r\n   *       start the configuration process. This should happen on web part configure button being clicked.\r\n   *   - propertyPaneState is Toggle and the PropertyPane is opened: in this case, if the web part id\r\n   *       is that of a different web part than being currently configured, we keep the PropertyPane open\r\n   *       and change the web part being configured.\r\n   *   - propertyPaneState is Default and the PropertyPane is closed: do nothing\r\n   *   - propertyPaneState is Default and the PropertyPane is opened: change the PropertyPane to display the\r\n   *       settings of the newly selected web part. This should happen when the user navigates between web parts.\r\n   *\r\n   * @param id - instance id of the web part.\r\n   * @param propertyPaneState - indicates in what state the PropertyPane should be.\r\n   */\r\n  public configureStart(\r\n    id: string,\r\n    propertyPaneState?: PropertyPaneState): void {\r\n\r\n    // 'id' can be 'undefined'. It happens when user selects RTE.\r\n    // When 'id' is 'undefined' then 'wp' will be 'undefined'. In that case we render the empty PropertyPane.\r\n    const toBeConfiguredWebPart: IClientSideWebPartInternal = this._webPartGetter(id);\r\n    this._resolvePropertyPaneElements();\r\n\r\n    /**\r\n     * A variable indicating, if the property pane will open or not. The flag is set to true when the pane is NOT\r\n     * open and the requested propertyPaneState is either Open or Toggle.\r\n     */\r\n    const paneWillOpen: boolean = !this._isOpen &&\r\n      (propertyPaneState === PropertyPaneState.Open || propertyPaneState === PropertyPaneState.Toggle);\r\n\r\n    /**\r\n     * Fire the 'PropertyPaneWebPartsSwitched' event on the new web part when web part switch happens or\r\n     * for the existing web part before the property pane opens.\r\n     */\r\n    if (id && this._currentlyConfiguredWebPartId && (id !== this._currentlyConfiguredWebPartId || paneWillOpen)) {\r\n      this._fireConfigurationEvent(id, WebPartConfigurationEvent.PropertyPaneWebPartsSwitched);\r\n    }\r\n\r\n    this._configureStart(toBeConfiguredWebPart, id, propertyPaneState);\r\n\r\n    this._currentlyConfiguredWebPartId = id;\r\n  }\r\n\r\n  /**\r\n   * Make the PropertyPane disappear when the web part being configured is deleted from the page.\r\n   *\r\n   * @param id - Instance id of the web part.\r\n   */\r\n  public onWebPartDelete(id: string): void {\r\n    Validate.isNonemptyString(id, 'id');\r\n\r\n    if (id === this._currentlyConfiguredWebPartId) {\r\n      if (this._isOpen) {\r\n        this._renderPropertyPane(undefined, true);\r\n      }\r\n\r\n      this._currentlyConfiguredWebPartId = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal configure start.\r\n   * @param wp - Web part to be configured.\r\n   * @param id - Instance id of the web part to be configured.\r\n   * @param propertyPaneState - State of the PropertyPane.\r\n   */\r\n  private _configureStart(\r\n    wp: IClientSideWebPartInternal,\r\n    id: string,\r\n    propertyPaneState?: PropertyPaneState): void {\r\n\r\n    switch (propertyPaneState) {\r\n\r\n      // PropertyPane should open.\r\n      case PropertyPaneState.Open:\r\n        /**\r\n         * Inside the '_renderPropertyPane' the value of the variable '_isOpen' could be modified.\r\n         * Hence, to keep the before state of it, introducing 'paneOpenBeforeRender'.\r\n         */\r\n        const paneOpenBeforeRender: boolean = this._isOpen;\r\n        this._renderPropertyPane(wp, true, true);\r\n\r\n        /**\r\n         * If pane is 'open' before '_renderPropertyPane' is called that means PropertyPane did not toggle.\r\n         * Hence no events were fired. So fire the events explicitly.\r\n         */\r\n        if (paneOpenBeforeRender) {\r\n          this._fireNoToggleConfigurationEvents(id);\r\n        }\r\n        break;\r\n\r\n      // PropertyPane should close.\r\n      case PropertyPaneState.Close:\r\n        if (this._isOpen) {\r\n          this._renderPropertyPane(undefined);\r\n          this._togglePropertyPanePositionAndFireConfigurationEvents();\r\n        }\r\n        break;\r\n\r\n      // PropertyPane should toggle i.e., if it's open, close it else open it.\r\n      case PropertyPaneState.Toggle:\r\n        if (!this._isOpen) {\r\n          this._renderPropertyPane(wp, true, true);\r\n        } else {\r\n          this._renderPropertyPane(undefined);\r\n          this._togglePropertyPanePositionAndFireConfigurationEvents();\r\n        }\r\n        break;\r\n\r\n      // Keep the PropertyPane open if it's already open, else no-op.\r\n      case PropertyPaneState.Default:\r\n        if (this._isOpen) {\r\n          // New web part triggered the 'configureStart' and the PropertyPane is open, so will keep it open.\r\n          // This results in NO toggle. So fire the events specific to this condition.\r\n          this._fireNoToggleConfigurationEvents(id);\r\n\r\n          if (this._isCurrentlyConfiguredPropertyPaneReactive) {\r\n            this._renderPropertyPane(wp, true, true);\r\n          } else {\r\n            // TODO: (SPPPLAT VSO# Task 236141:Implement Non-Reactive PropertyPane in full).\r\n            // For now we are rendering the PropertyPane, but ideally we have to check if the\r\n            // PropertyPane is in dirty state and act accordingly.\r\n            this._renderPropertyPane(wp, true, true);\r\n          }\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to render the PropertyPane.\r\n   *\r\n   * @param currentWebpart - Current web part for which the PropertyPane is to be displayed.\r\n   * @param shouldRecreatePropertyPaneElement - Indicating whether PropertyPane should be recreated or not.\r\n   * @param resetPropertyPaneState - Indicating whether PropertyPane state should be reset.\r\n   */\r\n  private _renderPropertyPane(\r\n    currentWebpart: IClientSideWebPartInternal,\r\n    shouldRecreatePropertyPaneElement?: boolean,\r\n    resetPropertyPaneState?: boolean): void {\r\n\r\n    // @todo: (SPPPLAT VSO#188120) Disabling for now due to webpack async loading bugs.\r\n    // Load the PropertyPane asynchronously in a separate bundle.\r\n    require.ensure([], (require: <T>(path: string) => T) => {\r\n      const propertyPane: typeof PropertyPane =\r\n        require('../propertyPane/PropertyPane')['default'];\r\n\r\n      this._currentPropertyPaneData = currentWebpart ?\r\n        currentWebpart._internalGetPropertyPaneSettings() : this._getEmptyPropertyPaneData();\r\n\r\n      // PropertyPane is rendered only when the web part supplies the settings for the\r\n      // PropertyPane. If there are no settings to be displayed, we empty the PropertyPane\r\n      // container and toggle back if the pane is already open.\r\n      // We will re-visit this logic, once the decission is made, as to what to needs to be done.\r\n      if (this._currentPropertyPaneData) {\r\n        // Only if this flag is true, re-insert the PropertyPane element into the DOM.\r\n        let insertIntoDom: boolean = false;\r\n\r\n        if (shouldRecreatePropertyPaneElement) {\r\n          // Recreating the PropertyPane. This will enable the PropertyPane to be in a valid state.\r\n          if (!this._propertyPaneElement) {\r\n            this._propertyPaneElement = document.createElement('div');\r\n            insertIntoDom = true;\r\n          }\r\n        }\r\n\r\n        if (currentWebpart) {\r\n          this._propertyPaneElement.className = this._currentPropertyPaneData.webPartId;\r\n          this._currentPropertyPaneData.onPropertyChange = this._onPropertyChange;\r\n          this._currentPropertyPaneData.onConfigurationEvent = this._onConfigurationEvent;\r\n          this._currentPropertyPaneData.render = () => { this._render(); };\r\n          this._currentPropertyPaneData.shouldResetState = resetPropertyPaneState;\r\n        }\r\n\r\n        const el: React.ReactElement<{}> = React.createElement(propertyPane, { data: this._currentPropertyPaneData });\r\n        ReactDOM.render(el, this._propertyPaneElement);\r\n\r\n        // If the consumer app provides a container div, the PropertyPane will slide-in/out.\r\n        // Else, the PropertyPane will be a popup and overlay over the content area.\r\n        // Further, if not required, do not re-insert the element into dom.\r\n        if (this._propertyPaneContainer) {\r\n          if (insertIntoDom) {\r\n            this._clearPropertyPaneContainer();\r\n            this._propertyPaneContainer.appendChild(this._propertyPaneElement);\r\n          }\r\n\r\n          if (!this._isOpen) {\r\n            this._togglePropertyPanePositionAndFireConfigurationEvents();\r\n          }\r\n        } else {\r\n          if (insertIntoDom) {\r\n            document.body.insertBefore(this._propertyPaneElement, document.body.lastChild.nextSibling);\r\n          }\r\n        }\r\n      }\r\n    }, 'sp-client-preview-propertypane');\r\n  }\r\n\r\n  /**\r\n   * Allow the PropertyPane to re-render itself. Used when navigating pages.\r\n   */\r\n  private _render(): void {\r\n    const wp: IClientSideWebPartInternal = this._webPartGetter(this._currentPropertyPaneData.webPartId);\r\n\r\n    if (wp) {\r\n      this._renderPropertyPane(wp);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * PropertyPane field change event handler.\r\n   *\r\n   * @param propertyName - Name of the PropertyPane field changed.\r\n   * @param newValue - New value.\r\n   */\r\n  /* tslint:disable:no-any */\r\n  private _onPropertyChange(propertyName: string, newValue: any): void {\r\n    /* tslint:enable:no-any */\r\n    Validate.isNonemptyString(propertyName, 'propertyName');\r\n    Validate.isNotNullOrUndefined(newValue, 'newValue');\r\n\r\n    if (!this._currentPropertyPaneData.webPartId) {\r\n      throw new Error('onPropertyChange event is not expected when no web part is being configured');\r\n    }\r\n\r\n    const wp: IClientSideWebPartInternal = this._webPartGetter(this._currentPropertyPaneData.webPartId);\r\n\r\n    if (wp) {\r\n      wp._internalOnPropertyChange(propertyName, newValue);\r\n      this._renderPropertyPane(wp);\r\n    }\r\n\r\n    if (this._isCurrentlyConfiguredPropertyPaneReactive()) {\r\n      this._resetConfigurationCompleteTimeout();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback to handle the configuration events that originate in the PropertyPane.\r\n   * @example: PropertyPaneClosed, PropertyPaneApplyClicked etc.,\r\n   */\r\n  private _onConfigurationEvent(configurationEvent: WebPartConfigurationEvent): void {\r\n    switch (configurationEvent) {\r\n\r\n      /**\r\n       * For the event 'PropertyPaneClosed' we need to fire both the 'PropertyPaneClosed' and\r\n       * 'PropertyPaneConfigurationComplete' events to the web part.\r\n       * '_togglePropertyPanePosition' internally fires both the events.\r\n       */\r\n      case WebPartConfigurationEvent.PropertyPaneClosed:\r\n        this._togglePropertyPanePositionAndFireConfigurationEvents();\r\n        break;\r\n\r\n      /**\r\n       * For these events we need to fire two events:\r\n       *  - 'PropertyPaneConfigurationComplete' and\r\n       *  - Whatever the event the caller has passed in 'configurationEvent'.\r\n       */\r\n      case WebPartConfigurationEvent.PropertyPaneApplyClicked:\r\n      case WebPartConfigurationEvent.PropertyPaneLostFocus:\r\n        this._fireConfigurationEvent(this._currentlyConfiguredWebPartId, configurationEvent);\r\n        this._fireConfigurationEvent(\r\n          this._currentlyConfiguredWebPartId,\r\n          WebPartConfigurationEvent.PropertyPaneConfigurationComplete);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Slide-in/out the PropertyPane\r\n   */\r\n  private _togglePropertyPanePositionAndFireConfigurationEvents(): void {\r\n\r\n    if (this._isOpen) {\r\n      if (this._pageContentElement) {\r\n        this._pageContentElement.classList.remove(styles.shrinkContent);\r\n      } else {\r\n        /**\r\n         * If there is no page content element, then it means that it is classic page. So unmounting\r\n         * the PropertyPane node, because for some reason PropertyPane is not respecting PropertyPaneContainer\r\n         * styles.\r\n         *\r\n         *  This is a temporary fix, to unblock public preview. Permanent fix will be checked in soon.\r\n         * TODO: (SPPPLAT VSO: Bug 237945:Fix the PropertyPane rendering on the classic page)\r\n         */\r\n        ReactDOM.unmountComponentAtNode(this._propertyPaneElement);\r\n      }\r\n\r\n      if (this._workbenchCommandBarElement) {\r\n        this._workbenchCommandBarElement.classList.remove(styles.shrinkContent);\r\n      }\r\n\r\n      this._propertyPaneContainer.classList.remove(styles.showPane);\r\n    } else {\r\n      if (this._pageContentElement) {\r\n        this._pageContentElement.classList.add(styles.shrinkContent);\r\n      } else {\r\n        /**\r\n         * If there is no page content element, then it means that it is classic page. So unmounting\r\n         * the PropertyPane node, because for some reason PropertyPane is not respecting PropertyPaneContainer\r\n         * styles.\r\n         *\r\n         *  This is a temporary fix, to unblock public preview. Permanent fix will be checked in soon.\r\n         * TODO: (SPPPLAT VSO: Bug 237945:Fix the PropertyPane rendering on the classic page)\r\n         */\r\n        this._propertyPaneContainer.style.top = '50px';\r\n        this._propertyPaneContainer.style.zIndex = '999';\r\n      }\r\n\r\n      if (this._workbenchCommandBarElement) {\r\n        this._workbenchCommandBarElement.classList.add(styles.shrinkContent);\r\n      }\r\n\r\n      this._propertyPaneContainer.classList.add(styles.showPane);\r\n    }\r\n\r\n    this._isOpen = !this._isOpen;\r\n\r\n    // Fire the post toggle events.\r\n    this._firePostToggleConfigurationEvents();\r\n  }\r\n\r\n  /**\r\n   * Method to fire the configuration events post toggling the PropertyPane.\r\n   * If toggling opened the PropertyPane then fire both the 'PropertyPaneOpened' and 'PropertyPaneConfigurationStart'\r\n   * events after the ANIMATION_TIMEOUT is elapsed.\r\n   * Else if the toggling resulted in closing the PropertyPane then fire 'PropertyPaneConfigurationComplete' event\r\n   * and then after ANIMATION_TIMEOUT is elapsed fire 'PropertyPaneClosed' event.\r\n   *\r\n   * @private\r\n   */\r\n  private _firePostToggleConfigurationEvents(): void {\r\n    // @todo: this is a temporary fix to let the host (e.g. Canvas) know that the PropertyPane has completed\r\n    // animating. The current PropertyPane animation is 367ms and hence the 400ms timeout. The correct fix is\r\n    // to hookup to the animation end event.\r\n    if (this._isOpen) {\r\n      window.setTimeout(() => {\r\n        this._fireConfigurationEvent(\r\n          this._currentlyConfiguredWebPartId,\r\n          WebPartConfigurationEvent.PropertyPaneOpened);\r\n\r\n        this._fireConfigurationEvent(\r\n          this._currentlyConfiguredWebPartId,\r\n          WebPartConfigurationEvent.PropertyPaneConfigurationStart);\r\n\r\n        /**\r\n         * Posting a message to the current window indicating that the property pane toggled.\r\n         * @example: Modern pages use this message to re-size it's header.'\r\n         */\r\n        window.postMessage('Property pane toggled', window.location.origin);\r\n      }, PropertyPaneController.ANIMATION_TIMEOUT);\r\n    } else {\r\n      this._fireConfigurationEvent(\r\n        this._currentlyConfiguredWebPartId,\r\n        WebPartConfigurationEvent.PropertyPaneConfigurationComplete);\r\n\r\n      window.setTimeout(() => {\r\n        this._fireConfigurationEvent(\r\n          this._currentlyConfiguredWebPartId,\r\n          WebPartConfigurationEvent.PropertyPaneClosed);\r\n\r\n        /**\r\n         * Posting a message to the current window indicating that the property pane toggled.\r\n         * @example: Modern pages use this message to re-size it's header.'\r\n         */\r\n        window.postMessage('Property pane toggled', window.location.origin);\r\n      }, PropertyPaneController.ANIMATION_TIMEOUT);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to fire the configuration events when the PropertyPane did not toggle.\r\n   * Fire the 'PropertyPaneConfigurationComplete' event on the current web part and\r\n   * then 'PropertyPaneConfigurationStart' for the new web part.\r\n   *\r\n   * @private\r\n   * @param id - Id of the web part to be configured.\r\n   */\r\n  private _fireNoToggleConfigurationEvents(id: string): void {\r\n    // Firing events for the current web part.\r\n    this._fireConfigurationEvent(\r\n      this._currentlyConfiguredWebPartId,\r\n      WebPartConfigurationEvent.PropertyPaneConfigurationComplete);\r\n\r\n    // Firing events for the new web part.\r\n    this._fireConfigurationEvent(\r\n      id,\r\n      WebPartConfigurationEvent.PropertyPaneConfigurationStart);\r\n  }\r\n\r\n  /**\r\n   * Method to fire the configuration event to the host and the base web part.\r\n   *\r\n   * @param { webpartId } - Id of the web part to which the event needs to be sent.\r\n   * @param { configurationEvent } - Kind of configuration event to fire.\r\n   */\r\n  private _fireConfigurationEvent(webpartId: string, configurationEvent: WebPartConfigurationEvent): void {\r\n    this._clearConfigurationCompleteTimeout();\r\n\r\n    const wp: IClientSideWebPartInternal = this._webPartGetter(webpartId);\r\n    if (wp) {\r\n      // Raise the event to the host.\r\n      if (this._configurationEventCallback) {\r\n        this._configurationEventCallback(configurationEvent, wp._internalSerialize());\r\n      }\r\n\r\n      // Raise the event to the web part.\r\n      wp._internalOnConfigurationEvent(configurationEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Private method to resolve the elements, which are used in slide in slide out effect.\r\n   */\r\n  private _resolvePropertyPaneElements(): void {\r\n    const workbenchElement: HTMLDivElement = document.getElementById('workbenchPageContent') as HTMLDivElement;\r\n\r\n    // TODO: (SPPPLAT VSO#222337) - Refactor Workbench page layout\r\n    if (workbenchElement) {\r\n      this._pageContentElement = workbenchElement;\r\n      this._workbenchCommandBarElement = document.getElementById('workbenchCommandBar') as HTMLDivElement;\r\n    } else {\r\n      this._pageContentElement = document.getElementById('spPageChromeAppDiv') as HTMLDivElement;\r\n    }\r\n\r\n    // All modern apps should have the spPageChromeAppDiv. If not, then we should treat like the Classic page scenario.\r\n    // i.e.the container div should be hanging off the root node. And we should create it only the first time.\r\n    if (!this._pageContentElement) {\r\n      if (!this._propertyPaneContainer) {\r\n        this._propertyPaneContainer = document.createElement('div');\r\n        this._propertyPaneContainer.id = PropertyPaneController.PROPERTY_PANE_CONTAINER_ID;\r\n        this._propertyPaneContainer.className = PropertyPaneController.PROPERTY_PANE_CONTAINER_ID;\r\n        document.body.appendChild(this._propertyPaneContainer);\r\n      }\r\n    } else {\r\n      this._propertyPaneContainer = document.getElementById(PropertyPaneController.PROPERTY_PANE_CONTAINER_ID);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes all the children of the PropertyPane container.\r\n   */\r\n  private _clearPropertyPaneContainer(): void {\r\n    while (this._propertyPaneContainer && this._propertyPaneContainer.firstChild) {\r\n      this._propertyPaneContainer.removeChild(this._propertyPaneContainer.firstChild);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset configuration completion timeout.\r\n   */\r\n  private _resetConfigurationCompleteTimeout(): void {\r\n    this._clearConfigurationCompleteTimeout();\r\n    this._configurationCompletionTimeout = window.setTimeout(\r\n      this._fireConfigurationEvent,\r\n      PropertyPaneController.CONFIGURATION_COMPLETE_TIMEOUT,\r\n      this._currentlyConfiguredWebPartId,\r\n      WebPartConfigurationEvent.PropertyPaneConfigurationComplete);\r\n  }\r\n\r\n  /**\r\n   * Clear configuration completion timeout.\r\n   */\r\n  private _clearConfigurationCompleteTimeout(): void {\r\n    if (this._configurationCompletionTimeout) {\r\n      window.clearTimeout(this._configurationCompletionTimeout);\r\n      this._configurationCompletionTimeout = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Method to check whether the currently configured PropertyPane is reactive or not.\r\n   */\r\n  private _isCurrentlyConfiguredPropertyPaneReactive(): boolean {\r\n    if (this._currentlyConfiguredWebPartId) {\r\n      const currentlyConfiguredWebPart: IClientSideWebPartInternal =\r\n        this._webPartGetter(this._currentlyConfiguredWebPartId);\r\n\r\n      return currentlyConfiguredWebPart._internalGetPropertyPaneSettings().isReactive;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Returns the PropertyPane data which has only 'onClose' defined. This is used when we have to display\r\n   * empty property pane, when there is nothing to configure.\r\n   */\r\n  private _getEmptyPropertyPaneData(): IPropertyPaneData {\r\n    return {\r\n      webPartId: undefined,\r\n      title: undefined,\r\n      shouldResetState: true,\r\n      onPropertyChange: undefined,\r\n      onConfigurationEvent: this._onConfigurationEvent,\r\n      onRendered: undefined,\r\n      properties: undefined,\r\n      settings: undefined\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}