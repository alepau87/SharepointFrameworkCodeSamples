/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file PropertyPane definitions.
 */
"use strict";
/**
 * WebPart PropertyPane configuration events
 */
(function (WebPartConfigurationEvent) {
    /**
     * Event indicating the start of the web part's configuration in the PropertyPane.
     *
     * This event is triggered in the following scenarios:
     *  - After user clicks on 'configure' button or
     *  - Aftr user invokes 'configureStart' from the web part or
     *  - When the user switches web parts and the new web part will get the event.
     */
    WebPartConfigurationEvent[WebPartConfigurationEvent["PropertyPaneConfigurationStart"] = 1] = "PropertyPaneConfigurationStart";
    /**
     * Event indicating that the web part's configuration is complete in the PropertyPane.
     *
     * This event is triggered in the following scenarios:
     *  - When the CONFIGURATION_COMPLETE_TIMEOUT(currently the value is 5 secs) elapses after the last change and
     *    the PropertyPane is still in focus.
     *  - If the PropertyPane is closed, before the CONFIGURATION_COMPLETE_TIMEOUT elapses.
     *      > In this case 'PropertyPaneConfigurationComplete' is fired before the 'PropertyPaneClosed' is fired.
     *  - If the PropertyPaneApplyClicked event is triggered, before the CONFIGURATION_COMPLETE_TIMEOUT elapses.
     *  - When the user switches web parts and the current web part will get the event.
     */
    WebPartConfigurationEvent[WebPartConfigurationEvent["PropertyPaneConfigurationComplete"] = 2] = "PropertyPaneConfigurationComplete";
    /**
     * Event indicating that the PropertyPane is opened.
     *
     * This event is triggered after the PropertyPane opens(slides in). This happens in the following cases:
     *  - When the user tries to configure using the 'configure' button or calling configureStart from the web part
     *    while the PropertyPane is closed.
     *
     * This event is fired before the 'PropertyPaneConfigurationStart' event is fired.
     */
    WebPartConfigurationEvent[WebPartConfigurationEvent["PropertyPaneOpened"] = 3] = "PropertyPaneOpened";
    /**
     * Event indicating that the PropertyPane is closed.
     *
     * This event is triggered after the PropertyPane is closed(slides out). This happens in two cases:
     *  - When user clicks 'x' button on the PropertyPane.
     *  - When user toggles the already open PropertyPane.
     */
    WebPartConfigurationEvent[WebPartConfigurationEvent["PropertyPaneClosed"] = 4] = "PropertyPaneClosed";
    /**
     * Event indicating that the 'Apply' button is clicked on the PropertyPane.
     *
     * This event is triggered only on the non-reactive PropertyPane.
     */
    WebPartConfigurationEvent[WebPartConfigurationEvent["PropertyPaneApplyClicked"] = 5] = "PropertyPaneApplyClicked";
    /**
     * Event indicating that the PropertyPane lost the focus.
     *
     * This event is triggered when 'Alt + P'(this is the key combination to toggle the property pane focus)
     * is pressed while the PropertyPane is in focus. This results in PropertyPane loosing the focus and
     * it's associated web part will get back the focus.
     */
    WebPartConfigurationEvent[WebPartConfigurationEvent["PropertyPaneLostFocus"] = 6] = "PropertyPaneLostFocus";
    /**
     * Event indicates either of the following two things:
     *  - A new web part has requested to configure or
     *  - The current web part has requested to open/toggle the property pane while it's closed.
     */
    WebPartConfigurationEvent[WebPartConfigurationEvent["PropertyPaneWebPartsSwitched"] = 7] = "PropertyPaneWebPartsSwitched";
})(exports.WebPartConfigurationEvent || (exports.WebPartConfigurationEvent = {}));
var WebPartConfigurationEvent = exports.WebPartConfigurationEvent;
/**
 * Describes the PropertyPane state.
 */
(function (PropertyPaneState) {
    // PropertyPane's open state.
    PropertyPaneState[PropertyPaneState["Open"] = 1] = "Open";
    // PropertyPane's close state.
    PropertyPaneState[PropertyPaneState["Close"] = 2] = "Close";
    // PropertyPane's Toggle state.
    PropertyPaneState[PropertyPaneState["Toggle"] = 3] = "Toggle";
    // PropertyPane's default state.
    // if it's Open it remains open with the newly selected web part's context.
    // If it's closed it stays closed.
    PropertyPaneState[PropertyPaneState["Default"] = 4] = "Default";
})(exports.PropertyPaneState || (exports.PropertyPaneState = {}));
var PropertyPaneState = exports.PropertyPaneState;

//# sourceMappingURL=PropertyPaneDefinitions.js.map
