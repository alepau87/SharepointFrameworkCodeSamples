{"version":3,"sources":["TSLintTask.ts"],"names":[],"mappings":"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","file":"TSLintTask.js","sourcesContent":["import { GulpTask } from '@microsoft/gulp-core-build';\nimport gulpType = require('gulp');\n/* tslint:disable:typedef */\nconst cached = require('gulp-cache');\n/* tslint:enable:typedef */\nimport through2 = require('through2');\nimport gutil = require('gulp-util');\nimport tslint = require('tslint');\nimport { merge } from 'lodash';\nimport md5 = require('md5');\nimport * as path from 'path';\nimport * as lintTypes from 'tslint/lib/lint';\nimport * as ts from 'typescript';\n\nexport interface ITSLintTaskConfig {\n  /**\n   * A TsLint configuration objects\n   */\n  lintConfig?: any; /* tslint:disable-line:no-any */\n\n  /**\n   * Directories to search for custom linter rules\n   */\n  rulesDirectory?: string | string[];\n\n  /**\n   * An array of files which the linter should analyze\n   */\n  sourceMatch?: string[];\n\n  /**\n   * A function which reports errors to the proper location. Defaults to using the base GulpTask's\n   * this.fileError() function.\n    */\n  reporter?: (result: lintTypes.LintResult, file: gutil.File, options: ITSLintTaskConfig) => void;\n\n  /**\n   * If true, displays warnings as errors. If the reporter function is overwritten, it should reference\n   * this flag. Defaults to `false`.\n   */\n  displayAsWarning?: boolean;\n\n  /**\n   * If true, the lintConfig rules which were previously set will be removed. This flag is useful\n   * for ensuring that there are no rules activated from previous calls to setConfig(). Default is 'false'.\n   */\n  removeExistingRules?: boolean;\n\n  /**\n   * If false, does not use a default tslint configuration as the basis for creating the list of active rules.\n   * Defaults to 'true'\n   */\n  useDefaultConfigAsBase?: boolean;\n}\n\nexport class TSLintTask extends GulpTask<ITSLintTaskConfig> {\n  public name: string = 'tslint';\n  public taskConfig: ITSLintTaskConfig = {\n    // lintConfig: require('../lib/defaultTslint.json'),\n    lintConfig: {},\n    reporter: (result: lintTypes.LintResult, file: gutil.File, options: ITSLintTaskConfig): void => {\n      for (const failure of result.failures) {\n        const pathFromRoot: string = path.relative(this.buildConfig.rootPath, file.path);\n\n        const start: ts.LineAndCharacter = failure.getStartPosition().getLineAndCharacter();\n        if (this.taskConfig.displayAsWarning) {\n          this.fileWarning(\n            pathFromRoot,\n            start.line + 1,\n            start.character + 1,\n            failure.getRuleName(),\n            failure.getFailure());\n        } else {\n          this.fileError(\n            pathFromRoot,\n            start.line + 1,\n            start.character + 1,\n            failure.getRuleName(),\n            failure.getFailure());\n        }\n      }\n    },\n    rulesDirectory: ((): string[] => {\n      const msCustomRulesMain: string = require.resolve('tslint-microsoft-contrib');\n      const msCustomRulesDirectory: string = path.dirname(msCustomRulesMain);\n      return tslint.getRulesDirectories([ msCustomRulesDirectory ], __dirname);\n    })(),\n    sourceMatch: [\n      'src/**/*.ts',\n      'src/**/*.tsx'\n    ],\n    removeExistingRules: false,\n    useDefaultConfigAsBase: true\n  };\n\n  /* tslint:disable:no-any */\n  private _defaultLintRules: any = undefined;\n  /* tslint:enable:no-any */\n\n  public setConfig(config: ITSLintTaskConfig): void {\n    // If the removeExistingRules flag is set, clear out any existing rules\n    if (config.removeExistingRules &&\n        this.taskConfig &&\n        this.taskConfig.lintConfig) {\n      delete this.taskConfig.lintConfig.rules;\n      delete config.removeExistingRules;\n    }\n\n    super.setConfig(config);\n  }\n\n  public executeTask(gulp: gulpType.Gulp): NodeJS.ReadWriteStream {\n    const taskScope: TSLintTask = this;\n\n    const activeLintRules: any = taskScope._loadLintRules(); // tslint:disable-line:no-any\n\n    return gulp.src(this.taskConfig.sourceMatch)\n      .pipe(cached(\n        through2.obj(function(\n          file: gutil.File,\n          encoding: string,\n          callback: (encoding?: string, file?: gutil.File) => void): void {\n          taskScope.logVerbose(file.path);\n\n          // Lint the file\n          if (file.isNull()) {\n            return callback(undefined, file);\n          }\n\n          // Stream is not supported\n          if (file.isStream()) {\n            this.emit('error', new gutil.PluginError(this.name, 'Streaming not supported'));\n            return callback();\n          }\n\n          const options: lintTypes.ILinterOptions = {\n            configuration: activeLintRules,\n            formatter: 'json',\n            formattersDirectory: undefined, // not used, use reporters instead\n            rulesDirectory: taskScope.taskConfig.rulesDirectory || []\n          };\n\n          const tslintOutput: tslint = new tslint(file.relative, file.contents.toString('utf8'), options);\n          /* tslint:disable:no-string-literal */\n          const result: lintTypes.LintResult = file['tslint'] = tslintOutput.lint();\n          /* tslint:enable:no-string-literal */\n\n          if (result.failureCount > 0) {\n            taskScope.taskConfig.reporter(result, file, taskScope.taskConfig);\n          }\n\n          this.push(file);\n          callback();\n        }), {\n          // Scope the cache to a combination of the lint rules and the build path\n          name: md5(\n            tslint.VERSION + JSON.stringify(activeLintRules) +\n            taskScope.name + taskScope.buildConfig.rootPath),\n          // What on the result indicates it was successful\n          success: (jshintedFile: gutil.File): boolean => {\n            /* tslint:disable:no-string-literal */\n            return jshintedFile['tslint'].failureCount === 0;\n            /* tslint:enable:no-string-literal */\n          },\n          // By default, the cache attempts to store the value of the objects in the stream\n          // For this task, this is over-engineering since we never need to store anything extra.\n          value: (file: gutil.File): Object => {\n            return {\n              path: file.path\n            };\n          }\n        }\n      ));\n  }\n\n  private _loadLintRules(): any { // tslint:disable-line:no-any\n    if (!this._defaultLintRules) {\n      this._defaultLintRules = require('./defaultTslint.json');\n    }\n    return merge(\n      (this.taskConfig.useDefaultConfigAsBase ? this._defaultLintRules : {}),\n      this.taskConfig.lintConfig || {});\n  }\n}\n"],"sourceRoot":"/src"}