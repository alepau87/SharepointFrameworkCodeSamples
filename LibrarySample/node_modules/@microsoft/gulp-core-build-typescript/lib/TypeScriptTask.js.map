{"version":3,"sources":["TypeScriptTask.ts"],"names":[],"mappings":"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","file":"TypeScriptTask.js","sourcesContent":["import { GulpTask } from '@microsoft/gulp-core-build';\nimport gulpType = require('gulp');\nimport ts = require('gulp-typescript');\n\ninterface ITypeScriptErrorObject {\n  diagnostic: {\n    messageText: string | { messageText: string };\n    code: number;\n  };\n  fullFilename: string;\n  relativeFilename: string;\n  message: string;\n  startPosition: {\n    character: number;\n    line: number;\n  };\n}\n\nexport interface ITypeScriptTaskConfig {\n  /**\n   * Fails the build when errors occur.\n   * @default true\n   */\n  failBuildOnErrors: boolean;\n\n  /**\n   * Glob matches for files to be included in the build.\n   */\n  sourceMatch?: string[];\n\n  /**\n   * Glob matches for files to be passed through the build.\n   */\n  staticMatch?: string[];\n\n  /**\n   * Optional override for a custom reporter object to be passed into the TypeScript compiler.\n   */\n  reporter?: ts.Reporter;\n\n  /**\n   * Optional override for the TypeScript compiler.\n   */\n  /* tslint:disable:no-any */\n  typescript?: any;\n  /* tslint:enable:no-any */\n}\n\nexport class TypeScriptTask extends GulpTask<ITypeScriptTaskConfig> {\n  public name: string = 'typescript';\n\n  public taskConfig: ITypeScriptTaskConfig = {\n    failBuildOnErrors: true,\n    reporter: {\n      error: (error: ITypeScriptErrorObject): void => {\n        const filename: string = error.relativeFilename || error.fullFilename;\n        const line: number = error.startPosition ? error.startPosition.line : 0;\n        const character: number = error.startPosition ? error.startPosition.character : 0;\n        const code: number = error.diagnostic.code;\n        const errorMessage: string = (typeof error.diagnostic.messageText === 'object') ?\n          (error.diagnostic.messageText as { messageText: string }).messageText :\n          error.diagnostic.messageText as string;\n\n        this.fileError(\n          filename,\n          line,\n          character,\n          'TS' + code,\n          errorMessage);\n      }\n    },\n    sourceMatch: [\n      'src/**/*.ts',\n      'src/**/*.tsx',\n      'typings/main/**/*.ts',\n      'typings/main.d.ts',\n      'typings/tsd.d.ts',\n      'typings/index.d.ts'\n    ],\n    staticMatch: [\n      'src/**/*.js',\n      'src/**/*.json',\n      'src/**/*.jsx'\n    ]\n  };\n\n  private _tsProject: ts.Project;\n\n  public executeTask(gulp: gulpType.Gulp, completeCallback: (result?: string) => void): void {\n    /* tslint:disable:typedef */\n    const plumber = require('gulp-plumber');\n    const sourcemaps = require('gulp-sourcemaps');\n    const assign = require('object-assign');\n    const merge = require('merge2');\n    /* tslint:enable:typedef */\n\n    let errorCount: number = 0;\n    const allStreams: NodeJS.ReadWriteStream[] = [];\n    const tsConfig: ts.TsConfig = this.readJSONSync('tsconfig.json') || require('../tsconfig.json');\n\n    // Log the compiler version for custom verisons.\n    if (this.taskConfig.typescript && this.taskConfig.typescript.version) {\n      this.log(`Using custom version: ${ this.taskConfig.typescript.version }`);\n    }\n\n    const tsCompilerOptions: ts.Params = assign({}, tsConfig.compilerOptions, {\n      module: 'commonjs',\n      sortOutput: true,\n      typescript: this.taskConfig.typescript\n    });\n\n    const tsProject: ts.Project = this._tsProject = this._tsProject || ts.createProject(tsCompilerOptions);\n\n    /* tslint:disable:typedef */\n    const { libFolder, libAMDFolder } = this.buildConfig;\n    /* tslint:enable:typedef */\n    let tsResult: ts.CompilationStream = gulp.src(this.taskConfig.sourceMatch)\n      .pipe(plumber({\n        errorHandler: (): void => {\n          errorCount++;\n        }\n      }))\n      .pipe(sourcemaps.init())\n      .pipe(ts(tsProject, undefined, this.taskConfig.reporter));\n\n    allStreams.push(tsResult.js\n      .pipe(sourcemaps.write('.', { sourceRoot: '/src' }))\n      .pipe(gulp.dest(libFolder)));\n\n    allStreams.push(tsResult.dts.pipe(gulp.dest(libFolder)));\n\n    // Static passthrough files.\n    const staticSrc: NodeJS.ReadWriteStream = gulp.src(this.taskConfig.staticMatch);\n\n    allStreams.push(\n      staticSrc.pipe(gulp.dest(libFolder)));\n\n    // If AMD modules are required, also build that.\n    if (libAMDFolder) {\n      allStreams.push(\n        staticSrc.pipe(gulp.dest(libAMDFolder)));\n\n      const tsAMDProject: ts.Project = ts.createProject(assign({}, tsCompilerOptions, { module: 'amd' }));\n\n      tsResult = gulp.src(this.taskConfig.sourceMatch)\n        .pipe(plumber({\n          errorHandler: (): void => {\n            errorCount++;\n          }\n        }))\n        .pipe(sourcemaps.write({ sourceRoot: '/src' }))\n        .pipe(ts(tsAMDProject, undefined, this.taskConfig.reporter));\n\n      allStreams.push(\n        tsResult.js\n          .pipe(sourcemaps.write('.', { sourceRoot: '/src' }))\n          .pipe(gulp.dest(libAMDFolder)));\n\n      allStreams.push(tsResult.dts.pipe(gulp.dest(libAMDFolder)));\n    }\n\n    // Listen for pass/fail, and ensure that the task passes/fails appropriately.\n    merge(allStreams)\n      .on('queueDrain', () => {\n        if (this.taskConfig.failBuildOnErrors && errorCount) {\n          completeCallback('TypeScript error(s) occurred.');\n        } else {\n          completeCallback();\n        }\n      })\n      .on('error', completeCallback);\n  }\n\n  /** Override the new mergeConfig API */\n  public mergeConfig(config: ITypeScriptTaskConfig): void {\n    throw 'Do not use mergeConfig with gulp-core-build-typescript';\n  }\n}\n"],"sourceRoot":"/src"}