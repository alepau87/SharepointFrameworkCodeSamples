{"version":3,"sources":["SassTask.ts"],"names":[],"mappings":"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","file":"SassTask.js","sourcesContent":["import { GulpTask } from '@microsoft/gulp-core-build';\nimport gulp = require('gulp');\nimport * as gulpUtil from 'gulp-util';\nimport { EOL } from 'os';\nimport { splitStyles } from '@microsoft/load-themed-styles';\n/* tslint:disable:typedef */\nconst merge = require('merge2');\n/* tslint:enable:typedef */\n\nconst scssTsExtName: string = '.scss.ts';\n\nexport interface ISassTaskConfig {\n  preamble?: string;\n  postamble?: string;\n  sassMatch?: string[];\n  useCSSModules?: boolean;\n  dropCssFiles?: boolean;\n}\n\nconst _classMaps: { [file: string]: Object } = {};\n\nexport class SassTask extends GulpTask<ISassTaskConfig> {\n  public name: string = 'sass';\n\n  public taskConfig: ISassTaskConfig = {\n    preamble: '/* tslint:disable */',\n    postamble: '/* tslint:enable */',\n    sassMatch: [\n      'src/**/*.scss'\n    ],\n    useCSSModules: false,\n    dropCssFiles: false\n  };\n\n  public nukeMatch: string[] = [\n    'src/**/*.scss.ts'\n  ];\n\n  public executeTask(\n    gulp: gulp.Gulp,\n    completeCallback?: (result?: string) => void\n  ): Promise<{}> | NodeJS.ReadWriteStream | void {\n\n    /* tslint:disable:typedef */\n    const autoprefixer = require('autoprefixer');\n    const cssModules = require('postcss-modules');\n    /* tslint:enable:typedef */\n\n    /* tslint:disable:no-any */\n    const postCSSPlugins: any[] = [\n      autoprefixer({ browsers: ['> 1%', 'last 2 versions', 'ie >= 10'] })\n    ];\n    const modulePostCssPlugins: any[] = postCSSPlugins.slice(0);\n    /* tslint:enable:no-any */\n\n    modulePostCssPlugins.push(cssModules({\n      getJSON: this._generateModuleStub.bind(this),\n      generateScopedName: this.generateScopedName.bind(this)\n    }));\n\n    const srcPattern: string[] = this.taskConfig.sassMatch.slice(0);\n    const moduleSrcPattern: string[] = srcPattern.map((value: string) => value.replace('.scss', '.module.scss'));\n\n    if (this.taskConfig.useCSSModules) {\n      return this._processFiles(gulp, srcPattern, completeCallback, modulePostCssPlugins);\n    } else {\n      moduleSrcPattern.forEach((value: string) => srcPattern.push(`!${value}`));\n\n      return merge(this._processFiles(gulp, srcPattern, completeCallback, postCSSPlugins),\n                   this._processFiles(gulp, moduleSrcPattern, completeCallback, modulePostCssPlugins));\n    }\n  }\n\n  private _processFiles(\n    gulp: gulp.Gulp,\n    srcPattern: string[],\n    /* tslint:disable:no-any */\n    completeCallback: (result?: any) => void,\n    postCSSPlugins: any[]\n    /* tslint:enable:no-any */\n  ): NodeJS.ReadWriteStream {\n\n    /* tslint:disable:typedef */\n    const changed = require('gulp-changed');\n    const cleancss = require('gulp-clean-css');\n    const clipEmptyFiles = require('gulp-clip-empty-files');\n    const clone = require('gulp-clone');\n    const path = require('path');\n    const postcss = require('gulp-postcss');\n    const sass = require('gulp-sass');\n    const texttojs = require('gulp-texttojs');\n    /* tslint:enable:typedef */\n\n    const tasks: NodeJS.ReadWriteStream[] = [];\n\n    const baseTask: NodeJS.ReadWriteStream = gulp.src(srcPattern)\n      .pipe(changed('src', { extension: scssTsExtName }))\n      .pipe(sass.sync({\n        importer: (url: string, prev: string, done: boolean): Object => ({ file: _patchSassUrl(url) })\n      }).on('error', function(error: Error): void {\n        sass.logError.call(this, error);\n        completeCallback('Errors found in sass file(s).');\n      }))\n      .pipe(postcss(postCSSPlugins))\n      .pipe(cleancss({\n        advanced: false\n      }))\n      .pipe(clipEmptyFiles());\n\n    if (this.taskConfig.dropCssFiles) {\n      tasks.push(baseTask.pipe(clone())\n        .pipe(gulp.dest(this.buildConfig.libFolder)));\n    }\n\n    tasks.push(baseTask.pipe(clone())\n      .pipe(texttojs({\n        ext: scssTsExtName,\n        isExtensionAppended: false,\n        template: (file: gulpUtil.File): string => {\n          const content: string = file.contents.toString('utf8');\n          const classNames: Object = _classMaps[file.path];\n          let exportClassNames: string = '';\n\n          if (classNames) {\n            const classNamesLines: string[] = [\n              this.taskConfig.preamble || '',\n              'const styles = {'\n            ];\n\n            const classKeys: string[] = Object.keys(classNames);\n            classKeys.forEach((key: string, index: number) => {\n              const value: string = classNames[key];\n              let line: string = '';\n              if (key.indexOf('-') !== -1) {\n                this.logWarning(`The local CSS class '${key}' is not camelCase and will not be type-safe.`);\n                line = `  '${key}': '${value}'`;\n              } else {\n                line = `  ${key}: '${value}'`;\n              }\n\n              if ((index + 1) <= classKeys.length) {\n                line += ',';\n              }\n\n              classNamesLines.push(line);\n            });\n\n            classNamesLines.push(\n              '};',\n              '',\n              'export default styles;',\n              this.taskConfig.postamble || '');\n\n            exportClassNames = classNamesLines.join(EOL);\n          }\n\n          let lines: string[] = [];\n          if (this.taskConfig.dropCssFiles) {\n            lines = [\n              `require('${path.basename(file.path, scssTsExtName)}.css');`,\n              '',\n              exportClassNames,\n              ''\n            ];\n          } else if (!!content) {\n            lines = [\n              this.taskConfig.preamble || '',\n              'import { loadStyles } from \\'@microsoft/load-themed-styles\\';',\n              '',\n              exportClassNames,\n              '',\n              `loadStyles(${JSON.stringify(splitStyles(content))});`,\n              this.taskConfig.postamble || '',\n              ''\n            ];\n          }\n\n          return lines.join(EOL).replace(new RegExp(`(${EOL}){3,}`, 'g'), `${EOL}${EOL}`)\n                                .replace(new RegExp(`(${EOL})+$`, 'm'), EOL);\n        }\n      }))\n      .pipe(gulp.dest('src')));\n\n    return merge(tasks);\n  }\n\n  private _generateModuleStub(cssFileName: string, json: Object): void {\n    cssFileName = cssFileName.replace('.css', '.scss.ts');\n    _classMaps[cssFileName] = json;\n  }\n\n  private generateScopedName(name: string, fileName: string): string {\n    /* tslint:disable:typedef */\n    const crypto = require('crypto');\n    /* tslint:enable:typedef */\n\n    return name + '_' + crypto.createHmac('sha1', fileName).update(name).digest('hex').substring(0, 8);\n  }\n}\n\nfunction _patchSassUrl(url: string): string {\n  if (url[0] === '~') {\n    url = 'node_modules/' + url.substr(1);\n  } else if (url === 'stdin') {\n    url = '';\n  }\n\n  return url;\n}\n"],"sourceRoot":"/src"}