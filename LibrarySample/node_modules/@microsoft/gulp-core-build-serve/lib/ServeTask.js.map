{"version":3,"sources":["ServeTask.ts"],"names":[],"mappings":"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","file":"ServeTask.js","sourcesContent":["import { GulpTask } from '@microsoft/gulp-core-build';\nimport { IBuildConfig } from '@microsoft/gulp-core-build/lib/IBuildConfig';\nimport gulp = require('gulp');\nimport http = require('http');\nimport https = require('https');\nimport * as pathType from 'path';\nimport * as gUtilType from 'gulp-util';\nimport * as expressType from 'express';\nimport * as fs from 'fs';\n\nexport interface IServeTaskConfig {\n  /**\n   * API server configuration\n   */\n  api?: {\n    /**\n     * The port on which to run the API server\n     */\n    port: number,\n\n    /**\n     * The path to the script to run as the API server\n     */\n    entryPath: string\n  };\n\n  /**\n   * The path to the page which should open automatically after this task completes. If you prefer no page to be\n   * launched, run the build with the \"--nobrowser\" flag\n   */\n  initialPage?: string;\n\n  /**\n   * The port on which to host the file server.\n   */\n  port?: number;\n\n  /**\n   * If true, the server should run on HTTPS\n   */\n  https?: boolean;\n\n  /**\n   * Path to the HTTPS key\n   */\n  keyPath?: string;\n\n  /**\n   * Path to the HTTPS cert\n   */\n  certPath?: string;\n\n  /**\n   * Path to the HTTPS PFX cert\n   */\n  pfxPath?: string;\n}\n\ninterface IApiMap {\n  [ route: string ]: Function;\n}\n\nexport class ServeTask extends GulpTask<IServeTaskConfig> {\n  public name: string = 'serve';\n\n  public taskConfig: IServeTaskConfig = {\n    api: undefined,\n    initialPage: '/index.html',\n    port: 4321,\n    https: false\n  };\n\n  public executeTask(gulp: gulp.Gulp, completeCallback?: (error?: string) => void): void {\n    /* tslint:disable:typedef */\n    const gulpConnect = require('gulp-connect');\n    const open = require('gulp-open');\n    /* tslint:enable:typedef */\n    const gutil: typeof gUtilType = require('gulp-util');\n    const path: typeof pathType = require('path');\n    const openBrowser: boolean = (process.argv.indexOf('--nobrowser') === -1);\n    const portArgumentIndex: number = process.argv.indexOf('--port');\n    let { port, initialPage, api }: IServeTaskConfig = this.taskConfig;\n    const { rootPath }: IBuildConfig = this.buildConfig;\n    const httpsServerOptions: https.ServerOptions = this._loadHttpsServerOptions();\n\n    if (portArgumentIndex >= 0 && process.argv.length > (portArgumentIndex + 1)) {\n      port = Number(process.argv[portArgumentIndex + 1]);\n    }\n\n    // Spin up the connect server\n    gulpConnect.server({\n      livereload: true,\n      middleware: (): Function[] => [this._logRequestsMiddleware, this._enableCorsMiddleware],\n      port: port,\n      root: rootPath,\n      https: httpsServerOptions\n    });\n\n    // If an api is provided, spin it up.\n    if (api) {\n      let apiMap: IApiMap | { default: IApiMap };\n\n      try {\n        apiMap = require(path.join(rootPath, api.entryPath));\n\n        if (apiMap && (apiMap as { default: IApiMap }).default) {\n          apiMap = (apiMap as { default: IApiMap }).default;\n        }\n      } catch (e) {\n        this.logError(`The api entry could not be loaded: ${api.entryPath}`);\n      }\n\n      if (apiMap) {\n        console.log(`Starting api server on port ${api.port}.`);\n\n        const express: typeof expressType = require('express');\n        const app: expressType.Express = express();\n\n        app.use(this._logRequestsMiddleware);\n        app.use(this._enableCorsMiddleware);\n        app.use(this._setJSONResponseContentTypeMiddleware);\n\n        // Load the apis.\n        for (const apiMapEntry in apiMap) {\n          if (apiMap.hasOwnProperty(apiMapEntry)) {\n            console.log(`Registring api: ${ gutil.colors.green(apiMapEntry) }`);\n            app.get(apiMapEntry, apiMap[apiMapEntry]);\n          }\n        }\n\n        const apiPort: number = api.port || 5432;\n        if (this.taskConfig.https) {\n          https.createServer(httpsServerOptions, app).listen(apiPort);\n        } else {\n          http.createServer(app).listen(apiPort);\n        }\n      }\n    }\n\n    // Spin up the browser.\n    if (openBrowser) {\n      let uri: string = initialPage;\n      if (!initialPage.match(/^https?:\\/\\//)) {\n        if (!initialPage.match(/^\\//)) {\n          initialPage = `/${initialPage}`;\n        }\n\n        uri = `${this.taskConfig.https ? 'https' : 'http'}://localhost:${port}${initialPage}`;\n      }\n\n      gulp.src('')\n        .pipe(open({\n          uri: uri\n        }));\n    }\n\n    completeCallback();\n  }\n\n  private _logRequestsMiddleware(req: http.IncomingMessage, res: http.ServerResponse, next?: () => void): void {\n    const { colors }: typeof gUtilType = require('gulp-util');\n    /* tslint:disable:no-any */\n    const ipAddress: string = (req as any).ip;\n    /* tslint:enable:no-any */\n    let resourceColor: Chalk.ChalkChain = colors.cyan;\n\n    if (req && req.url) {\n      if (req.url.indexOf('.bundle.js') >= 0) {\n        resourceColor = colors.green;\n      } else if (req.url.indexOf('.js') >= 0) {\n        resourceColor = colors.magenta;\n      }\n\n      console.log(\n        [\n          `  Request: `,\n          `${ ipAddress ? `[${ colors.cyan(ipAddress) }] ` : `` }`,\n          `'${ resourceColor(req.url) }'`\n        ].join(''));\n    }\n\n    next();\n  }\n\n  private _enableCorsMiddleware(req: http.IncomingMessage, res: http.ServerResponse, next?: () => void): void {\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    next();\n  }\n\n  private _setJSONResponseContentTypeMiddleware(req: http.IncomingMessage,\n                                                res: http.ServerResponse,\n                                                next?: () => void): void {\n    res.setHeader('content-type', 'application/json');\n    next();\n  }\n\n  private _loadHttpsServerOptions(): https.ServerOptions {\n    if (this.taskConfig.https) {\n      const result: https.ServerOptions = {};\n\n      // We're configuring an HTTPS server, so we need a certificate\n      if (this.taskConfig.pfxPath) {\n        // There's a PFX path in the config, so try that\n        this.logVerbose(`Trying PFX path: ${this.taskConfig.pfxPath}`);\n        if (fs.existsSync(this.taskConfig.pfxPath)) {\n          try {\n            result.pfx = fs.readFileSync(this.taskConfig.pfxPath);\n            this.logVerbose(`Loaded PFX certificate.`);\n          } catch (e) {\n            this.logError(`Error loading PFX file: ${e}`);\n          }\n        } else {\n          this.logError(`PFX file not found at path \"${this.taskConfig.pfxPath}\"`);\n        }\n      } else {\n        if (this.taskConfig.keyPath && this.taskConfig.certPath) {\n          this.logVerbose(`Trying key path \"${this.taskConfig.keyPath}\" and cert path \"${this.taskConfig.certPath}\".`);\n          const certExists: boolean = fs.existsSync(this.taskConfig.certPath);\n          const keyExists: boolean = fs.existsSync(this.taskConfig.keyPath);\n\n          if (keyExists && certExists) {\n            try {\n              result.cert = fs.readFileSync(this.taskConfig.certPath);\n              result.key = fs.readFileSync(this.taskConfig.keyPath);\n            } catch (e) {\n              this.logError(`Error loading key or cert file: ${e}`);\n            }\n          } else {\n            if (!keyExists) {\n              this.logError(`Key file not found at path \"${this.taskConfig.keyPath}`);\n            }\n\n            if (!certExists) {\n              this.logError(`Cert file not found at path \"${this.taskConfig.certPath}`);\n            }\n          }\n        } else {\n          this.logWarning('When serving in HTTPS mode, a PFX cert path or a cert path and a key path must be ' +\n                          'provided. If a SSL certificate isn\\'t provided, a default, self-signed certificate will ' +\n                          'be used. Expect browser security warnings.');\n        }\n      }\n\n      return result;\n    } else {\n      return undefined;\n    }\n  }\n}\n"],"sourceRoot":"/src"}