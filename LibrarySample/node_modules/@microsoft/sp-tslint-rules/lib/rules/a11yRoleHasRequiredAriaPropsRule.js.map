{"version":3,"sources":["rules/a11yRoleHasRequiredAriaPropsRule.ts"],"names":[],"mappings":"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","file":"rules/a11yRoleHasRequiredAriaPropsRule.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n *\r\n * @a11yRoleHasRequiredAriaPropsRule tslint rule of accessibility.\r\n */\r\n\r\nimport * as ts from 'typescript';\r\nimport * as Lint from 'tslint/lib/lint';\r\n\r\nimport { getImplicitRole } from '../utils/getImplicitRole';\r\nimport {\r\n  getJsxAttributesFromJsxElement,\r\n  getStringLiteral\r\n} from '../utils/JsxAttribute';\r\nimport { IRole } from '../utils/attributes/IRole';\r\nimport { IAria } from '../utils/attributes/IAria';\r\n\r\nconst roles: { [roleName: string]: IRole } = require('../utils/attributes/roleSchema.json');\r\nconst ariaAttributes: { [attributeName: string]: IAria } = require('../utils/attributes/ariaSchema.json');\r\nconst roleString: string = 'role';\r\n\r\nexport function getFailureStringForNotImplicitRole(\r\n  roleNamesInElement: string[],\r\n  missingProps: string[]\r\n): string {\r\n  return `Element with ARIA role(s) '${roleNamesInElement.join(', ')}' ` +\r\n    `are missing required attribute(s): ${missingProps.join(', ')}. ` +\r\n    `A reference to role definitions can be found at https://www.w3.org/TR/wai-aria/roles#role_definitions.`;\r\n}\r\n\r\nexport function getFailureStringForImplicitRole(\r\n  tagName: string,\r\n  roleNamesInElement: string,\r\n  missingProps: string[]\r\n): string {\r\n  return `Tag '${tagName}' has implicit role '${roleNamesInElement}'. ` +\r\n    `It requires aria-* attributes: ${missingProps.join(', ')} that are missing in the element. ` +\r\n    `A reference to role definitions can be found at https://www.w3.org/TR/wai-aria/roles#role_definitions.`;\r\n}\r\n\r\nexport class Rule extends Lint.Rules.AbstractRule {\r\n  public apply(sourceFile: ts.SourceFile): Lint.RuleFailure[] {\r\n    return sourceFile.languageVariant === ts.LanguageVariant.JSX\r\n      ? this.applyWithWalker(new A11yRoleHasRequiredAriaPropsWalker(sourceFile, this.getOptions()))\r\n      : [];\r\n  }\r\n}\r\n\r\nclass A11yRoleHasRequiredAriaPropsWalker extends Lint.RuleWalker {\r\n  public visitJsxElement(node: ts.JsxElement): void {\r\n    this.checkJsxElement(node.openingElement);\r\n    super.visitJsxElement(node);\r\n  }\r\n\r\n  public visitJsxSelfClosingElement(node: ts.JsxSelfClosingElement): void {\r\n    this.checkJsxElement(node);\r\n    super.visitJsxSelfClosingElement(node);\r\n  }\r\n\r\n  private checkJsxElement(node: ts.JsxOpeningElement): void {\r\n    const attributesInElement: { [propName: string]: ts.JsxAttribute } = getJsxAttributesFromJsxElement(node);\r\n    const roleProp: ts.JsxAttribute = attributesInElement[roleString];\r\n\r\n    // If role attribute is specified, get the role value. Otherwise get the implicit role from tag name.\r\n    const roleValue: string = roleProp ? getStringLiteral(roleProp) : getImplicitRole(node);\r\n    const isImplicitRole: boolean = !roleProp && !!roleValue;\r\n    const normalizedRoles: string[] = (roleValue || '').toLowerCase().split(' ')\r\n      .filter((role: string) => !!roles[role]);\r\n\r\n    if (normalizedRoles.length === 0) {\r\n      return;\r\n    }\r\n\r\n    let requiredAttributeNames: string[] = [];\r\n\r\n    normalizedRoles.forEach((role: string) => {\r\n      requiredAttributeNames = requiredAttributeNames.concat(roles[role].requiredProps || []);\r\n    });\r\n\r\n    const attributeNamesInElement: string[] = Object.keys(attributesInElement)\r\n      .filter((attributeName: string) => !!ariaAttributes[attributeName.toLowerCase()]);\r\n\r\n    // Get the list of missing required aria-* attributes in current element.\r\n    const missingAttributes: string[] = requiredAttributeNames\r\n      .filter((attributeName: string) => attributeNamesInElement.indexOf(attributeName) === -1);\r\n\r\n    if (missingAttributes.length > 0) {\r\n      this.addFailure(this.createFailure(\r\n        node.getStart(),\r\n        node.getWidth(),\r\n        isImplicitRole ?\r\n          getFailureStringForImplicitRole(node.tagName.getText(), normalizedRoles[0], missingAttributes) :\r\n          getFailureStringForNotImplicitRole(normalizedRoles, missingAttributes)\r\n      ));\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}