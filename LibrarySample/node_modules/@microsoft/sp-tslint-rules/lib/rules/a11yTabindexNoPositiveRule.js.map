{"version":3,"sources":["rules/a11yTabindexNoPositiveRule.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEH,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AACjC,IAAY,IAAI,WAAM,iBAAiB,CAAC,CAAA;AACxC,6BAAiE,uBAAuB,CAAC,CAAA;AAEzF;IACE,MAAM,CAAC,uFAAuF,CAAC;AACjG,CAAC;AAFe,wBAAgB,mBAE/B,CAAA;AAED;IAA0B,wBAAuB;IAAjD;QAA0B,8BAAuB;IAMjD,CAAC;IALQ,oBAAK,GAAZ,UAAa,UAAyB;QACpC,MAAM,CAAC,UAAU,CAAC,eAAe,KAAK,EAAE,CAAC,eAAe,CAAC,GAAG;cACxD,IAAI,CAAC,eAAe,CAAC,IAAI,4BAA4B,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;cACrF,EAAE,CAAC;IACT,CAAC;IACH,WAAC;AAAD,CANA,AAMC,CANyB,IAAI,CAAC,KAAK,CAAC,YAAY,GAMhD;AANY,YAAI,OAMhB,CAAA;AAED;IAA2C,gDAAe;IAA1D;QAA2C,8BAAe;IAyB1D,CAAC;IAxBQ,wDAAiB,GAAxB,UAAyB,IAAqB;QAC5C,IAAM,IAAI,GAAW,0BAAW,CAAC,IAAI,CAAC,CAAC;QAEvC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE,KAAK,UAAU,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC;QACT,CAAC;QAED,IAAM,aAAa,GAAW,gCAAiB,CAAC,IAAI,CAAC,IAAI,+BAAgB,CAAC,IAAI,CAAC,CAAC;QAEhF,qDAAqD;QACrD,EAAE,CAAC,CAAC,aAAa,KAAK,EAAE,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAChC,IAAI,CAAC,QAAQ,EAAE,EACf,IAAI,CAAC,QAAQ,EAAE,EACf,gBAAgB,EAAE,CACnB,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,aAAa,IAAI,aAAa,KAAK,IAAI,IAAI,aAAa,KAAK,GAAG,CAAC,CAAC,CAAC;YAC5E,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAChC,IAAI,CAAC,QAAQ,EAAE,EACf,IAAI,CAAC,QAAQ,EAAE,EACf,gBAAgB,EAAE,CACnB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IACH,mCAAC;AAAD,CAzBA,AAyBC,CAzB0C,IAAI,CAAC,UAAU,GAyBzD","file":"rules/a11yTabindexNoPositiveRule.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n *\r\n * @a11yTabindexNoPositiveRule tslint rule of accessibility.\r\n */\r\n\r\nimport * as ts from 'typescript';\r\nimport * as Lint from 'tslint/lib/lint';\r\nimport { getPropName, getStringLiteral, getNumericLiteral } from '../utils/JsxAttribute';\r\n\r\nexport function getFailureString(): string {\r\n  return `The value of 'tabindex' attribute is invalid or undefined. It must be either -1 or 0.`;\r\n}\r\n\r\nexport class Rule extends Lint.Rules.AbstractRule {\r\n  public apply(sourceFile: ts.SourceFile): Lint.RuleFailure[] {\r\n    return sourceFile.languageVariant === ts.LanguageVariant.JSX\r\n      ? this.applyWithWalker(new A11yTabindexNoPositiveWalker(sourceFile, this.getOptions()))\r\n      : [];\r\n  }\r\n}\r\n\r\nclass A11yTabindexNoPositiveWalker extends Lint.RuleWalker {\r\n  public visitJsxAttribute(node: ts.JsxAttribute): void {\r\n    const name: string = getPropName(node);\r\n\r\n    if (!name || name.toLowerCase() !== 'tabindex') {\r\n      return;\r\n    }\r\n\r\n    const literalString: string = getNumericLiteral(node) || getStringLiteral(node);\r\n\r\n    // In case the attribute has no value of empty value.\r\n    if (literalString === '') {\r\n      this.addFailure(this.createFailure(\r\n        node.getStart(),\r\n        node.getWidth(),\r\n        getFailureString()\r\n      ));\r\n    } else if (literalString && literalString !== '-1' && literalString !== '0') {\r\n      this.addFailure(this.createFailure(\r\n        node.getStart(),\r\n        node.getWidth(),\r\n        getFailureString()\r\n      ));\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}