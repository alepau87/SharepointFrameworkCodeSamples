{"version":3,"sources":["rules/a11yRoleSupportsAriaPropsRule.ts"],"names":[],"mappings":"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","file":"rules/a11yRoleSupportsAriaPropsRule.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n *\r\n * @a11yRoleSupportsAriaPropsRule tslint rule of accessibility.\r\n */\r\n\r\nimport * as ts from 'typescript';\r\nimport * as Lint from 'tslint/lib/lint';\r\nimport { getImplicitRole } from '../utils/getImplicitRole';\r\nimport { getJsxAttributesFromJsxElement, getStringLiteral } from '../utils/JsxAttribute';\r\nimport { IRole } from '../utils/attributes/IRole';\r\nimport { IAria } from '../utils/attributes/IAria';\r\n\r\nconst roles: { [roleName: string]: IRole } = require('../utils/attributes/roleSchema.json');\r\nconst ariaAttributes: { [attributeName: string]: IAria } = require('../utils/attributes/ariaSchema.json');\r\nconst roleString: string = 'role';\r\n\r\nexport function getFailureStringForNotImplicitRole(roleNamesInElement: string[], invalidPropNames: string[]): string {\r\n  return `Attribute(s) ${invalidPropNames.join(', ')} are not supported by role(s) ${roleNamesInElement.join(', ')}. ` +\r\n    `You are using incorrect role or incorrect aria-* attribute`;\r\n}\r\n\r\nexport function getFailureStringForImplicitRole(tagName: string, roleName: string, invalidPropNames: string[]): string {\r\n  return `Attribute(s) ${invalidPropNames.join(', ')} not supported ` +\r\n    `by role ${roleName} which is implicitly set by the HTML tag ${tagName}.`;\r\n}\r\n\r\nexport class Rule extends Lint.Rules.AbstractRule {\r\n  public apply(sourceFile: ts.SourceFile): Lint.RuleFailure[] {\r\n    return sourceFile.languageVariant === ts.LanguageVariant.JSX\r\n      ? this.applyWithWalker(new A11yRoleSupportsAriaPropsWalker(sourceFile, this.getOptions()))\r\n      : [];\r\n  }\r\n}\r\n\r\nclass A11yRoleSupportsAriaPropsWalker extends Lint.RuleWalker {\r\n  public visitJsxElement(node: ts.JsxElement): void {\r\n    this.checkJsxElement(node.openingElement);\r\n    super.visitJsxElement(node);\r\n  }\r\n\r\n  public visitJsxSelfClosingElement(node: ts.JsxSelfClosingElement): void {\r\n    this.checkJsxElement(node);\r\n    super.visitJsxSelfClosingElement(node);\r\n  }\r\n\r\n  private checkJsxElement(node: ts.JsxOpeningElement): void {\r\n    const attributesInElement: { [propName: string]: ts.JsxAttribute } = getJsxAttributesFromJsxElement(node);\r\n    const roleProp: ts.JsxAttribute = attributesInElement[roleString];\r\n\r\n    // If role attribute is specified, get the role value. Otherwise get the implicit role from tag name.\r\n    const roleValue: string = roleProp ? getStringLiteral(roleProp) : getImplicitRole(node);\r\n    const isImplicitRole: boolean = !roleProp && !!roleValue;\r\n    const normalizedRoles: string[] = (roleValue || '').toLowerCase().split(' ')\r\n      .filter((role: string) => !!roles[role]);\r\n\r\n    if (normalizedRoles.length === 0) {\r\n      return;\r\n    }\r\n\r\n    let supportedAttributeNames: string[] = [];\r\n\r\n    normalizedRoles.forEach((role: string) => {\r\n      supportedAttributeNames = supportedAttributeNames.concat(roles[role].supportedProps || []);\r\n    });\r\n\r\n    const attributeNamesInElement: string[] = Object.keys(attributesInElement)\r\n      .filter((attributeName: string) => !!ariaAttributes[attributeName.toLowerCase()]);\r\n\r\n    // Get the list of not-supported aria-* attributes in current element.\r\n    const invalidAttributeNamesInElement: string[] = attributeNamesInElement\r\n      .filter((attributeName: string) => supportedAttributeNames.indexOf(attributeName) === -1);\r\n\r\n    if (invalidAttributeNamesInElement.length > 0) {\r\n      this.addFailure(this.createFailure(\r\n        node.getStart(),\r\n        node.getWidth(),\r\n        isImplicitRole ?\r\n          getFailureStringForImplicitRole(node.tagName.getText(), normalizedRoles[0], invalidAttributeNamesInElement) :\r\n          getFailureStringForNotImplicitRole(normalizedRoles, invalidAttributeNamesInElement)\r\n      ));\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}