{"version":3,"sources":["rules/a11yPropsRule.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEH,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AACjC,IAAY,IAAI,WAAM,iBAAiB,CAAC,CAAA;AAExC,6BAA4B,uBAAuB,CAAC,CAAA;AAGpD,IAAM,IAAI,GAAuC,OAAO,CAAC,qCAAqC,CAAC,CAAC;AAEhG,0BAAiC,IAAY;IAC3C,MAAM,CAAC,2BAAwB,IAAI,sCAAkC;QACnE,uDAAuD;QACvD,wFAAwF,CAAC;AAC7F,CAAC;AAJe,wBAAgB,mBAI/B,CAAA;AAED;IAA0B,wBAAuB;IAAjD;QAA0B,8BAAuB;IAMjD,CAAC;IALQ,oBAAK,GAAZ,UAAa,UAAyB;QACpC,MAAM,CAAC,UAAU,CAAC,eAAe,KAAK,EAAE,CAAC,eAAe,CAAC,GAAG;cACxD,IAAI,CAAC,eAAe,CAAC,IAAI,eAAe,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;cACxE,EAAE,CAAC;IACT,CAAC;IACH,WAAC;AAAD,CANA,AAMC,CANyB,IAAI,CAAC,KAAK,CAAC,YAAY,GAMhD;AANY,YAAI,OAMhB,CAAA;AAED;IAA8B,mCAAe;IAA7C;QAA8B,8BAAe;IAgB7C,CAAC;IAfQ,2CAAiB,GAAxB,UAAyB,IAAqB;QAC5C,IAAM,IAAI,GAAW,0BAAW,CAAC,IAAI,CAAC,CAAC;QAEvC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC;QACT,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAChC,IAAI,CAAC,QAAQ,EAAE,EACf,IAAI,CAAC,QAAQ,EAAE,EACf,gBAAgB,CAAC,IAAI,CAAC,CACvB,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IACH,sBAAC;AAAD,CAhBA,AAgBC,CAhB6B,IAAI,CAAC,UAAU,GAgB5C","file":"rules/a11yPropsRule.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n *\r\n * @a11yPropsRule tslint rule of accessibility.\r\n */\r\n\r\nimport * as ts from 'typescript';\r\nimport * as Lint from 'tslint/lib/lint';\r\n\r\nimport { getPropName } from '../utils/JsxAttribute';\r\nimport { IAria } from '../utils/attributes/IAria';\r\n\r\nconst aria: { [attributeName: string]: IAria } = require('../utils/attributes/ariaSchema.json');\r\n\r\nexport function getFailureString(name: string): string {\r\n  return `This attribute name '${name}' is an invalid ARIA attribute. ` +\r\n    `A reference to valid ARIA attributes can be found at ` +\r\n    `https://www.w3.org/TR/2014/REC-wai-aria-20140320/states_and_properties#state_prop_def `;\r\n}\r\n\r\nexport class Rule extends Lint.Rules.AbstractRule {\r\n  public apply(sourceFile: ts.SourceFile): Lint.RuleFailure[] {\r\n    return sourceFile.languageVariant === ts.LanguageVariant.JSX\r\n      ? this.applyWithWalker(new A11yPropsWalker(sourceFile, this.getOptions()))\r\n      : [];\r\n  }\r\n}\r\n\r\nclass A11yPropsWalker extends Lint.RuleWalker {\r\n  public visitJsxAttribute(node: ts.JsxAttribute): void {\r\n    const name: string = getPropName(node);\r\n\r\n    if (!name || !name.match(/^aria-/i)) {\r\n      return;\r\n    }\r\n\r\n    if (!aria[name.toLowerCase()]) {\r\n      this.addFailure(this.createFailure(\r\n        node.getStart(),\r\n        node.getWidth(),\r\n        getFailureString(name)\r\n      ));\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}