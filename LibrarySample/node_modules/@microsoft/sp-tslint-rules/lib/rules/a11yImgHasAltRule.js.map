{"version":3,"sources":["rules/a11yImgHasAltRule.ts"],"names":[],"mappings":"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","file":"rules/a11yImgHasAltRule.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n *\r\n * @a11yImgHasAltRule tslint rule of accessibility.\r\n */\r\n\r\nimport * as ts from 'typescript';\r\nimport * as Lint from 'tslint/lib/lint';\r\n\r\nimport {\r\n  getAllAttributesFromJsxElement,\r\n  getJsxAttributesFromJsxElement,\r\n  getStringLiteral\r\n} from '../utils/JsxAttribute';\r\nimport { isJsxSpreadAttribute } from '../utils/TypeGuard';\r\n\r\nconst roleString: string = 'role';\r\nconst altString: string = 'alt';\r\n\r\nexport function getFailureStringNoAlt(tagName: string): string {\r\n  return `<${tagName}> elements must have an alt attribute or use role='presentation' for presentational images. ` +\r\n    `A reference for the presentation role can be found at https://www.w3.org/TR/wai-aria/roles#presentation.`;\r\n}\r\n\r\nexport function getFailureStringEmptyAlt(tagName: string): string {\r\n  return `The value of 'alt' attribute in <${tagName}> tag is undefined or empty. ` +\r\n    `Add more details in 'alt' attribute or use role='presentation' for presentational images. ` +\r\n    `A reference for the presentation role can be found at https://www.w3.org/TR/wai-aria/roles#presentation.`;\r\n}\r\n\r\nexport class Rule extends Lint.Rules.AbstractRule {\r\n  public apply(sourceFile: ts.SourceFile): Lint.RuleFailure[] {\r\n    return sourceFile.languageVariant === ts.LanguageVariant.JSX\r\n      ? this.applyWithWalker(new ImgHasAltWalker(sourceFile, this.getOptions()))\r\n      : [];\r\n  }\r\n}\r\n\r\nclass ImgHasAltWalker extends Lint.RuleWalker {\r\n  public visitJsxSelfClosingElement(node: ts.JsxSelfClosingElement): void {\r\n    // Tag name is sensitive on lowercase or uppercase, we shoudn't normalize tag names in this rule.\r\n    const tagName: string = node.tagName && node.tagName.getText();\r\n    const options: any[] = this.getOptions(); // tslint:disable-line:no-any\r\n\r\n    // The additionalTagNames are specified by tslint config to check not only 'img' tag but also customized tag.\r\n    // @example checking a customized component 'Image' which should require 'alt' attribute.\r\n    const additionalTagNames: string[] = options.length > 1 ? options[1] : [];\r\n\r\n    // The targetTagNames is the list of tag names we want to check.\r\n    const targetTagNames: string[] = ['img'].concat(additionalTagNames);\r\n\r\n    if (!tagName || targetTagNames.indexOf(tagName) === -1) {\r\n      return;\r\n    }\r\n\r\n    // If element contains JsxSpreadElement in which there could possibly be alt attribute, don't check it.\r\n    if (getAllAttributesFromJsxElement(node).some(isJsxSpreadAttribute)) {\r\n      return;\r\n    }\r\n\r\n    const attributes: { [propName: string]: ts.JsxAttribute } = getJsxAttributesFromJsxElement(node);\r\n    const role: ts.JsxAttribute = attributes[roleString];\r\n    const roleValue: string = role && getStringLiteral(role);\r\n\r\n    // if <img> element has role of 'presentation', it's presentational image, don't check it;\r\n    // @example <img role='presentation' />\r\n    if (roleValue && roleValue.match(/\\bpresentation\\b/)) {\r\n      return;\r\n    }\r\n\r\n    const altProp: ts.JsxAttribute = attributes[altString];\r\n\r\n    if (!altProp) {\r\n      this.addFailure(this.createFailure(\r\n        node.getStart(),\r\n        node.getWidth(),\r\n        getFailureStringNoAlt(tagName)\r\n      ));\r\n    } else if (getStringLiteral(altProp) === '') {\r\n      this.addFailure(this.createFailure(\r\n        altProp.getStart(),\r\n        altProp.getWidth(),\r\n        getFailureStringEmptyAlt(tagName)\r\n      ));\r\n    }\r\n\r\n    super.visitJsxSelfClosingElement(node);\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}