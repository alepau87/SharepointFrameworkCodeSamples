{"version":3,"sources":["rules/a11yRoleRule.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEH,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AACjC,IAAY,IAAI,WAAM,iBAAiB,CAAC,CAAA;AACxC,6BAA8C,uBAAuB,CAAC,CAAA;AAGtE,IAAM,KAAK,GAAkC,OAAO,CAAC,qCAAqC,CAAC,CAAC;AAE5F,yCAAyC;AACzC,IAAM,UAAU,GAAa,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,KAAK,CAAC,IAAI,CAAC,CAAC,UAAU,KAAK,KAAK,EAAhC,CAAgC,CAAC,CAAC;AAEjG;IACE,MAAM,CAAC,oDAAoD;QACzD,wFAAwF,CAAC;AAC7F,CAAC;AAHe,qCAA6B,gCAG5C,CAAA;AAED,qCAA4C,eAAuB;IACjE,MAAM,CAAC,oCAAiC,eAAe,oDAAgD;QACrG,0EAA0E;QAC1E,wDAAwD,CAAC;AAC7D,CAAC;AAJe,mCAA2B,8BAI1C,CAAA;AAED;IAA0B,wBAAuB;IAAjD;QAA0B,8BAAuB;IAMjD,CAAC;IALQ,oBAAK,GAAZ,UAAa,UAAyB;QACpC,MAAM,CAAC,UAAU,CAAC,eAAe,KAAK,EAAE,CAAC,eAAe,CAAC,GAAG;cACxD,IAAI,CAAC,eAAe,CAAC,IAAI,kBAAkB,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;cAC3E,EAAE,CAAC;IACT,CAAC;IACH,WAAC;AAAD,CANA,AAMC,CANyB,IAAI,CAAC,KAAK,CAAC,YAAY,GAMhD;AANY,YAAI,OAMhB,CAAA;AAED;IAAiC,sCAAe;IAAhD;QAAiC,8BAAe;IAgChD,CAAC;IA/BQ,8CAAiB,GAAxB,UAAyB,IAAqB;QAC5C,IAAM,IAAI,GAAW,0BAAW,CAAC,IAAI,CAAC,CAAC;QAEvC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC;QACT,CAAC;QAED,IAAM,SAAS,GAAW,+BAAgB,CAAC,IAAI,CAAC,CAAC;QAEjD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACd,0EAA0E;YAC1E,kFAAkF;YAClF,IAAM,gBAAgB,GAAa,SAAS,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAEtE,EAAE,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,IAAI,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAzC,CAAyC,CAAC,CAAC,CAAC,CAAC;gBAC9E,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAChC,IAAI,CAAC,QAAQ,EAAE,EACf,IAAI,CAAC,QAAQ,EAAE,EACf,2BAA2B,CAAC,SAAS,CAAC,CACvC,CAAC,CAAC;YACL,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,KAAK,EAAE,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAChC,IAAI,CAAC,QAAQ,EAAE,EACf,IAAI,CAAC,QAAQ,EAAE,EACf,6BAA6B,EAAE,CAChC,CAAC,CAAC;QACL,CAAC;QAED,gBAAK,CAAC,iBAAiB,YAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IACH,yBAAC;AAAD,CAhCA,AAgCC,CAhCgC,IAAI,CAAC,UAAU,GAgC/C","file":"rules/a11yRoleRule.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n *\r\n * @a11yRole tslint rule of accessibility.\r\n */\r\n\r\nimport * as ts from 'typescript';\r\nimport * as Lint from 'tslint/lib/lint';\r\nimport { getPropName, getStringLiteral } from '../utils/JsxAttribute';\r\nimport { IRole } from '../utils/attributes/IRole';\r\n\r\nconst roles: { [roleName: string]: IRole } = require('../utils/attributes/roleSchema.json');\r\n\r\n// The array of non-abstract valid rules.\r\nconst validRoles: string[] = Object.keys(roles).filter(role => roles[role].isAbstract === false);\r\n\r\nexport function getFailureStringUndefinedRole(): string {\r\n  return `'role' attribute empty. Either select a role from ` +\r\n    `https://www.w3.org/TR/wai-aria/roles#role_definitions, or simply remove this attribute`;\r\n}\r\n\r\nexport function getFailureStringInvalidRole(invalidRoleName: string): string {\r\n  return `Invalid role attribute value '${invalidRoleName}', elements with ARIA roles must use a valid, ` +\r\n    `non-abstract ARIA role. A reference to role definitions can be found at ` +\r\n    `https://www.w3.org/TR/wai-aria/roles#role_definitions.`;\r\n}\r\n\r\nexport class Rule extends Lint.Rules.AbstractRule {\r\n  public apply(sourceFile: ts.SourceFile): Lint.RuleFailure[] {\r\n    return sourceFile.languageVariant === ts.LanguageVariant.JSX\r\n      ? this.applyWithWalker(new A11yRoleRuleWalker(sourceFile, this.getOptions()))\r\n      : [];\r\n  }\r\n}\r\n\r\nclass A11yRoleRuleWalker extends Lint.RuleWalker {\r\n  public visitJsxAttribute(node: ts.JsxAttribute): void {\r\n    const name: string = getPropName(node);\r\n\r\n    if (!name || name.toLowerCase() !== 'role') {\r\n      return;\r\n    }\r\n\r\n    const roleValue: string = getStringLiteral(node);\r\n\r\n    if (roleValue) {\r\n      // Splitted by space doesn't mean the multiple role definition is correct,\r\n      // just because this rule is not checking if it is using multiple role definition.\r\n      const normalizedValues: string[] = roleValue.toLowerCase().split(' ');\r\n\r\n      if (normalizedValues.some(value => value && validRoles.indexOf(value) === -1)) {\r\n        this.addFailure(this.createFailure(\r\n          node.getStart(),\r\n          node.getWidth(),\r\n          getFailureStringInvalidRole(roleValue)\r\n        ));\r\n      }\r\n    } else if (roleValue === '') {\r\n      this.addFailure(this.createFailure(\r\n        node.getStart(),\r\n        node.getWidth(),\r\n        getFailureStringUndefinedRole()\r\n      ));\r\n    }\r\n\r\n    super.visitJsxAttribute(node);\r\n  }\r\n}\r\n"],"sourceRoot":"/src"}