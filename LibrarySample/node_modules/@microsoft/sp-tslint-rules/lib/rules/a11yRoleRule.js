/**
 * @copyright Microsoft Corporation. All rights reserved.
 *
 * @a11yRole tslint rule of accessibility.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ts = require('typescript');
var Lint = require('tslint/lib/lint');
var JsxAttribute_1 = require('../utils/JsxAttribute');
var roles = require('../utils/attributes/roleSchema.json');
// The array of non-abstract valid rules.
var validRoles = Object.keys(roles).filter(function (role) { return roles[role].isAbstract === false; });
function getFailureStringUndefinedRole() {
    return "'role' attribute empty. Either select a role from " +
        "https://www.w3.org/TR/wai-aria/roles#role_definitions, or simply remove this attribute";
}
exports.getFailureStringUndefinedRole = getFailureStringUndefinedRole;
function getFailureStringInvalidRole(invalidRoleName) {
    return ("Invalid role attribute value '" + invalidRoleName + "', elements with ARIA roles must use a valid, ") +
        "non-abstract ARIA role. A reference to role definitions can be found at " +
        "https://www.w3.org/TR/wai-aria/roles#role_definitions.";
}
exports.getFailureStringInvalidRole = getFailureStringInvalidRole;
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        _super.apply(this, arguments);
    }
    Rule.prototype.apply = function (sourceFile) {
        return sourceFile.languageVariant === ts.LanguageVariant.JSX
            ? this.applyWithWalker(new A11yRoleRuleWalker(sourceFile, this.getOptions()))
            : [];
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var A11yRoleRuleWalker = (function (_super) {
    __extends(A11yRoleRuleWalker, _super);
    function A11yRoleRuleWalker() {
        _super.apply(this, arguments);
    }
    A11yRoleRuleWalker.prototype.visitJsxAttribute = function (node) {
        var name = JsxAttribute_1.getPropName(node);
        if (!name || name.toLowerCase() !== 'role') {
            return;
        }
        var roleValue = JsxAttribute_1.getStringLiteral(node);
        if (roleValue) {
            // Splitted by space doesn't mean the multiple role definition is correct,
            // just because this rule is not checking if it is using multiple role definition.
            var normalizedValues = roleValue.toLowerCase().split(' ');
            if (normalizedValues.some(function (value) { return value && validRoles.indexOf(value) === -1; })) {
                this.addFailure(this.createFailure(node.getStart(), node.getWidth(), getFailureStringInvalidRole(roleValue)));
            }
        }
        else if (roleValue === '') {
            this.addFailure(this.createFailure(node.getStart(), node.getWidth(), getFailureStringUndefinedRole()));
        }
        _super.prototype.visitJsxAttribute.call(this, node);
    };
    return A11yRoleRuleWalker;
}(Lint.RuleWalker));

//# sourceMappingURL=a11yRoleRule.js.map
