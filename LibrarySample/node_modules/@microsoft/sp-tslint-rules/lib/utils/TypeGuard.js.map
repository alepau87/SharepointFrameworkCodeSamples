{"version":3,"sources":["utils/TypeGuard.ts"],"names":[],"mappings":";AAAA,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAEjC;;;;GAIG;AAEH,wBAA+B,IAAa;IAC1C,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC;AAC1D,CAAC;AAFe,sBAAc,iBAE7B,CAAA;AAED,8BAAqC,IAAa;IAChD,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,kBAAkB,CAAC;AAChE,CAAC;AAFe,4BAAoB,uBAEnC,CAAA;AAED,yBAAgC,IAAa;IAC3C,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC;AAC3D,CAAC;AAFe,uBAAe,kBAE9B,CAAA;AAED;;GAEG;AACH,0BAAiC,IAAa;IAC5C,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC;AAC5D,CAAC;AAFe,wBAAgB,mBAE/B,CAAA;AAED,yBAAgC,IAAa;IAC3C,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC;AAC3D,CAAC;AAFe,uBAAe,kBAE9B,CAAA;AAED,sBAA6B,IAAa;IACxC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;AACxD,CAAC;AAFe,oBAAY,eAE3B,CAAA;AAED,iCAAwC,IAAa;IACnD,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,qBAAqB,CAAC;AACnE,CAAC;AAFe,+BAAuB,0BAEtC,CAAA;AAED,6BAAoC,IAAa;IAC/C,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC;AAC/D,CAAC;AAFe,2BAAmB,sBAElC,CAAA","file":"utils/TypeGuard.js","sourcesContent":["import * as ts from 'typescript';\r\n\r\n/**\r\n * TypeScript 2.0 will have more features to support type guard.\r\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html\r\n * We could avoid 'as' cast if switching to 2.0\r\n */\r\n\r\nexport function isJsxAttribute(node: ts.Node): node is ts.JsxAttribute {\r\n  return node && node.kind === ts.SyntaxKind.JsxAttribute;\r\n}\r\n\r\nexport function isJsxSpreadAttribute(node: ts.Node): node is ts.JsxSpreadAttribute {\r\n  return node && node.kind === ts.SyntaxKind.JsxSpreadAttribute;\r\n}\r\n\r\nexport function isJsxExpression(node: ts.Node): node is ts.JsxExpression {\r\n  return node && node.kind === ts.SyntaxKind.JsxExpression;\r\n}\r\n\r\n/**\r\n * There is no type of NumericLiteral in typescript, guarded as LiteralExpression.\r\n */\r\nexport function isNumericLiteral(node: ts.Node): node is ts.LiteralExpression {\r\n  return node && node.kind === ts.SyntaxKind.NumericLiteral;\r\n}\r\n\r\nexport function isStringLiteral(node: ts.Node): node is ts.StringLiteral {\r\n  return node && node.kind === ts.SyntaxKind.StringLiteral;\r\n}\r\n\r\nexport function isJsxElement(node: ts.Node): node is ts.JsxElement {\r\n  return node && node.kind === ts.SyntaxKind.JsxElement;\r\n}\r\n\r\nexport function isJsxSelfClosingElement(node: ts.Node): node is ts.JsxSelfClosingElement {\r\n  return node && node.kind === ts.SyntaxKind.JsxSelfClosingElement;\r\n}\r\n\r\nexport function isJsxOpeningElement(node: ts.Node): node is ts.JsxOpeningElement {\r\n  return node && node.kind === ts.SyntaxKind.JsxOpeningElement;\r\n}\r\n"],"sourceRoot":"/src"}