/**
 * @copyright Microsoft Corporation. All rights reserved.
 *
 * @JsxAttribute utilities for react rules.
 */
"use strict";
var TypeGuard_1 = require('./TypeGuard');
function getPropName(node) {
    if (!TypeGuard_1.isJsxAttribute(node)) {
        throw new Error('The node must be a JsxAttribute collected by the AST parser.');
    }
    return node.name
        ? node.name.text
        : undefined;
}
exports.getPropName = getPropName;
/**
 * Get the string literal in jsx attribute initializer with following format:
 * @example
 * <div attribute='StringLiteral' />
 * @example
 * <div attribute={ 'StringLiteral' } />
 */
function getStringLiteral(node) {
    if (!TypeGuard_1.isJsxAttribute(node)) {
        throw new Error('The node must be a JsxAttribute collected by the AST parser.');
    }
    var initializer = node.initializer;
    if (!initializer) {
        return '';
    }
    else if (TypeGuard_1.isStringLiteral(initializer)) {
        return initializer.text.trim();
    }
    else if (TypeGuard_1.isJsxExpression(initializer) && TypeGuard_1.isStringLiteral(initializer.expression)) {
        return initializer.expression.text;
    }
    else if (TypeGuard_1.isJsxExpression(initializer) && !initializer.expression) {
        return '';
    }
    else {
        return undefined;
    }
}
exports.getStringLiteral = getStringLiteral;
/**
 * Get the numeric literal in jsx attribute initializer with following format:
 * @example
 * <div attribute={ 1 } />
 */
function getNumericLiteral(node) {
    if (!TypeGuard_1.isJsxAttribute(node)) {
        throw new Error('The node must be a JsxAttribute collected by the AST parser.');
    }
    var initializer = node.initializer;
    return TypeGuard_1.isJsxExpression(initializer) && TypeGuard_1.isNumericLiteral(initializer.expression)
        ? initializer.expression.text
        : undefined;
}
exports.getNumericLiteral = getNumericLiteral;
/**
 * Get an array of attributes in the given node.
 * It contains JsxAttribute and JsxSpreadAttribute.
 */
function getAllAttributesFromJsxElement(node) {
    var attributes;
    if (TypeGuard_1.isJsxElement(node)) {
        attributes = node.openingElement.attributes;
    }
    else if (TypeGuard_1.isJsxSelfClosingElement(node)) {
        attributes = node.attributes;
    }
    else if (TypeGuard_1.isJsxOpeningElement(node)) {
        attributes = node.attributes;
    }
    else {
        throw new Error('The node must be a JsxElement, JsxSelfClosingElement or JsxOpeningElement.');
    }
    return attributes;
}
exports.getAllAttributesFromJsxElement = getAllAttributesFromJsxElement;
/**
 * Get a dictionary of JsxAttribute from a JsxElement, JsxSelfClosingElement or JsxOpeningElement.
 * @returns { [propName: string]: ts.JsxAttribute } a dictionary has lowercase keys.
 */
function getJsxAttributesFromJsxElement(node) {
    var attributesDictionary = {};
    getAllAttributesFromJsxElement(node).forEach(function (attr) {
        if (TypeGuard_1.isJsxAttribute(attr)) {
            attributesDictionary[getPropName(attr).toLowerCase()] = attr;
        }
    });
    return attributesDictionary;
}
exports.getJsxAttributesFromJsxElement = getJsxAttributesFromJsxElement;

//# sourceMappingURL=JsxAttribute.js.map
