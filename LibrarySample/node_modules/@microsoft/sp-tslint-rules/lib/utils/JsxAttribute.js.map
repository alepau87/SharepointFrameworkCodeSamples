{"version":3,"sources":["utils/JsxAttribute.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAGH,0BAQO,aAAa,CAAC,CAAA;AAErB,qBAA4B,IAAqB;IAC/C,EAAE,CAAC,CAAC,CAAC,0BAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;IAClF,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,IAAI;UACZ,IAAI,CAAC,IAAI,CAAC,IAAI;UACd,SAAS,CAAC;AAChB,CAAC;AARe,mBAAW,cAQ1B,CAAA;AAED;;;;;;GAMG;AACH,0BAAiC,IAAqB;IACpD,EAAE,CAAC,CAAC,CAAC,0BAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;IAClF,CAAC;IAED,IAAM,WAAW,GAAkB,IAAI,CAAC,WAAW,CAAC;IAEpD,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;QACjB,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,2BAAe,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;IACjC,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,2BAAe,CAAC,WAAW,CAAC,IAAI,2BAAe,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACnF,MAAM,CAAE,WAAW,CAAC,UAA+B,CAAC,IAAI,CAAC;IAC3D,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,2BAAe,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;QACnE,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;AACH,CAAC;AAlBe,wBAAgB,mBAkB/B,CAAA;AAED;;;;GAIG;AACH,2BAAkC,IAAqB;IACrD,EAAE,CAAC,CAAC,CAAC,0BAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;IAClF,CAAC;IAED,IAAM,WAAW,GAAkB,IAAI,CAAC,WAAW,CAAC;IAEpD,MAAM,CAAC,2BAAe,CAAC,WAAW,CAAC,IAAI,4BAAgB,CAAC,WAAW,CAAC,UAAU,CAAC;UAC1E,WAAW,CAAC,UAAmC,CAAC,IAAI;UACrD,SAAS,CAAC;AAChB,CAAC;AAVe,yBAAiB,oBAUhC,CAAA;AAED;;;GAGG;AACH,wCAA+C,IAAa;IAC1D,IAAI,UAAuD,CAAC;IAE5D,EAAE,CAAC,CAAC,wBAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACvB,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC;IAC9C,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,mCAAuB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACzC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;IAC/B,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,+BAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACrC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;IAC/B,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,MAAM,IAAI,KAAK,CAAC,4EAA4E,CAAC,CAAC;IAChG,CAAC;IAED,MAAM,CAAC,UAAU,CAAC;AACpB,CAAC;AAde,sCAA8B,iCAc7C,CAAA;AAED;;;GAGG;AACH,wCAA+C,IAAa;IAC1D,IAAI,oBAAoB,GAA4C,EAAE,CAAC;IAEvE,8BAA8B,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAC,IAAI;QAChD,EAAE,CAAC,CAAC,0BAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACzB,oBAAoB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC,GAAG,IAAI,CAAC;QAC/D,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,oBAAoB,CAAC;AAC9B,CAAC;AAVe,sCAA8B,iCAU7C,CAAA","file":"utils/JsxAttribute.js","sourcesContent":["/**\r\n * @copyright Microsoft Corporation. All rights reserved.\r\n *\r\n * @JsxAttribute utilities for react rules.\r\n */\r\n\r\nimport * as ts from 'typescript';\r\nimport {\r\n  isJsxAttribute,\r\n  isJsxExpression,\r\n  isStringLiteral,\r\n  isNumericLiteral,\r\n  isJsxElement,\r\n  isJsxSelfClosingElement,\r\n  isJsxOpeningElement\r\n} from './TypeGuard';\r\n\r\nexport function getPropName(node: ts.JsxAttribute): string {\r\n  if (!isJsxAttribute(node)) {\r\n    throw new Error('The node must be a JsxAttribute collected by the AST parser.');\r\n  }\r\n\r\n  return node.name\r\n    ? node.name.text\r\n    : undefined;\r\n}\r\n\r\n/**\r\n * Get the string literal in jsx attribute initializer with following format:\r\n * @example\r\n * <div attribute='StringLiteral' />\r\n * @example\r\n * <div attribute={ 'StringLiteral' } />\r\n */\r\nexport function getStringLiteral(node: ts.JsxAttribute): string {\r\n  if (!isJsxAttribute(node)) {\r\n    throw new Error('The node must be a JsxAttribute collected by the AST parser.');\r\n  }\r\n\r\n  const initializer: ts.Expression = node.initializer;\r\n\r\n  if (!initializer) { // <tag attribute/>\r\n    return '';\r\n  } else if (isStringLiteral(initializer)) { // <tag attribute='value' />\r\n    return initializer.text.trim();\r\n  } else if (isJsxExpression(initializer) && isStringLiteral(initializer.expression)) { // <tag attribute={'value'} />\r\n    return (initializer.expression as ts.StringLiteral).text;\r\n  } else if (isJsxExpression(initializer) && !initializer.expression) { // <tag attribute={} />\r\n    return '';\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Get the numeric literal in jsx attribute initializer with following format:\r\n * @example\r\n * <div attribute={ 1 } />\r\n */\r\nexport function getNumericLiteral(node: ts.JsxAttribute): string {\r\n  if (!isJsxAttribute(node)) {\r\n    throw new Error('The node must be a JsxAttribute collected by the AST parser.');\r\n  }\r\n\r\n  const initializer: ts.Expression = node.initializer;\r\n\r\n  return isJsxExpression(initializer) && isNumericLiteral(initializer.expression)\r\n    ? (initializer.expression as ts.LiteralExpression).text\r\n    : undefined;\r\n}\r\n\r\n/**\r\n * Get an array of attributes in the given node.\r\n * It contains JsxAttribute and JsxSpreadAttribute.\r\n */\r\nexport function getAllAttributesFromJsxElement(node: ts.Node): (ts.JsxAttribute | ts.JsxSpreadAttribute)[] {\r\n  let attributes: (ts.JsxAttribute | ts.JsxSpreadAttribute)[];\r\n\r\n  if (isJsxElement(node)) {\r\n    attributes = node.openingElement.attributes;\r\n  } else if (isJsxSelfClosingElement(node)) {\r\n    attributes = node.attributes;\r\n  } else if (isJsxOpeningElement(node)) {\r\n    attributes = node.attributes;\r\n  } else {\r\n    throw new Error('The node must be a JsxElement, JsxSelfClosingElement or JsxOpeningElement.');\r\n  }\r\n\r\n  return attributes;\r\n}\r\n\r\n/**\r\n * Get a dictionary of JsxAttribute from a JsxElement, JsxSelfClosingElement or JsxOpeningElement.\r\n * @returns { [propName: string]: ts.JsxAttribute } a dictionary has lowercase keys.\r\n */\r\nexport function getJsxAttributesFromJsxElement(node: ts.Node): { [propName: string]: ts.JsxAttribute } {\r\n  let attributesDictionary: { [propName: string]: ts.JsxAttribute } = {};\r\n\r\n  getAllAttributesFromJsxElement(node).forEach((attr) => {\r\n    if (isJsxAttribute(attr)) {\r\n      attributesDictionary[getPropName(attr).toLowerCase()] = attr;\r\n    }\r\n  });\r\n\r\n  return attributesDictionary;\r\n}\r\n"],"sourceRoot":"/src"}