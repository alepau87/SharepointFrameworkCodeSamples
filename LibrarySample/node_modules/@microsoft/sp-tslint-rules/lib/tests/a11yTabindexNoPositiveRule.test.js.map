{"version":3,"sources":["tests/a11yTabindexNoPositiveRule.test.ts"],"names":[],"mappings":"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","file":"tests/a11yTabindexNoPositiveRule.test.js","sourcesContent":["import TestHelper from './TestHelper';\r\nimport { getFailureString } from '../rules/a11yTabindexNoPositiveRule';\r\n\r\n/**\r\n * Unit test for tabindex-no-positive\r\n */\r\ndescribe('a11yTabindexNoPositive', () => {\r\n  const ruleName: string = 'a11y-tabindex-no-positive';\r\n\r\n  describe('should pass', () => {\r\n    it('when the attribute name is not tabindex', () => {\r\n      const fileName: string = 'test-data/a11yTabindexNoPositive/PassingTestInputs/AttributeNotTabindex.tsx';\r\n      TestHelper.assertNoViolation(ruleName, fileName);\r\n    });\r\n\r\n    it('when the tabindex value is not string or numeric literal', () => {\r\n      const fileName: string =\r\n        'test-data/a11yTabindexNoPositive/PassingTestInputs/TabindexValueNotLiteral.tsx';\r\n      TestHelper.assertNoViolation(ruleName, fileName);\r\n    });\r\n\r\n    it('when the tabindex value is -1 or 0', () => {\r\n      const fileName: string = 'test-data/a11yTabindexNoPositive/PassingTestInputs/CorrectTabindexValue.tsx';\r\n      TestHelper.assertNoViolation(ruleName, fileName);\r\n    });\r\n  });\r\n\r\n  describe('should fail', () => {\r\n    it('when the tabindex value is undefined', () => {\r\n      const fileName: string =\r\n        'test-data/a11yTabindexNoPositive/FailingTestInputs/TabindexValueUndefined.tsx';\r\n\r\n      TestHelper.assertViolations(\r\n        ruleName,\r\n        fileName,\r\n        [\r\n          {\r\n            name: fileName,\r\n            ruleName: ruleName,\r\n            startPosition: { character: 6, line: 1 },\r\n            failure: getFailureString()\r\n          },\r\n          {\r\n            name: fileName,\r\n            ruleName: ruleName,\r\n            startPosition: { character: 6, line: 2 },\r\n            failure: getFailureString()\r\n          },\r\n          {\r\n            name: fileName,\r\n            ruleName: ruleName,\r\n            startPosition: { character: 6, line: 3 },\r\n            failure: getFailureString()\r\n          },\r\n          {\r\n            name: fileName,\r\n            ruleName: ruleName,\r\n            startPosition: { character: 6, line: 4 },\r\n            failure: getFailureString()\r\n          }\r\n        ]\r\n      );\r\n    });\r\n\r\n    it('when tabindex value is not a number', () => {\r\n      const fileName: string = 'test-data/a11yTabindexNoPositive/FailingTestInputs/TabindexValueNotNumericLiteral.tsx';\r\n\r\n      TestHelper.assertViolations(\r\n        ruleName,\r\n        fileName,\r\n        [\r\n          {\r\n            name: fileName,\r\n            ruleName: ruleName,\r\n            startPosition: { character: 6, line: 1 },\r\n            failure: getFailureString()\r\n          },\r\n          {\r\n            name: fileName,\r\n            ruleName: ruleName,\r\n            startPosition: { character: 6, line: 2 },\r\n            failure: getFailureString()\r\n          },\r\n          {\r\n            name: fileName,\r\n            ruleName: ruleName,\r\n            startPosition: { character: 6, line: 3 },\r\n            failure: getFailureString()\r\n          }\r\n        ]\r\n      );\r\n    });\r\n\r\n    it('when the tabindex value is not -1 or 0', () => {\r\n      const fileName: string = 'test-data/a11yTabindexNoPositive/FailingTestInputs/InvalidTabindexValue.tsx';\r\n\r\n      TestHelper.assertViolations(\r\n        ruleName,\r\n        fileName,\r\n        [\r\n          {\r\n            name: fileName,\r\n            ruleName: ruleName,\r\n            startPosition: { character: 6, line: 1 },\r\n            failure: getFailureString()\r\n          },\r\n          {\r\n            name: fileName,\r\n            ruleName: ruleName,\r\n            startPosition: { character: 6, line: 2 },\r\n            failure: getFailureString()\r\n          },\r\n          {\r\n            name: fileName,\r\n            ruleName: ruleName,\r\n            startPosition: { character: 6, line: 3 },\r\n            failure: getFailureString()\r\n          },\r\n          {\r\n            name: fileName,\r\n            ruleName: ruleName,\r\n            startPosition: { character: 6, line: 4 },\r\n            failure: getFailureString()\r\n          },\r\n          {\r\n            name: fileName,\r\n            ruleName: ruleName,\r\n            startPosition: { character: 6, line: 5 },\r\n            failure: getFailureString()\r\n          }\r\n        ]\r\n      );\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"/src"}