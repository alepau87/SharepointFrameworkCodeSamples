"use strict";
var TestHelper_1 = require('./TestHelper');
var a11yRoleSupportsAriaPropsRule_1 = require('../rules/a11yRoleSupportsAriaPropsRule');
/**
 * Unit test for a11y-role-supports-aria-props rule.
 */
describe('a11yRoleSupportsAriaPropsRule', function () {
    var ruleName = 'a11y-role-supports-aria-props';
    describe('should pass', function () {
        describe('implicit role test', function () {
            var fileDirectory = 'test-data/a11yRoleSupportsAriaProps/PassingTestInputs/ImplicitRoleTestInputs/';
            it('when a tag implicit role is link', function () {
                var fileName = fileDirectory + 'a/ImplicitLinkRole.tsx';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
            it('when area tag implicit role is link', function () {
                var fileName = fileDirectory + 'area/ImplicitLinkRole.tsx';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
            it('when img tag implicit role is img', function () {
                var fileName = fileDirectory + 'img/ImplicitImgRole.tsx';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
            it('when img tag implicit role is presentation', function () {
                var fileName = fileDirectory + 'img/ImplicitPresentationRole.tsx';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
            it('when input tag implicit role is button', function () {
                var fileName = fileDirectory + 'input/ImplicitButtonRole.tsx';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
            it('when input tag implicit role is checkbox', function () {
                var fileName = fileDirectory + 'input/ImplicitCheckboxRole.tsx';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
            it('when input tag implicit role is slider', function () {
                var fileName = fileDirectory + 'input/ImplicitSliderRole.tsx';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
            it('when input tag implicit role is textbox', function () {
                var fileName = fileDirectory + 'input/ImplicitTextboxRole.tsx';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
            it('when input tag implicit role is radio', function () {
                var fileName = fileDirectory + 'input/ImplicitRadioRole.tsx';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
            it('when link tag implicit role is link', function () {
                var fileName = fileDirectory + 'link/ImplicitLinkRole.tsx';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
            it('when menu tag implicit role is toolbar', function () {
                var fileName = fileDirectory + 'menu/ImplicitToolbarRole.tsx';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
            it('when menuitem tag implicit role is menuitemcheckbox', function () {
                var fileName = fileDirectory + 'menuitem/ImplicitMenuitemcheckboxRole.tsx';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
            it('when menuitem tag implicit role is menuitemradio', function () {
                var fileName = fileDirectory + 'menuitem/ImplicitMenuitemradioRole.tsx';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
            it('when menuitem tag implicit role is menuitem', function () {
                var fileName = fileDirectory + 'menuitem/ImplicitMenuitemRole.tsx';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
            it('when other tags has implicit role', function () {
                var fileName = fileDirectory + 'otherTags.tsx';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
        });
        describe('not implicit role test', function () {
            var fileDirectory = 'test-data/a11yRoleSupportsAriaProps/PassingTestInputs/NotImplicitRoleTestInputs/';
            it('when undefined role or empty role value', function () {
                var fileName = fileDirectory + 'UndefinedRoleOrEmptyRoleValue.tsx';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
            it('when not empty role value', function () {
                var fileName = fileDirectory + 'NotEmptyRoleValue.tsx';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
        });
    });
    describe('should fail', function () {
        var fileDirectory = 'test-data/a11yRoleSupportsAriaProps/FailingTestInputs/';
        it('when role name not supports aria prop', function () {
            var fileName = fileDirectory + 'RoleNameNotSupportsAriaProp.tsx';
            TestHelper_1.default.assertViolations(ruleName, fileName, [
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 2 },
                    failure: a11yRoleSupportsAriaPropsRule_1.getFailureStringForNotImplicitRole(['button'], ['aria-checked'])
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 5 },
                    failure: a11yRoleSupportsAriaPropsRule_1.getFailureStringForNotImplicitRole(['button', 'img'], ['aria-checked'])
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 8 },
                    failure: a11yRoleSupportsAriaPropsRule_1.getFailureStringForNotImplicitRole(['button'], ['aria-checked'])
                }
            ]);
        });
        it('when implicit role not supports aria prop', function () {
            var fileName = fileDirectory + 'ImplicitRoleNotSupportsAriaProp.tsx';
            TestHelper_1.default.assertViolations(ruleName, fileName, [
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 1 },
                    failure: a11yRoleSupportsAriaPropsRule_1.getFailureStringForImplicitRole('a', 'link', ['aria-checked'])
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 2 },
                    failure: a11yRoleSupportsAriaPropsRule_1.getFailureStringForImplicitRole('area', 'link', ['aria-checked'])
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 3 },
                    failure: a11yRoleSupportsAriaPropsRule_1.getFailureStringForImplicitRole('link', 'link', ['aria-checked'])
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 4 },
                    failure: a11yRoleSupportsAriaPropsRule_1.getFailureStringForImplicitRole('img', 'img', ['aria-checked'])
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 5 },
                    failure: a11yRoleSupportsAriaPropsRule_1.getFailureStringForImplicitRole('menu', 'toolbar', ['aria-checked'])
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 6 },
                    failure: a11yRoleSupportsAriaPropsRule_1.getFailureStringForImplicitRole('aside', 'complementary', ['aria-checked'])
                }
            ]);
        });
    });
});

//# sourceMappingURL=a11yRoleSupportsAriaPropsRule.test.js.map
