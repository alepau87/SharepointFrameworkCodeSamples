"use strict";
var TestHelper_1 = require('./TestHelper');
var a11yImgHasAltRule_1 = require('../rules/a11yImgHasAltRule');
/**
 * Unit test for a11y-img-has-alt rule
 */
describe('a11yImgHasAlt', function () {
    var ruleName = 'a11y-img-has-alt';
    describe('default tests', function () {
        describe('should pass', function () {
            var fileDirectory = 'test-data/a11yImgHasAlt/DefaltTests/PassingTestInputs/';
            it('when the element name is not img', function () {
                var fileName = fileDirectory + 'ElementNotImg.tsx';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
            it('when the img element has presentation role', function () {
                var fileName = fileDirectory + 'ImgElementHasPresentationRole';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
            it('when the img element has no empty alt value', function () {
                var fileName = fileDirectory + 'ImgElementHasAltAndAltValueNotEmpty';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
            it('when the img tag name is not lower case', function () {
                var fileName = fileDirectory + 'ImgElementNotLowerCase';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
            it('when the img element has spread attribute', function () {
                var fileName = fileDirectory + 'ImgElementHasSpreadAttribute';
                TestHelper_1.default.assertNoViolation(ruleName, fileName);
            });
        });
        describe('should fail', function () {
            var fileDirectory = 'test-data/a11yImgHasAlt/DefaltTests/FailingTestInputs/';
            it('when the img element has no alt prop', function () {
                var fileName = fileDirectory + 'ImgElementHasNoAlt.tsx';
                TestHelper_1.default.assertViolations(ruleName, fileName, [
                    {
                        name: fileName,
                        ruleName: ruleName,
                        startPosition: { character: 1, line: 1 },
                        failure: a11yImgHasAltRule_1.getFailureStringNoAlt('img')
                    },
                    {
                        name: fileName,
                        ruleName: ruleName,
                        startPosition: { character: 1, line: 2 },
                        failure: a11yImgHasAltRule_1.getFailureStringNoAlt('img')
                    }
                ]);
            });
            it('when the img element has empty alt value', function () {
                var fileName = fileDirectory + 'ImgElementHasEmptyAltValue.tsx';
                TestHelper_1.default.assertViolations(ruleName, fileName, [
                    {
                        name: fileName,
                        ruleName: ruleName,
                        startPosition: { character: 6, line: 1 },
                        failure: a11yImgHasAltRule_1.getFailureStringEmptyAlt('img')
                    },
                    {
                        name: fileName,
                        ruleName: ruleName,
                        startPosition: { character: 6, line: 2 },
                        failure: a11yImgHasAltRule_1.getFailureStringEmptyAlt('img')
                    },
                    {
                        name: fileName,
                        ruleName: ruleName,
                        startPosition: { character: 6, line: 3 },
                        failure: a11yImgHasAltRule_1.getFailureStringEmptyAlt('img')
                    },
                    {
                        name: fileName,
                        ruleName: ruleName,
                        startPosition: { character: 6, line: 4 },
                        failure: a11yImgHasAltRule_1.getFailureStringEmptyAlt('img')
                    }
                ]);
            });
        });
    });
    describe('custom element tests', function () {
        var options = [true, ['Picture']]; // tslint:disable-line:no-any
        describe('should pass', function () {
            var fileDirectory = 'test-data/a11yImgHasAlt/CustomElementTests/PassingTestInputs/';
            it('when the element is neither img nor custom element', function () {
                var fileName = fileDirectory + 'ElementNeitherImgNorCustomElement.tsx';
                TestHelper_1.default.assertNoViolationWithOptions(ruleName, options, fileName);
            });
            it('when custom element or img has presentation role', function () {
                var fileName = fileDirectory + 'CustomElementHasPresentationRole.tsx';
                TestHelper_1.default.assertNoViolationWithOptions(ruleName, options, fileName);
            });
            it('when custom element or img has not empty alt value', function () {
                var fileName = fileDirectory + 'CustomElementHasValidAltValue.tsx';
                TestHelper_1.default.assertNoViolationWithOptions(ruleName, options, fileName);
            });
        });
        describe('should fail', function () {
            var fileDirectory = 'test-data/a11yImgHasAlt/CustomElementTests/FailingTestInputs/';
            it('when custom element or img has no alt prop', function () {
                var fileName = fileDirectory + 'CustomelementHasNoAltProp.tsx';
                TestHelper_1.default.assertViolationsWithOptions(ruleName, options, fileName, [
                    {
                        name: fileName,
                        ruleName: ruleName,
                        startPosition: { character: 1, line: 1 },
                        failure: a11yImgHasAltRule_1.getFailureStringNoAlt('Picture')
                    },
                    {
                        name: fileName,
                        ruleName: ruleName,
                        startPosition: { character: 1, line: 2 },
                        failure: a11yImgHasAltRule_1.getFailureStringNoAlt('Picture')
                    },
                    {
                        name: fileName,
                        ruleName: ruleName,
                        startPosition: { character: 1, line: 3 },
                        failure: a11yImgHasAltRule_1.getFailureStringNoAlt('img')
                    },
                    {
                        name: fileName,
                        ruleName: ruleName,
                        startPosition: { character: 1, line: 4 },
                        failure: a11yImgHasAltRule_1.getFailureStringNoAlt('img')
                    }
                ]);
            });
            it('when custom element or img has empty alt value', function () {
                var fileName = fileDirectory + 'CustomElementHasEmptyAltValue.tsx';
                TestHelper_1.default.assertViolationsWithOptions(ruleName, options, fileName, [
                    {
                        name: fileName,
                        ruleName: ruleName,
                        startPosition: { character: 10, line: 1 },
                        failure: a11yImgHasAltRule_1.getFailureStringEmptyAlt('Picture')
                    },
                    {
                        name: fileName,
                        ruleName: ruleName,
                        startPosition: { character: 10, line: 2 },
                        failure: a11yImgHasAltRule_1.getFailureStringEmptyAlt('Picture')
                    },
                    {
                        name: fileName,
                        ruleName: ruleName,
                        startPosition: { character: 10, line: 3 },
                        failure: a11yImgHasAltRule_1.getFailureStringEmptyAlt('Picture')
                    },
                    {
                        name: fileName,
                        ruleName: ruleName,
                        startPosition: { character: 6, line: 4 },
                        failure: a11yImgHasAltRule_1.getFailureStringEmptyAlt('img')
                    },
                    {
                        name: fileName,
                        ruleName: ruleName,
                        startPosition: { character: 6, line: 5 },
                        failure: a11yImgHasAltRule_1.getFailureStringEmptyAlt('img')
                    },
                    {
                        name: fileName,
                        ruleName: ruleName,
                        startPosition: { character: 6, line: 6 },
                        failure: a11yImgHasAltRule_1.getFailureStringEmptyAlt('img')
                    }
                ]);
            });
        });
    });
});

//# sourceMappingURL=a11yImgHasAltRule.test.js.map
