{"version":3,"sources":["tests/a11yImgHasAltRule.test.ts"],"names":[],"mappings":"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","file":"tests/a11yImgHasAltRule.test.js","sourcesContent":["import TestHelper from './TestHelper';\r\nimport { getFailureStringNoAlt, getFailureStringEmptyAlt } from '../rules/a11yImgHasAltRule';\r\n\r\n/**\r\n * Unit test for a11y-img-has-alt rule\r\n */\r\ndescribe('a11yImgHasAlt', () => {\r\n  const ruleName: string = 'a11y-img-has-alt';\r\n\r\n  describe('default tests', () => {\r\n    describe('should pass', () => {\r\n      const fileDirectory: string = 'test-data/a11yImgHasAlt/DefaltTests/PassingTestInputs/';\r\n\r\n      it('when the element name is not img', () => {\r\n        const fileName: string = fileDirectory + 'ElementNotImg.tsx';\r\n        TestHelper.assertNoViolation(ruleName, fileName);\r\n      });\r\n\r\n      it('when the img element has presentation role', () => {\r\n        const fileName: string = fileDirectory + 'ImgElementHasPresentationRole';\r\n        TestHelper.assertNoViolation(ruleName, fileName);\r\n      });\r\n\r\n      it('when the img element has no empty alt value', () => {\r\n        const fileName: string = fileDirectory + 'ImgElementHasAltAndAltValueNotEmpty';\r\n        TestHelper.assertNoViolation(ruleName, fileName);\r\n      });\r\n\r\n      it('when the img tag name is not lower case', () => {\r\n        const fileName: string = fileDirectory + 'ImgElementNotLowerCase';\r\n        TestHelper.assertNoViolation(ruleName, fileName);\r\n      });\r\n\r\n      it('when the img element has spread attribute', () => {\r\n        const fileName: string = fileDirectory + 'ImgElementHasSpreadAttribute';\r\n        TestHelper.assertNoViolation(ruleName, fileName);\r\n      });\r\n    });\r\n\r\n    describe('should fail', () => {\r\n      const fileDirectory: string = 'test-data/a11yImgHasAlt/DefaltTests/FailingTestInputs/';\r\n\r\n      it('when the img element has no alt prop', () => {\r\n        const fileName: string = fileDirectory + 'ImgElementHasNoAlt.tsx';\r\n\r\n        TestHelper.assertViolations(\r\n          ruleName,\r\n          fileName,\r\n          [\r\n            {\r\n              name: fileName,\r\n              ruleName: ruleName,\r\n              startPosition: { character: 1, line: 1 },\r\n              failure: getFailureStringNoAlt('img')\r\n            },\r\n            {\r\n              name: fileName,\r\n              ruleName: ruleName,\r\n              startPosition: { character: 1, line: 2 },\r\n              failure: getFailureStringNoAlt('img')\r\n            }\r\n          ]\r\n        );\r\n      });\r\n\r\n      it('when the img element has empty alt value', () => {\r\n        const fileName: string = fileDirectory + 'ImgElementHasEmptyAltValue.tsx';\r\n\r\n        TestHelper.assertViolations(\r\n          ruleName,\r\n          fileName,\r\n          [\r\n            {\r\n              name: fileName,\r\n              ruleName: ruleName,\r\n              startPosition: { character: 6, line: 1 },\r\n              failure: getFailureStringEmptyAlt('img')\r\n            },\r\n            {\r\n              name: fileName,\r\n              ruleName: ruleName,\r\n              startPosition: { character: 6, line: 2 },\r\n              failure: getFailureStringEmptyAlt('img')\r\n            },\r\n            {\r\n              name: fileName,\r\n              ruleName: ruleName,\r\n              startPosition: { character: 6, line: 3 },\r\n              failure: getFailureStringEmptyAlt('img')\r\n            },\r\n            {\r\n              name: fileName,\r\n              ruleName: ruleName,\r\n              startPosition: { character: 6, line: 4 },\r\n              failure: getFailureStringEmptyAlt('img')\r\n            }\r\n          ]\r\n        );\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('custom element tests', () => {\r\n    const options: any[] = [true, ['Picture']]; // tslint:disable-line:no-any\r\n\r\n    describe('should pass', () => {\r\n      const fileDirectory: string = 'test-data/a11yImgHasAlt/CustomElementTests/PassingTestInputs/';\r\n\r\n      it('when the element is neither img nor custom element', () => {\r\n        const fileName: string = fileDirectory + 'ElementNeitherImgNorCustomElement.tsx';\r\n        TestHelper.assertNoViolationWithOptions(ruleName, options, fileName);\r\n      });\r\n\r\n      it('when custom element or img has presentation role', () => {\r\n        const fileName: string = fileDirectory + 'CustomElementHasPresentationRole.tsx';\r\n        TestHelper.assertNoViolationWithOptions(ruleName, options, fileName);\r\n      });\r\n\r\n      it('when custom element or img has not empty alt value', () => {\r\n        const fileName: string = fileDirectory + 'CustomElementHasValidAltValue.tsx';\r\n        TestHelper.assertNoViolationWithOptions(ruleName, options, fileName);\r\n      });\r\n    });\r\n\r\n    describe('should fail', () => {\r\n      const fileDirectory: string = 'test-data/a11yImgHasAlt/CustomElementTests/FailingTestInputs/';\r\n\r\n      it('when custom element or img has no alt prop', () => {\r\n        const fileName: string = fileDirectory + 'CustomelementHasNoAltProp.tsx';\r\n\r\n        TestHelper.assertViolationsWithOptions(\r\n          ruleName,\r\n          options,\r\n          fileName,\r\n          [\r\n            {\r\n              name: fileName,\r\n              ruleName: ruleName,\r\n              startPosition: { character: 1, line: 1 },\r\n              failure: getFailureStringNoAlt('Picture')\r\n            },\r\n            {\r\n              name: fileName,\r\n              ruleName: ruleName,\r\n              startPosition: { character: 1, line: 2 },\r\n              failure: getFailureStringNoAlt('Picture')\r\n            },\r\n            {\r\n              name: fileName,\r\n              ruleName: ruleName,\r\n              startPosition: { character: 1, line: 3 },\r\n              failure: getFailureStringNoAlt('img')\r\n            },\r\n            {\r\n              name: fileName,\r\n              ruleName: ruleName,\r\n              startPosition: { character: 1, line: 4 },\r\n              failure: getFailureStringNoAlt('img')\r\n            }\r\n          ]\r\n        );\r\n      });\r\n\r\n      it('when custom element or img has empty alt value', () => {\r\n        const fileName: string = fileDirectory + 'CustomElementHasEmptyAltValue.tsx';\r\n\r\n        TestHelper.assertViolationsWithOptions(\r\n          ruleName,\r\n          options,\r\n          fileName,\r\n          [\r\n            {\r\n              name: fileName,\r\n              ruleName: ruleName,\r\n              startPosition: { character: 10, line: 1 },\r\n              failure: getFailureStringEmptyAlt('Picture')\r\n            },\r\n            {\r\n              name: fileName,\r\n              ruleName: ruleName,\r\n              startPosition: { character: 10, line: 2 },\r\n              failure: getFailureStringEmptyAlt('Picture')\r\n            },\r\n            {\r\n              name: fileName,\r\n              ruleName: ruleName,\r\n              startPosition: { character: 10, line: 3 },\r\n              failure: getFailureStringEmptyAlt('Picture')\r\n            },\r\n            {\r\n              name: fileName,\r\n              ruleName: ruleName,\r\n              startPosition: { character: 6, line: 4 },\r\n              failure: getFailureStringEmptyAlt('img')\r\n            },\r\n            {\r\n              name: fileName,\r\n              ruleName: ruleName,\r\n              startPosition: { character: 6, line: 5 },\r\n              failure: getFailureStringEmptyAlt('img')\r\n            },\r\n            {\r\n              name: fileName,\r\n              ruleName: ruleName,\r\n              startPosition: { character: 6, line: 6 },\r\n              failure: getFailureStringEmptyAlt('img')\r\n            }\r\n          ]\r\n        );\r\n      });\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"/src"}