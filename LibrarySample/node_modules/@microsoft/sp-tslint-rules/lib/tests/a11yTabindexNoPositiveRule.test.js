"use strict";
var TestHelper_1 = require('./TestHelper');
var a11yTabindexNoPositiveRule_1 = require('../rules/a11yTabindexNoPositiveRule');
/**
 * Unit test for tabindex-no-positive
 */
describe('a11yTabindexNoPositive', function () {
    var ruleName = 'a11y-tabindex-no-positive';
    describe('should pass', function () {
        it('when the attribute name is not tabindex', function () {
            var fileName = 'test-data/a11yTabindexNoPositive/PassingTestInputs/AttributeNotTabindex.tsx';
            TestHelper_1.default.assertNoViolation(ruleName, fileName);
        });
        it('when the tabindex value is not string or numeric literal', function () {
            var fileName = 'test-data/a11yTabindexNoPositive/PassingTestInputs/TabindexValueNotLiteral.tsx';
            TestHelper_1.default.assertNoViolation(ruleName, fileName);
        });
        it('when the tabindex value is -1 or 0', function () {
            var fileName = 'test-data/a11yTabindexNoPositive/PassingTestInputs/CorrectTabindexValue.tsx';
            TestHelper_1.default.assertNoViolation(ruleName, fileName);
        });
    });
    describe('should fail', function () {
        it('when the tabindex value is undefined', function () {
            var fileName = 'test-data/a11yTabindexNoPositive/FailingTestInputs/TabindexValueUndefined.tsx';
            TestHelper_1.default.assertViolations(ruleName, fileName, [
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 1 },
                    failure: a11yTabindexNoPositiveRule_1.getFailureString()
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 2 },
                    failure: a11yTabindexNoPositiveRule_1.getFailureString()
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 3 },
                    failure: a11yTabindexNoPositiveRule_1.getFailureString()
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 4 },
                    failure: a11yTabindexNoPositiveRule_1.getFailureString()
                }
            ]);
        });
        it('when tabindex value is not a number', function () {
            var fileName = 'test-data/a11yTabindexNoPositive/FailingTestInputs/TabindexValueNotNumericLiteral.tsx';
            TestHelper_1.default.assertViolations(ruleName, fileName, [
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 1 },
                    failure: a11yTabindexNoPositiveRule_1.getFailureString()
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 2 },
                    failure: a11yTabindexNoPositiveRule_1.getFailureString()
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 3 },
                    failure: a11yTabindexNoPositiveRule_1.getFailureString()
                }
            ]);
        });
        it('when the tabindex value is not -1 or 0', function () {
            var fileName = 'test-data/a11yTabindexNoPositive/FailingTestInputs/InvalidTabindexValue.tsx';
            TestHelper_1.default.assertViolations(ruleName, fileName, [
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 1 },
                    failure: a11yTabindexNoPositiveRule_1.getFailureString()
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 2 },
                    failure: a11yTabindexNoPositiveRule_1.getFailureString()
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 3 },
                    failure: a11yTabindexNoPositiveRule_1.getFailureString()
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 4 },
                    failure: a11yTabindexNoPositiveRule_1.getFailureString()
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 6, line: 5 },
                    failure: a11yTabindexNoPositiveRule_1.getFailureString()
                }
            ]);
        });
    });
});

//# sourceMappingURL=a11yTabindexNoPositiveRule.test.js.map
