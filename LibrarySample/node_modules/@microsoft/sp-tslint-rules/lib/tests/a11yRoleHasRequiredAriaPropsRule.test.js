"use strict";
var TestHelper_1 = require('./TestHelper');
var a11yRoleHasRequiredAriaPropsRule_1 = require('../rules/a11yRoleHasRequiredAriaPropsRule');
/**
 * Unit test for a11y-role-has-required-aria-props rule
 */
describe('a11yRoleHasRequiredAriaPropsRule', function () {
    var ruleName = 'a11y-role-has-required-aria-props';
    describe('should pass', function () {
        var fileDirectory = 'test-data/a11yRoleHasRequiredAriaProps/PassingTestInputs/';
        it('when the attribute has no valid role', function () {
            var fileName = fileDirectory + 'AttributeHasNoValidRole.tsx';
            TestHelper_1.default.assertNoViolation(ruleName, fileName);
        });
        it('when the role value is not string', function () {
            var fileName = fileDirectory + 'RoleValueNotLiteralString.tsx';
            TestHelper_1.default.assertNoViolation(ruleName, fileName);
        });
        it('when the role value has no required props', function () {
            var fileName = fileDirectory + 'RoleHasNoRequiredProps.tsx';
            TestHelper_1.default.assertNoViolation(ruleName, fileName);
        });
        it('when the role value and attributes have required props', function () {
            var fileName = fileDirectory + 'RoleValueAndAttributesHaveRequiredProps.tsx';
            TestHelper_1.default.assertNoViolation(ruleName, fileName);
        });
    });
    describe('should fail', function () {
        var fileDirectory = 'test-data/a11yRoleHasRequiredAriaProps/FailingTestInputs/';
        it('when the slider role missing required props', function () {
            var fileName = fileDirectory + 'SliderRoleMissingRequiredProps.tsx';
            TestHelper_1.default.assertViolations(ruleName, fileName, [
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 1 },
                    failure: a11yRoleHasRequiredAriaPropsRule_1.getFailureStringForNotImplicitRole(['slider'], ['aria-valuemax', 'aria-valuemin', 'aria-valuenow'])
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 2 },
                    failure: a11yRoleHasRequiredAriaPropsRule_1.getFailureStringForNotImplicitRole(['slider'], ['aria-valuemax', 'aria-valuemin', 'aria-valuenow'])
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 3 },
                    failure: a11yRoleHasRequiredAriaPropsRule_1.getFailureStringForNotImplicitRole(['slider'], ['aria-valuenow'])
                }
            ]);
        });
        it('when the spinbutton role missing required props', function () {
            var fileName = fileDirectory + 'SpinbuttonRoleMissingRequiredProps.tsx';
            TestHelper_1.default.assertViolations(ruleName, fileName, [
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 1 },
                    failure: a11yRoleHasRequiredAriaPropsRule_1.getFailureStringForNotImplicitRole(['spinbutton'], ['aria-valuemax', 'aria-valuemin', 'aria-valuenow'])
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 2 },
                    failure: a11yRoleHasRequiredAriaPropsRule_1.getFailureStringForNotImplicitRole(['button', 'spinbutton'], ['aria-valuemax', 'aria-valuemin', 'aria-valuenow'])
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 3 },
                    failure: a11yRoleHasRequiredAriaPropsRule_1.getFailureStringForNotImplicitRole(['spinbutton'], ['aria-valuemin'])
                }
            ]);
        });
        it('when the checkbox role missing required props', function () {
            var fileName = fileDirectory + 'CheckboxRoleMissingRequiredProps.tsx';
            TestHelper_1.default.assertViolations(ruleName, fileName, [
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 1 },
                    failure: a11yRoleHasRequiredAriaPropsRule_1.getFailureStringForNotImplicitRole(['checkbox'], ['aria-checked'])
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 2 },
                    failure: a11yRoleHasRequiredAriaPropsRule_1.getFailureStringForNotImplicitRole(['checkbox'], ['aria-checked'])
                }
            ]);
        });
        it('when the combobox role missing required props', function () {
            var fileName = fileDirectory + 'ComboboxRoleMissingRequiredProps.tsx';
            TestHelper_1.default.assertViolations(ruleName, fileName, [
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 1 },
                    failure: a11yRoleHasRequiredAriaPropsRule_1.getFailureStringForNotImplicitRole(['combobox'], ['aria-expanded'])
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 2 },
                    failure: a11yRoleHasRequiredAriaPropsRule_1.getFailureStringForNotImplicitRole(['combobox'], ['aria-expanded'])
                }
            ]);
        });
        it('when the scrollbar role missing required props', function () {
            var fileName = fileDirectory + 'ScrollbarRoleMissingRequiredProps.tsx';
            TestHelper_1.default.assertViolations(ruleName, fileName, [
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 1 },
                    failure: a11yRoleHasRequiredAriaPropsRule_1.getFailureStringForNotImplicitRole(['scrollbar'], ['aria-controls', 'aria-orientation', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow'])
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 2 },
                    failure: a11yRoleHasRequiredAriaPropsRule_1.getFailureStringForNotImplicitRole(['scrollbar'], ['aria-controls', 'aria-orientation', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow'])
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 3 },
                    failure: a11yRoleHasRequiredAriaPropsRule_1.getFailureStringForNotImplicitRole(['scrollbar'], ['aria-valuemin', 'aria-valuenow'])
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 4 },
                    failure: a11yRoleHasRequiredAriaPropsRule_1.getFailureStringForNotImplicitRole(['scrollbar'], ['aria-valuenow'])
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 5 },
                    failure: a11yRoleHasRequiredAriaPropsRule_1.getFailureStringForNotImplicitRole(['scrollbar'], ['aria-controls'])
                }
            ]);
        });
        it('when multiple role missing requiredProps', function () {
            var fileName = fileDirectory + 'MultipleRoleMissingRequiredProps.tsx';
            TestHelper_1.default.assertViolations(ruleName, fileName, [
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 1 },
                    failure: a11yRoleHasRequiredAriaPropsRule_1.getFailureStringForNotImplicitRole(['button', 'checkbox'], ['aria-checked'])
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 2 },
                    failure: a11yRoleHasRequiredAriaPropsRule_1.getFailureStringForNotImplicitRole(['button', 'checkbox', 'combobox'], ['aria-checked', 'aria-expanded'])
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 3 },
                    failure: a11yRoleHasRequiredAriaPropsRule_1.getFailureStringForNotImplicitRole(['button', 'checkbox', 'combobox'], ['aria-expanded'])
                },
                {
                    name: fileName,
                    ruleName: ruleName,
                    startPosition: { character: 1, line: 4 },
                    failure: a11yRoleHasRequiredAriaPropsRule_1.getFailureStringForNotImplicitRole(['button', 'checkbox', 'combobox'], ['aria-checked'])
                }
            ]);
        });
    });
});

//# sourceMappingURL=a11yRoleHasRequiredAriaPropsRule.test.js.map
