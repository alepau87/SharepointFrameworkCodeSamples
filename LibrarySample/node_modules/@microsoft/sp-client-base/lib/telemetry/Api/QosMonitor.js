"use strict";
/**
 * @copyright Microsoft Corporation. All rights reserved.
 * @file QosLogger.ts
 * Qos logger
 * This class represents the Qos monitor APIs
 */
var odsp_utilities_bundle_1 = require('@ms/odsp-utilities-bundle');
var odsp_utilities_bundle_2 = require('@ms/odsp-utilities-bundle');
/**
 * @preapproved @internal
 */
var QosMonitor = (function () {
    /**
   * Creates a QoS monitor (initializes it and logs the start event)
   * @param	scenarioName	Unique name of the QoS scenario
   * You will see start tag: SPPages.ScenarioName.Start
   */
    function QosMonitor(scenarioName) {
        if (!scenarioName || scenarioName.length === 0) {
            throw new Error('senanrio name is invalid');
        }
        this.qos = new odsp_utilities_bundle_1.Qos({ name: scenarioName });
    }
    /**
     * QoS monitor ends with success
     * You will see success tag: SPPages.ScenarioName.Success
     */
    QosMonitor.prototype.writeSuccess = function (/* tslint:disable:no-any */ extraData) {
        if (!this.qos) {
            throw new Error('monitor instance is null or undefined');
        }
        this.qos.end({
            resultType: odsp_utilities_bundle_2.ResultTypeEnum.Success,
            extraData: extraData
        });
    };
    /**
     * QoS monitor ends with failure
     * You will see failure tag: SPPages.ScenarioName.<failuretag>.Failure.
     * <failuretag> will be filled with @param tagName
     */
    QosMonitor.prototype.writeUnexpectedFailure = function (tagNameSuffix, ex, 
        /* tslint:disable:no-any */
        extraData) {
        if (tagNameSuffix === void 0) { tagNameSuffix = 'DefaultUnexpected'; }
        if (!this.qos) {
            throw new Error('monitor instance is null or undefined');
        }
        if (ex) {
            this.qos.end({
                resultCode: tagNameSuffix,
                resultType: odsp_utilities_bundle_2.ResultTypeEnum.Failure,
                error: ex.message,
                extraData: extraData
            });
        }
        else {
            this.qos.end({
                resultCode: tagNameSuffix,
                resultType: odsp_utilities_bundle_2.ResultTypeEnum.Failure,
                extraData: extraData
            });
        }
    };
    /*
     * QoS monitor ends with expected failure
     * You will see success tag: ModernPublish.RenderPublishPage.<failuretag>.ExpectedFailure.
     * <failuretag> will be filled with @param tagName
     */
    QosMonitor.prototype.writeExpectedFailure = function (tagNameSuffix, ex, 
        /* tslint:disable:no-any */
        extraData) {
        if (tagNameSuffix === void 0) { tagNameSuffix = 'DefaultExpected'; }
        if (!this.qos) {
            throw new Error('monitor instance is null or undefined');
        }
        if (ex) {
            this.qos.end({
                resultCode: tagNameSuffix,
                resultType: odsp_utilities_bundle_2.ResultTypeEnum.ExpectedFailure,
                error: ex.message,
                extraData: extraData
            });
        }
        else {
            this.qos.end({
                resultCode: tagNameSuffix,
                resultType: odsp_utilities_bundle_2.ResultTypeEnum.ExpectedFailure,
                extraData: extraData
            });
        }
    };
    Object.defineProperty(QosMonitor.prototype, "name", {
        get: function () {
            return this.qos.data.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QosMonitor.prototype, "enabled", {
        get: function () {
            return this.qos.enabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QosMonitor.prototype, "shortEventName", {
        get: function () {
            return this.qos.shortEventName;
        },
        enumerable: true,
        configurable: true
    });
    return QosMonitor;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = QosMonitor;

//# sourceMappingURL=QosMonitor.js.map
