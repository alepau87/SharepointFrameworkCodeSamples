{"version":3,"sources":["components/Checkbox/Checkbox.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAE/B,oBAAoB,qBAAqB,CAAC,CAAA;AAC1C,QAAO,iBAAiB,CAAC,CAAA;AAMzB,IAAI,SAAS,GAAW,CAAC,CAAC;AAE1B;IAA8B,4BAA+C;IAS3E,kBAAY,KAAqB;QAC/B,kBAAM,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,KAAK,GAAG;YACX,SAAS,EAAE,KAAK,CAAC,SAAS;SAC3B,CAAC;QAEF,IAAI,CAAC,GAAG,GAAG,cAAa,SAAS,EAAK,CAAC;QAEvC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/D,CAAC;IAEM,4CAAyB,GAAhC,UAAiC,QAAwB;QACvD,EAAE,CAAC,CAAC,QAAQ,CAAC,SAAS,KAAK,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,QAAQ,CAAC;gBACZ,SAAS,EAAE,QAAQ,CAAC,SAAS;aAC9B,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAEM,yBAAM,GAAb;QAAA,iBAuBC;QAtBC,IAAA,eAA+C,EAAzC,cAAI,EAAE,wBAAS,EAAE,wBAAS,CAAgB;QAC1C,oCAAS,CAAgB;QAE/B,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,SAAS,EAAG,SAAG,CAAC,gBAAgB,EAAE,SAAS,CAAG,GACjD,qBAAC,KAAK,IACJ,GAAG,EAAG,UAAC,CAAC,IAAuB,OAAA,KAAI,CAAC,SAAS,GAAG,CAAC,EAAlB,CAAoB,EACnD,EAAE,EAAG,IAAI,CAAC,GAAK,EACf,IAAI,EAAG,IAAI,CAAC,GAAK,EACjB,SAAS,EAAC,sBAAsB,EAChC,IAAI,EAAC,UAAU,EACf,IAAI,EAAC,UAAU,EACf,OAAO,EAAG,SAAW,EACrB,QAAQ,EAAG,CAAC,SAAW,EACvB,QAAQ,EAAG,IAAI,CAAC,kBAAoB,GACpC,YAAY,GAAG,SAAW,EAC1B,EACF,qBAAC,KAAK,IAAC,OAAO,EAAG,IAAI,CAAC,GAAK,EAAC,SAAS,EAAC,sBAAsB,GACxD,IAAI,IAAI,qBAAC,IAAI,IAAC,SAAS,EAAC,UAAU,GAAG,IAAM,CAAS,CAChD,CACJ,CACP,CAAC;IACJ,CAAC;IAEM,wBAAK,GAAZ;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QAC3B,CAAC;IACL,CAAC;IAEO,qCAAkB,GAA1B,UAA2B,GAAoB;QACvC,oCAAS,CAAgB;QAC/B,IAAM,SAAS,GAAI,GAAG,CAAC,MAA2B,CAAC,OAAO,CAAC;QAE3D,IAAI,CAAC,QAAQ,CAAC;YACZ,SAAS,EAAE,SAAS;SACrB,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACd,SAAS,CAAC,SAAS,CAAC,CAAC;QACvB,CAAC;IACH,CAAC;IAtEa,qBAAY,GAAG;QAC3B,UAAU,EAAE,KAAK;QACjB,SAAS,EAAE,IAAI;KAChB,CAAC;IAoEJ,eAAC;AAAD,CAxEA,AAwEC,CAxE6B,KAAK,CAAC,SAAS,GAwE5C;AAxEY,gBAAQ,WAwEpB,CAAA","file":"components/Checkbox/Checkbox.js","sourcesContent":["import * as React from 'react';\nimport { ICheckboxProps } from './Checkbox.Props';\nimport { css } from '../../utilities/css';\nimport './Checkbox.scss';\n\nexport interface ICheckboxState {\n  isChecked: boolean;\n}\n\nlet _instance: number = 0;\n\nexport class Checkbox extends React.Component<ICheckboxProps, ICheckboxState> {\n  public static defaultProps = {\n    isSelected: false,\n    isEnabled: true\n  };\n\n  private _id: string;\n  private _checkBox: HTMLInputElement;\n\n  constructor(props: ICheckboxProps) {\n    super(props);\n\n    this.state = {\n      isChecked: props.isChecked\n    };\n\n    this._id = `checkbox-${ _instance++ }`;\n\n    this._handleInputChange = this._handleInputChange.bind(this);\n  }\n\n  public componentWillReceiveProps(newProps: ICheckboxProps) {\n    if (newProps.isChecked !== this.props.isChecked) {\n      this.setState({\n        isChecked: newProps.isChecked\n      });\n    }\n  }\n\n  public render() {\n    let { text, isEnabled, className } = this.props;\n    let { isChecked } = this.state;\n\n    return (\n      <div className={ css('ms-ChoiceField', className) }>\n        <input\n          ref={ (c): HTMLInputElement => this._checkBox = c }\n          id={ this._id }\n          name={ this._id }\n          className='ms-ChoiceField-input'\n          type='checkbox'\n          role='checkbox'\n          checked={ isChecked }\n          disabled={ !isEnabled }\n          onChange={ this._handleInputChange }\n          aria-checked={ isChecked }\n        />\n        <label htmlFor={ this._id } className='ms-ChoiceField-field'>\n          { text && <span className='ms-Label'>{ text }</span> }\n        </label>\n      </div>\n    );\n  }\n\n  public focus() {\n      if (this._checkBox) {\n          this._checkBox.focus();\n      }\n  }\n\n  private _handleInputChange(evt: React.FormEvent) {\n    let { onChanged } = this.props;\n    const isChecked = (evt.target as HTMLInputElement).checked;\n\n    this.setState({\n      isChecked: isChecked\n    });\n\n    if (onChanged) {\n      onChanged(isChecked);\n    }\n  }\n}\n"],"sourceRoot":"/src"}