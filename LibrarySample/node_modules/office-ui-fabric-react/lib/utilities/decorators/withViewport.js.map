{"version":3,"sources":["utilities/decorators/withViewport.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,8BAA8B,4BAA4B,CAAC,CAAA;AAW3D,IAAM,YAAY,GAAG,GAAG,CAAC;AAEzB,sBAAmC,iBAAsB;IAEvD,MAAM,CAAC;QAAoC,yCAAqC;QAO9E;YACE,iBAAO,CAAC;YAER,IAAI,CAAC,KAAK,GAAG;gBACX,QAAQ,EAAE;oBACR,KAAK,EAAE,CAAC;oBACR,MAAM,EAAE,CAAC;iBACV;aACF,CAAC;QACJ,CAAC;QAEM,iDAAiB,GAAxB;YACE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CACxC,IAAI,CAAC,cAAc,EACnB,YAAY,EACZ;gBACE,OAAO,EAAE,KAAK;aACf,CAAC,CAAC;YAEL,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;YACvD,IAAI,CAAC,eAAe,EAAE,CAAC;QACzB,CAAC;QAEM,oDAAoB,GAA3B;YACE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QACzB,CAAC;QAEM,sCAAM,GAAb;YACQ,kCAAQ,CAAgB;YAE9B,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,SAAS,EAAC,aAAa,EAAC,GAAG,EAAC,MAAM,EAAC,KAAK,EAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAI,GAC3E,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,CACpC,oBAAC,iBAAiB,kBAAC,GAAG,EAAC,WAAW,EAAC,QAAQ,EAAG,QAAU,GAAM,IAAI,CAAC,KAAK,EAAK,CAC3E,CACE,CACP,CAAC;QACJ,CAAC;QAEM,2CAAW,GAAlB;YACE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;QACpC,CAAC;QAEO,8CAAc,GAAtB;YACE,IAAI,CAAC,eAAe,EAAE,CAAC;QACzB,CAAC;QAEO,+CAAe,GAAvB;YACE,IAAI,eAAe,GAAI,IAAI,CAAC,IAAY,CAAC,IAAI,CAAC;YAC9C,IAAI,aAAa,GAAG,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC,CAAC;YAEjE,IAAI,UAAU,GAAG,eAAe,CAAC,qBAAqB,EAAE,CAAC;YACzD,IAAI,UAAU,GAAG,aAAa,CAAC,qBAAqB,EAAE,CAAC;YAEvD,IAAI,CAAC,QAAQ,CAAC;gBACZ,QAAQ,EAAE;oBACR,KAAK,EAAE,UAAU,CAAC,KAAK;oBACvB,MAAM,EAAE,UAAU,CAAC,MAAM;iBAC1B;aACF,CAAC,CAAC;QACL,CAAC;QAEO,sDAAsB,GAA9B,UAA+B,WAAwB;YACrD,IAAI,gBAAgB,GAAG,gBAAgB,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,CAAC;YAEnE,OACE,CAAC,WAAW,KAAK,QAAQ,CAAC,IAAI,CAAC;gBAC/B,CAAC,gBAAgB,KAAK,MAAM,CAAC;gBAC7B,CAAC,gBAAgB,KAAK,QAAQ,CAAC,EAC/B,CAAC;gBACD,EAAE,CAAC,CAAC,WAAW,CAAC,aAAa,KAAK,IAAI,CAAC,CAAC,CAAC;oBACvC,KAAK,CAAC;gBACR,CAAC;gBACD,WAAW,GAAG,WAAW,CAAC,aAAa,CAAC;gBACxC,gBAAgB,GAAG,gBAAgB,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,CAAC;YACjE,CAAC;YAED,MAAM,CAAC,WAAW,CAAC;QACrB,CAAC;QACH,4BAAC;IAAD,CAtFO,AAsFN,CAtF0C,6BAAa,EAsFvD,CAAC;AAEJ,CAAC;AA1Fe,oBAAY,eA0F3B,CAAA","file":"utilities/decorators/withViewport.js","sourcesContent":["import * as React from 'react';\nimport { BaseComponent } from '../../common/BaseComponent';\n\nexport interface IViewport {\n  width: number;\n  height: number;\n}\n\nexport interface IWithViewportState {\n  viewport?: IViewport;\n}\n\nconst RESIZE_DELAY = 500;\n\nexport function withViewport<P, S>(ComposedComponent: any): any {\n\n  return class WithViewportComponent extends BaseComponent<{}, IWithViewportState> {\n\n    public refs: {\n      [key: string]: React.ReactInstance;\n      component: any;\n    };\n\n    constructor() {\n      super();\n\n      this.state = {\n        viewport: {\n          width: 0,\n          height: 0\n        }\n      };\n    }\n\n    public componentDidMount() {\n      this._onAsyncResize = this._async.debounce(\n        this._onAsyncResize,\n        RESIZE_DELAY,\n        {\n          leading: false\n        });\n\n      this._events.on(window, 'resize', this._onAsyncResize);\n      this._updateViewport();\n    }\n\n    public componentWillUnmount() {\n      this._events.dispose();\n    }\n\n    public render() {\n      let { viewport } = this.state;\n\n      return (\n        <div className='ms-Viewport' ref='root' style={ { minWidth: 1, minHeight: 1 } }>\n          { this.state.viewport.height > 0 && (\n          <ComposedComponent ref='component' viewport={ viewport } { ...this.props } />\n          )}\n        </div>\n      );\n    }\n\n    public forceUpdate() {\n      this.refs.component.forceUpdate();\n    }\n\n    private _onAsyncResize() {\n      this._updateViewport();\n    }\n\n    private _updateViewport() {\n      let viewportElement = (this.refs as any).root;\n      let scrollElement = this._findScrollableElement(viewportElement);\n\n      let clientRect = viewportElement.getBoundingClientRect();\n      let scrollRect = scrollElement.getBoundingClientRect();\n\n      this.setState({\n        viewport: {\n          width: clientRect.width,\n          height: scrollRect.height\n        }\n      });\n    }\n\n    private _findScrollableElement(rootElement: HTMLElement) {\n      let computedOverflow = getComputedStyle(rootElement)['overflow-y'];\n\n      while (\n        (rootElement !== document.body) &&\n        (computedOverflow !== 'auto') &&\n        (computedOverflow !== 'scroll')\n      ) {\n        if (rootElement.parentElement === null) {\n          break;\n        }\n        rootElement = rootElement.parentElement;\n        computedOverflow = getComputedStyle(rootElement)['overflow-y'];\n      }\n\n      return rootElement;\n    }\n  };\n\n}\n"],"sourceRoot":"/src"}